# oslShaderParser
# Initial code generated by Softimage SDK Wizard
# Executed Wed Jul 12 22:32:00 UTC+0500 2017 by Shekn
#
# Tip: To add a command to this plug-in, right-click in the
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c
import os
import re

null = None
false = 0
true = 1


def log_message(message):
    Application.LogMessage(message)


def removeComments(string):
    string = re.sub(re.compile("\[\[.*?\]\]", re.DOTALL), "", string)
    string = re.sub(re.compile("/\*.*?\*/", re.DOTALL), "", string)  # remove all occurance streamed comments (/*COMMENT */) from string
    string = re.sub(re.compile("//.*?\n"), "", string)  # remove all occurance singleline comments (//COMMENT\n ) from string
    string = re.sub(re.compile("#define.*?\n"), "", string)
    string = re.sub(re.compile("#include.*?\n"), "", string)
    string = re.sub(re.compile("#ifdef.*?\n"), "", string)
    string = re.sub(re.compile("#endif.*?\n"), "", string)
    string = re.sub(re.compile("#ifndef.*?\n"), "", string)
    return string


def GetAllIndexes(string, symbol):
    toReturn = []
    for i in range(len(string)):
        if string[i] == symbol:
            toReturn.append(i)
    return toReturn


def GetInsideBracketsIntervals(openArray, closeArray):
    if len(openArray) != len(closeArray):
        return (False, [])
    else:
        intervals = []
        maxIndex = -1
        for i in range(len(openArray)):
            if openArray[i] < closeArray[i] and openArray[i] > maxIndex:
                newInterval = (openArray[i], closeArray[i])
                maxIndex = closeArray[i]
                intervals.append(newInterval)
            else:
                return (False, [])
        return (True, intervals)


def IsIndexInsideIntervals(i, intervals):
    for interval in intervals:
        if interval[0] < i and i < interval[1]:
            return True
    return False


def FromNameToTypeIndex(typeName):
    typeName = typeName.strip()
    if typeName == "int":
        return 0
    elif typeName == "float":
        return 1
    elif typeName == "color":
        return 2
    elif typeName == "string":
        return 3
    elif typeName == "point":
        return 4
    elif typeName == "vector":
        return 5
    elif typeName == "normal":
        return 6
    elif typeName == "closure":
        return 7
    else:
        return -1


def ColorStringToTupple(colorString):
    fiveSubstring = colorString[:5]
    if fiveSubstring == "color":
        valuesString = colorString[5:]
        valuesString = valuesString.strip()
        valuesString = valuesString[1:-1]
        parts = valuesString.split(",")
        valuesArray = []
        if len(parts) == 3 or len(parts) == 4:
            for i in range(len(parts)):
                p = parts[i]
                p = p.strip()
                try:
                    v = float(p)
                except ValueError:
                    v = 0.0
                valuesArray.append(v)
            return tuple(valuesArray)
        else:
            return (0.0, 0.0, 0.0)
    else:
        try:
            v = float(colorString)
        except ValueError:
            v = 0.0
        return (v, v, v)


def StringReduce(string):
    startIndex = 0
    endIndex = len(string)
    if string[0] == "\"":
        startIndex = 1
    if string[len(string) - 1] == "\"":
        endIndex = len(string) - 1
    toReturn = string[startIndex:endIndex]
    toReturn = toReturn.strip()

    return toReturn


def GetXsiCategoryFromFile(file):
    lines = file.readlines()
    for line in lines:
        if line[:14] == "//XsiCategory:" or line[:14] == "//XSICategory:":
            categoryPath = line[14:].strip()
            if len(categoryPath) != 0:
                parts = categoryPath.split("/")
                partsArray = []
                for p in parts:
                    p2 = p.strip()
                    if len(p2) > 0:
                        partsArray.append(p2)
                return tuple(partsArray)
    return None


def GetXsiCategory(textData):
    firstRowEndIndex = textData.find("\n")
    firstRow = textData[:firstRowEndIndex]
    if (firstRow[:14] == "//XsiCategory:") or (firstRow[:14] == "//XSICategory:"):
        categoryPath = firstRow[14:].strip()
        if len(categoryPath) == 0:
            return None
        else:
            parts = categoryPath.split("/")
            partsArray = []
            for p in parts:
                p2 = p.strip()
                if len(p2) > 0:
                    partsArray.append(p2)
            return tuple(partsArray)
    else:
        return None


# def ParseTheFile(file, isShort):
def ParseTheFile(fileName, isShort):
    parseData = []
    shaderName = None
    file = open(fileName, "r")
    textData = file.read()
    file.close()
    # categoryString = GetXsiCategory(textData)
    file = open(fileName, "r")
    categoryString = GetXsiCategoryFromFile(file)
    file.close()
    # remove comments
    textDataNoComments = removeComments(textData)
    # next replace all \n to spaces
    textPlain = textDataNoComments.replace("\n", " ")
    textPlain = textPlain.replace("\t", "")
    textPlain = " ".join(textPlain.split())
    # print(textPlain)
    shaderKeyIndex = textPlain.find("shader")
    if shaderKeyIndex == -1:
        shaderKeyIndex = textPlain.find("surface")
    if shaderKeyIndex != -1:
        openBraketIndex = textPlain.find("(", shaderKeyIndex)
        openBodyIndex = textPlain.find("{", shaderKeyIndex)
        if openBraketIndex != -1 and openBodyIndex != -1 and openBodyIndex > openBraketIndex:
            shaderName = textPlain[shaderKeyIndex + 7: openBraketIndex]
            shaderName = shaderName.strip()
            # print(shaderName)
            if not isShort:
                inputParametersText = textPlain[openBraketIndex + 1: openBodyIndex]
                inputParametersText = inputParametersText.strip()
                inputParametersText = inputParametersText[:-1]
                # print(inputParametersText)
                commasIndexes = GetAllIndexes(inputParametersText, ",")
                openBracketIndexes = GetAllIndexes(inputParametersText, "(")
                closeBracketIndexes = GetAllIndexes(inputParametersText, ")")
                bracketIntervals = GetInsideBracketsIntervals(openBracketIndexes, closeBracketIndexes)
                if bracketIntervals[0]:
                    # print(bracketIntervals)
                    parameterStrings = []
                    lastSplitIndex = 0
                    for commaIndex in commasIndexes:
                        if IsIndexInsideIntervals(commaIndex, bracketIntervals[1]):
                            # dont split along this index
                            # nothing to do
                            # print(str(commaIndex) + " inside brackets")
                            pass
                        else:
                            # print(str(commaIndex) + " split parameters")
                            subString = inputParametersText[lastSplitIndex:commaIndex]
                            subString = subString.strip()
                            parameterStrings.append(subString)
                            lastSplitIndex = commaIndex + 1
                    subString = inputParametersText[lastSplitIndex:len(inputParametersText)]
                    subString = subString.strip()
                    parameterStrings.append(subString)
                    for pString in parameterStrings:
                        leftRightParts = pString.split("=")
                        if len(leftRightParts) == 2:
                            leftPart = leftRightParts[0].strip()
                            rightPart = leftRightParts[1].strip()
                            # print("Left part: " + leftPart)
                            # print("Right part: " + rightPart)
                            # left part split by spaces
                            leftPartParts = leftPart.split(" ")
                            if leftPartParts[0].strip() == "output":
                                # this is output parameter
                                # print(leftPart + " = " + rightPart)
                                parameterType = FromNameToTypeIndex(leftPartParts[1].strip())
                                if parameterType != -1:
                                    if parameterType == 7:
                                        # this is closure
                                        parameterName = leftPartParts[3].strip()
                                        parseData.append((True, parameterType, parameterName, None))
                                    else:
                                        parameterName = leftPartParts[2].strip()
                                        parseData.append((True, parameterType, parameterName, None))
                                else:
                                    # wrong output type
                                    pass
                            else:
                                # this is input parameter
                                # print(leftPart)
                                parameterType = FromNameToTypeIndex(leftPartParts[0])
                                if parameterType != -1:
                                    parameterName = leftPartParts[1].strip()
                                    parameterValue = None
                                    if parameterType == 0:
                                        # Integer
                                        try:
                                            parameterValue = int(rightPart)
                                        except ValueError:
                                            parameterValue = 0
                                    elif parameterType == 1:
                                        # Float
                                        try:
                                            parameterValue = float(rightPart)
                                        except ValueError:
                                            parameterValue = 0.0
                                    elif parameterType == 2:
                                        # Color
                                        parameterValue = ColorStringToTupple(rightPart)
                                    elif parameterType == 7:
                                        # Closure
                                        parameterValue = (0, 0, 0)
                                        if len(leftPartParts) > 2:  # the string can be closure color shader1, and we need shader1 name
                                            parameterName = leftPartParts[2].strip()
                                    elif parameterType == 3:
                                        # String
                                        parameterValue = StringReduce(rightPart)
                                    parseData.append((False, parameterType, parameterName, parameterValue))
                                else:
                                    # wrong type
                                    pass
                        else:
                            # wrong parameter. Does not have " = "
                            pass
                else:
                    # wrong brackets in the input parameters
                    pass
            else:
                # this is short parsing
                pass
        else:
            # could not find proper shader parameters
            pass
    else:
        # no shader key
        pass
    return (categoryString, shaderName, parseData)


def GetReadebleName(inName):
    nameArray = []
    parts = inName.split("_")
    for p in parts:
        p2 = p.split(" ")
        for pp2 in p2:
            r = pp2.strip()
            if len(r) > 0:
                nameArray.append(r)
    normName = (" ".join(nameArray)).title()
    return normName

# ----------------------------------------------------------
# ----------------------------------------------------------
# ----------------------------------------------------------

def AddOutputColor(shaderDef, name="color"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeColor3, paramOptions)
    paramDef.MainPort = False


def AddOutputFloat(shaderDef, name="float"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeScalar, paramOptions)
    paramDef.MainPort = False


def AddOutputInt(shaderDef, name="integer"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeInteger, paramOptions)
    paramDef.MainPort = False


def AddOutputVector(shaderDef, name="vector"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeVector3, paramOptions)
    paramDef.MainPort = False


def AddOutputPoint(shaderDef, name="point"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeVector3, paramOptions)
    paramDef.MainPort = False


def AddOutputNormal(shaderDef, name="normal"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeVector3, paramOptions)
    paramDef.MainPort = False


def AddOutputClosure(shaderDef, name="closure"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeColor4, paramOptions)
    paramDef.MainPort = False


def AddOutputString(shaderDef, name="string"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shaderDef.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeString, paramOptions)
    paramDef.MainPort = False


def AddInputColor(paramOptions, params, defaultValue=1, name="color", use3Colors=True):
    paramOptions.SetDefaultValue(defaultValue)
    if use3Colors:
        params.AddParamDef(name, c.siShaderDataTypeColor3, paramOptions)
    else:
        params.AddParamDef(name, c.siShaderDataTypeColor4, paramOptions)


def AddInputFloat(paramOptions, params, defaultValue=0, name="float", visMin=None, visMax=None):
    paramOptions.SetDefaultValue(defaultValue)
    if visMin is not None and visMax is not None:
        paramOptions.SetSoftLimit(visMin, visMax)
    params.AddParamDef(name, c.siShaderDataTypeScalar, paramOptions)


def AddInputInteger(paramOptions, params, defaultValue=0, name="integer", visMin=None, visMax=None):
    paramOptions.SetDefaultValue(defaultValue)
    if visMin is not None and visMax is not None:
        paramOptions.SetSoftLimit(visMin, visMax)
    params.AddParamDef(name, c.siShaderDataTypeInteger, paramOptions)


def AddInputVector(paramOptions, params, defaultValue=0, name="vector", minVisible=None, maxVisible=None):
    paramOptions.SetDefaultValue(defaultValue)
    if minVisible is not None and maxVisible is not None:
        paramOptions.SetSoftLimit(minVisible, maxVisible)
    params.AddParamDef(name, c.siShaderDataTypeVector3, paramOptions)


def AddInputPoint(paramOptions, params, defaultValue=0, name="point"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeVector3, paramOptions)


def AddInputNormal(paramOptions, params, defaultValue=0, name="normal"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeVector3, paramOptions)


def AddInputClosure(paramOptions, params, defaultValue=0, name="closure"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeColor4, paramOptions)


def AddInputString(paramOptions, params, defaultValue="", name="string"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeString, paramOptions)


def AddInputBoolean(paramOptions, params, defaultValue=False, name="boolean"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeString, paramOptions)


def AddInputFCurve(paramOptions, params, name="fcurve", defaultValue=None):
    if defaultValue is not None:
        paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeProfileCurve, paramOptions)


def AddInputGradient(paramOptions, params, name="gradient"):
    # paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeGradient, paramOptions)


def StandartPramOptions():
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetAnimatable(True)
    paramOptions.SetTexturable(True)
    paramOptions.SetReadOnly(False)
    paramOptions.SetInspectable(True)
    # paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
    return paramOptions


def NoPortPramOptions():
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetAnimatable(True)
    paramOptions.SetTexturable(False)
    paramOptions.SetReadOnly(False)
    paramOptions.SetInspectable(True)
    # paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
    return paramOptions


def ParamOptionsForType(name):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetAnimatable(False)
    paramOptions.SetTexturable(False)
    paramOptions.SetReadOnly(True)
    paramOptions.SetInspectable(False)
    paramOptions.SetDefaultValue(name)
    return paramOptions

# ----------------------------------------------------------
# ----------------------------------------------------------
# ----------------------------------------------------------

def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn"
    in_reg.Name = "oslShaderParser"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterShaderLanguageParser("CyclesOSL")

    # RegistrationInsertionPoint - do not remove this line

    return true


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str(" has been unloaded."), c.siVerbose)
    return True


def CyclesOSL_QueryParserSettings(in_ctxt):
    in_ctxt.SetAttribute("Folders", "osl")
    in_ctxt.SetAttribute("FileTypes", ".osl")
    return True


def CyclesOSL_ParseInfo(in_ctxt):
    sFilename = in_ctxt.GetAttribute("Filename")
    # Application.LogMessage("Parse file" + sFilename)
    # file = open(sFilename, "r")
    # fData = ParseTheFile(file, True)
    fData = ParseTheFile(sFilename, True)
    # file.close()
    shaderName = fData[1]
    if shaderName is None:
        return False
    else:
        in_ctxt.SetAttribute("ClassName", shaderName)
        in_ctxt.SetAttribute("MajorVersion", 1)
        in_ctxt.SetAttribute("MinorVersion", 0)
        category = fData[0]
        if category is None:
            in_ctxt.SetAttribute("Category", "Cycles/OSL")
        else:
            pathParts = []
            pathParts.append("Cycles")
            pathParts.append("OSL")
            for c in category:
                pathParts.append(c)
            in_ctxt.SetAttribute("Category", "/".join(pathParts))
        in_ctxt.SetAttribute("DisplayName", GetReadebleName(shaderName))

    return True


def CyclesOSL_Parse(in_ctxt):
    sFilename = in_ctxt.GetAttribute("Filename")
    oShaderDef = in_ctxt.GetAttribute("Definition")
    fData = ParseTheFile(sFilename, False)
    shaderName = fData[1]
    if (shaderName is None) or ("CyclesOSL." + shaderName + ".1.0" != str(oShaderDef.ProgID)):
        return False
    else:
        oShaderDef.AddShaderFamily("mrTexture")
        params = oShaderDef.InputParamDefs
        paramsArray = fData[2]
        for parameterData in paramsArray:
            isOutput = parameterData[0]
            pType = parameterData[1]
            pname = parameterData[2]
            baseValue = parameterData[3]
            if isOutput:
                # this is output param
                if pType == 0:
                    AddOutputInt(oShaderDef, pname)
                elif pType == 1:
                    AddOutputFloat(oShaderDef, pname)
                elif pType == 2:
                    AddOutputColor(oShaderDef, pname)
                elif pType == 3:
                    AddOutputString(oShaderDef, pname)
                elif pType == 4:
                    AddOutputPoint(oShaderDef, pname)
                elif pType == 5:
                    AddOutputVector(oShaderDef, pname)
                elif pType == 6:
                    AddOutputNormal(oShaderDef, pname)
                elif pType == 7:
                    AddOutputClosure(oShaderDef, pname)
            else:
                # this is input param
                if pType == 0:
                    AddInputInteger(StandartPramOptions(), params, baseValue, pname)
                elif pType == 1:
                    AddInputFloat(StandartPramOptions(), params, baseValue, pname)
                elif pType == 2:
                    AddInputColor(StandartPramOptions(), params, baseValue, pname)
                elif pType == 3:
                    AddInputString(StandartPramOptions(), params, baseValue, pname)
                elif pType == 4:
                    AddInputPoint(StandartPramOptions(), params, 0.0, pname)
                elif pType == 5:
                    AddInputVector(StandartPramOptions(), params, 0.0, pname)
                elif pType == 6:
                    AddInputNormal(StandartPramOptions(), params, 0.0, pname)
                elif pType == 7:
                    AddInputColor(StandartPramOptions(), params, baseValue, pname)
        # params.AddParamDef("nodeType", c.siShaderDataTypeString, ParamOptionsForType("osl"))
        params.AddParamDef("oslFilePath", c.siShaderDataTypeString, ParamOptionsForType(sFilename))

        # next create ppg
        ppgLayout = oShaderDef.PPGLayout
        ppgLayout.AddGroup("Parameters")
        for parameterData in paramsArray:
            isOutput = parameterData[0]
            pType = parameterData[1]
            pname = parameterData[2]
            pNameNorm = GetReadebleName(pname)
            if isOutput:
                pass
            else:
                if pType == 0 or pType == 1 or pType == 2 or pType == 3:
                    ppgLayout.AddItem(pname, pNameNorm)
        ppgLayout.EndGroup()

    return True
