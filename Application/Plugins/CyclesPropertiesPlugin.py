# CyclesMeshPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Tue May 31 19:44:06 UTC+0500 2016 by Shekn Itrch
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c
lm = Application.LogMessage

null = None
false = 0
true = 1

subdivTypes = ["None", 0, "Linear", 1, "Catmull-Clark", 2]
options_crease = ["Catmark Rule", 0, "Chaikin Rule", 1]
# options_boundary = ["Do not Interpolate Boundaries", 0, "Sharpen Edges", 1, "Sharpen Edges and Corners", 2]
options_boundary = ["Sharpen Edges", 1, "Sharpen Edges and Corners", 2]
options_fvar = ["Smooth Everywhere", 0, "Sharpen Corners Only", 1, "Edge Corner", 2, "Edge and Corner + Propagate Corner", 3, "Sharpen All Boundaries", 4, "Bilinear Interpolation", 5]
options_triangle = ["Catmark Weights", 0, "Smooth Triangle Weights", 1]
hairsType = ["Ribbon", 0, "Segments", 1, "Line Segments", 2]
volume_space_types = ["Object", 0, "World", 1]

baking_shaders = ["Position", "POSITION",
                  "Normal", "NORMAL",
                  "UV", "UV",
                  "Roughness", "ROUGHNESS",
                  # "Diffuse Color", "DIFFUSE_COLOR",
                  # "Glossy Color", "GLOSSY_COLOR",
                  # "Transmission Color", "TRANSMISSION_COLOR",
                  "Emit", "EMIT",
                  "AO", "AO",
                  "Combined", "COMBINED",
                  "Shadow", "SHADOW",
                  "Diffuse", "DIFFUSE",
                  "Glossy", "GLOSSY",
                  "Transmission", "TRANSMISSION",
                  "Environment", "ENVIRONMENT"]

baking_extensions = ["PNG - Portable Network Graphics", "png",
                     "TIFF - Tagged Image File Format", "tiff",
                     "EXR - OpenEXR", "exr",
                     "BMP - Bitmap Picture", "bmp",
                     "JPEG - Joint Photographic Experts Group", "jpg",
                     # "JPEG 2000", "jp2",
                     # "Truevision TGA", "tga",
                     # "SGI - Silicon Graphics Image", "sgi",
                     # "IFF - Interchange File Format", "iff",
                     # "DPX - Digital Picture Exchange", "dpx",
                     # "FITS - Flexible Image Transport System", "fits",
                     "HDR - High Dynamic Range", "hdr",
                     # "RLA - Run-Length Encoded Version A", "rla",
                     # "PPM - Portable PixMap", "ppm",
                     # "PFM - Portable Float Map Image", "pfm"
                     ]

baking_sizes = ["32x32", 0,
                "64x64", 1,
                "128x128", 2,
                "256x256", 3,
                "512x512", 4,
                "1024x1024", 5,
                "2048x2048", 6,
                "4096x4096", 7,
                "8192x8192", 8,
                "16384x16384", 9,
                "32768x32768", 10]


def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn Itrch"
    in_reg.Name = "CyclesPropertiesPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterProperty("CyclesMesh")
    in_reg.RegisterCommand("AddCyclesMesh", "AddCyclesMesh")
    in_reg.RegisterProperty("CyclesHairs")
    in_reg.RegisterCommand("AddCyclesHairs", "AddCyclesHairs")
    in_reg.RegisterProperty("CyclesPointcloud")
    in_reg.RegisterCommand("AddCyclesPointcloud", "AddCyclesPointcloud")
    in_reg.RegisterProperty("CyclesVolume")
    in_reg.RegisterCommand("AddCyclesVolume", "AddCyclesVolume")
    in_reg.RegisterProperty("CyclesBake")
    in_reg.RegisterCommand("AddCyclesBake", "AddCyclesBake")
    # RegistrationInsertionPoint - do not remove this line

    return true


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str(" has been unloaded."), c.siVerbose)
    return true


def AddCyclesMesh_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def AddCyclesHairs_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def AddCyclesVolume_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def AddCyclesBake_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def AddCyclesMesh_Execute():
    Application.LogMessage("AddCyclesMesh_Execute called", c.siVerbose)

    # we should add the property to selected polymesh object
    oSel = Application.Selection
    if oSel is not None and len(oSel) > 0:
        for i in range(len(oSel)):
            o = oSel[i]
            if o.Type == "polymsh":
                if o.GetPropertyFromName2("CyclesMesh"):
                    prop = o.GetPropertyFromName2("CyclesMesh")
                else:
                    prop = o.AddProperty("CyclesMesh")

                Application.InspectObj(prop)
            else:
                lm("This property can be applied only to polygon mesh object")
    else:
        lm("This property can be applied only to polygon mesh object")

    return True


def AddCyclesHairs_Execute(  ):
    Application.LogMessage("AddCyclesHairs_Execute called", c.siVerbose)

    # we should add the property to selected pointcloud object
    oSel = Application.Selection
    if oSel is not None and len(oSel) > 0:
        for i in range(len(oSel)):
            o = oSel[i]
            # if o.Type == "pointcloud" or o.Type == "hair":
            if o.Type == "hair":
                if o.GetPropertyFromName2("CyclesHairs"):
                    prop = o.GetPropertyFromName2("CyclesHairs")
                else:
                    prop = o.AddProperty("CyclesHairs")
                Application.InspectObj(prop)
            else:
                lm("This property can be applied only to the hair object", c.siWarning)
    else:
        lm("This property can be applied only to the hair object", c.siWarning)

    return True


def AddCyclesVolume_Execute():
    Application.LogMessage("AddCyclesVolume_Execute called", c.siVerbose)

    # we should add the property to selected pointcloud object
    oSel = Application.Selection
    if oSel is not None and len(oSel) > 0:
        for i in range(len(oSel)):
            o = oSel[i]
            if o.Type == "pointcloud" or o.Type == "polymsh" or o.Type == "VDBPrimitive":
                if o.GetPropertyFromName2("CyclesVolume"):
                    prop = o.GetPropertyFromName2("CyclesVolume")
                else:
                    prop = o.AddProperty("CyclesVolume")
                Application.InspectObj(prop)
            else:
                lm("This property can be applied only to the vdb primitive, pointcloud or polymesh object", c.siWarning)
    else:
        lm("This property can be applied only to the vdb primitive, pointcloud or polymesh object", c.siWarning)

    return True


def AddCyclesPointcloud_Execute():
    Application.LogMessage("AddCyclesPointcloud_Execute called", c.siVerbose)

    # we should add the property to selected pointcloud object
    oSel = Application.Selection
    if oSel is not None and len(oSel) > 0:
        for i in range(len(oSel)):
            o = oSel[i]
            if o.Type == "pointcloud":
                if o.GetPropertyFromName2("CyclesPointcloud"):
                    prop = o.GetPropertyFromName2("CyclesPointcloud")
                else:
                    prop = o.AddProperty("CyclesPointcloud")
                Application.InspectObj(prop)
            else:
                lm("This property can be applied only to the pointcloud object", c.siWarning)
    else:
        lm("This property can be applied only to the pointcloud object", c.siWarning)

    return True


def AddCyclesBake_Execute():
    Application.LogMessage("AddCyclesBake_Execute called", c.siVerbose)

    # we should add the property to selected pointcloud object
    oSel = Application.Selection
    if oSel is not None and len(oSel) > 0:
        for i in range(len(oSel)):
            o = oSel[i]
            if o.Type == "polymsh":
                if o.GetPropertyFromName2("CyclesBake"):
                    prop = o.GetPropertyFromName2("CyclesBake")
                else:
                    prop = o.AddProperty("CyclesBake")
                Application.InspectObj(prop)
            else:
                lm("This property can be applied only to the polygonmesh object", c.siWarning)
    else:
        lm("This property can be applied only to the polygonmesh object", c.siWarning)

    return True


def setup_common_properties(prop):
    prop.AddParameter3("shadow_catcher", c.siBool, 0)
    prop.AddParameter2("shadow_terminator", c.siFloat, 0.0, 0.0, 1.0, 0.0, 1.0, False, True)
    prop.AddParameter2("shadow_terminator_geometry", c.siFloat, 0.1, 0.0, 1.0, 0.0, 1.0, False, True)
    prop.AddParameter2("ao_distance", c.siFloat, 0.0, 0.0, 1000.0, 0.0, 1.0, False, True)

    prop.AddParameter2("pass_id", c.siInt2, 0, 0, 10000, 0, 10, False, False)
    prop.AddParameter3("is_holdout", c.siBool, 0)
    prop.AddParameter3("lightgroup", c.siString, "")

    prop.AddParameter3("ray_visibility_camera", c.siBool, 1)
    prop.AddParameter3("ray_visibility_diffuse", c.siBool, 1)
    prop.AddParameter3("ray_visibility_glossy", c.siBool, 1)
    prop.AddParameter3("ray_visibility_transmission", c.siBool, 1)
    prop.AddParameter3("ray_visibility_volume_scatter", c.siBool, 1)
    prop.AddParameter3("ray_visibility_shadow", c.siBool, 1)

    prop.AddParameter3("simplify_camera_cull", c.siBool, 1)
    prop.AddParameter3("simplify_distance_cull", c.siBool, 1)

    prop.AddParameter3("motion_blur_deformation", c.siBool, 0)

    prop.AddParameter3("caustics_cast", c.siBool, False)
    prop.AddParameter3("caustics_receive", c.siBool, False)


def CyclesMesh_Define(in_ctxt):
    prop = in_ctxt.Source
    prop.AddParameter3("subdiv_type", c.siInt2, 0)
    prop.AddParameter2("subdiv_max_level", c.siInt2, 1, 0, 64, 0, 8, False, True)
    prop.AddParameter2("subdiv_dicing_rate", c.siFloat, 1.0, 0.1, 1024.0, 0.5, 16.0, False, True)
    setup_common_properties(prop)

    return True


def CyclesHairs_Define(in_ctxt):
    prop = in_ctxt.Source
    setup_common_properties(prop)
    return True


def CyclesVolume_Define(in_ctxt):
    oCustomProperty = in_ctxt.Source
    oProp = in_ctxt.Source
    oProp.AddParameter3("volume_object_space", c.siInt2, 0, 0, 1)
    oProp.AddParameter2("volume_step_size", c.siFloat, 0.0, 0.0, 100.0, 0.0, 1.0, 32768, 1)
    oProp.AddParameter2("volume_clipping", c.siFloat, 0.001, 0.0, 1.0, 0.0, 0.01)
    return True


def CyclesPointcloud_Define(in_ctxt):
    prop = in_ctxt.Source
    prop.AddParameter3("tip_prop", c.siFloat, 0.0, 0, 1)
    prop.AddParameter3("primitive_pc", c.siBool, 0)
    setup_common_properties(prop)

    return True


def CyclesBake_Define(in_ctxt):
    oProp = in_ctxt.Source
    oProp.AddParameter3("uv_index", c.siInt2, 0, 0, 1024, False, False)
    oProp.AddParameter3("uv_names", c.siString, "")  # does not show this parameter
    oProp.AddParameter3("baking_shader", c.siString, "COMBINED")
    oProp.AddParameter3("baking_filter_direct", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("baking_filter_indirect", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("baking_filter_color", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("baking_filter_diffuse", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("baking_filter_glossy", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("baking_filter_transmission", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("baking_filter_emission", c.siBool, 1, 0, 1, False, False)
    # oProp.AddParameter3("baking_filter_ao", c.siBool, 1, 0, 1, False, False)
    oProp.AddParameter3("output_folder", c.siString, "")
    oProp.AddParameter3("output_name", c.siString, "rendermap")
    oProp.AddParameter3("output_extension", c.siString, "png")
    oProp.AddParameter3("texture_size", c.siInt2, 4, 0, 10, False, False)

    return true


def CyclesMesh_DefineLayout(in_ctxt):
    return True


def CyclesHairs_DefineLayout(in_ctxt):
    return True


def CyclesVolume_DefineLayout(in_ctxt):
    return True


def CyclesPointcloud_DefineLayout(in_ctxt):
    return True


def get_object_uvs(prop):
    '''return list for uv enum control
    '''
    baking_uvs = []
    uv_index = 0
    xsi_obj = prop.Parent
    xsi_polygonmesh = xsi_obj.GetActivePrimitive3().Geometry
    xsi_clusters = xsi_polygonmesh.Clusters.Filter("sample")
    for xsi_cluster in xsi_clusters:
        if xsi_cluster.IsAlwaysComplete():
            for cluster_prop in xsi_cluster.Properties:
                if cluster_prop.Type == "uvspace":
                    baking_uvs.append(cluster_prop.Name)
                    baking_uvs.append(uv_index)
                    uv_index += 1
    return baking_uvs


def CyclesBakePropertyBuildUI():
    prop = PPG.Inspected(0)
    oLayout = PPG.PPGLayout
    oLayout.Clear()

    project_path = Application.ActiveProject3()
    folder_path = prop.Parameters("output_folder").Value
    if len(folder_path) == 0:
        prop.Parameters("output_folder").Value = project_path + "\\Render_Pictures"

    oLayout.AddGroup("Output")
    item = oLayout.AddItem("output_folder", "Folder", c.siControlFolder)
    item.SetAttribute(c.siUIInitialDir, "project")
    oLayout.AddRow()
    oLayout.AddItem("output_name", "File Name")
    item = oLayout.AddEnumControl("output_extension", baking_extensions, "Ext")
    item.WidthPercentage = 15
    item.LabelPercentage = 15
    item.LabelMinPixels = 15
    oLayout.EndRow()
    oLayout.EndGroup()

    oLayout.AddGroup("Baking Parameters")
    oLayout.AddEnumControl("texture_size", baking_sizes, "Size")
    object_uvs = get_object_uvs(prop)
    prop.Parameters("uv_names").Value = str([object_uvs[i] for i in range(0, len(object_uvs), 2)])
    oLayout.AddEnumControl("uv_index", object_uvs, "Baking UV")
    oLayout.AddEnumControl("baking_shader", baking_shaders, "Bake Type")
    shader_value = prop.Parameters("baking_shader").Value
    if shader_value in ["AO", "SHADOW", "NORMAL", "POSITION", "UV", "ROUGHNESS", "EMIT", "ENVIRONMENT"]:
        # no filters for these shaders
        pass
    else:
        if shader_value in ["DIFFUSE", "GLOSSY", "TRANSMISSION"]:
            # show direct, indirect and color filters
            oLayout.AddRow()
            oLayout.AddItem("baking_filter_direct", "Direct")
            oLayout.AddItem("baking_filter_indirect", "Indirect")
            oLayout.EndRow()
            oLayout.AddItem("baking_filter_color", "Color")
        else:
            # this is combined pass, show all filters (exept color)
            oLayout.AddRow()
            oLayout.AddItem("baking_filter_direct", "Direct")
            oLayout.AddItem("baking_filter_indirect", "Indirect")
            oLayout.EndRow()
            oLayout.AddRow()
            oLayout.AddItem("baking_filter_diffuse", "Diffuse")
            oLayout.AddItem("baking_filter_glossy", "Glossy")
            oLayout.EndRow()
            oLayout.AddRow()
            oLayout.AddItem("baking_filter_transmission", "Transmission")
            oLayout.AddItem("baking_filter_emission", "Emission")
            oLayout.EndRow()
            # oLayout.AddItem("baking_filter_ao", "AO")
    oLayout.EndGroup()

    oItem = oLayout.AddButton("bake", "Bake")
    oItem.SetAttribute(c.siUICX, 200)
    oItem.SetAttribute(c.siUIWidthPercentage, 100)
    oItem.SetAttribute(c.siUICY, 30)

    PPG.Refresh()


def update_baking(prop):
    # try to get rendermap property
    xsi_object = prop.Parent
    rendermap = xsi_object.Properties("RenderMap")
    if rendermap is None:
        # there are no rendermap property on the object, add it
        rendermap = xsi_object.AddProperty("RenderMap")
    # next we should apply some properties
    size_index = prop.Parameters("texture_size").Value
    uv_index = prop.Parameters("uv_index").Value
    out_folder = prop.Parameters("output_folder").Value
    out_file = prop.Parameters("output_name").Value
    out_ext = prop.Parameters("output_extension").Value
    rendermap.Parameters("resolutionx").Value = 2**(5 + size_index)
    rendermap.Parameters("squaretex").Value = True
    uv_names = eval(prop.Parameters("uv_names").Value)
    if uv_index < len(uv_names):
        Application.SetInstanceDataValue("", rendermap.FullName + ".uvprop", uv_names[uv_index])
    # rendermap.Parameters("imageformat").Value = out_ext
    rendermap.Parameters("imagefilepath").Value = out_folder + "\\" + out_file + "." + out_ext


def CyclesBake_bake_OnClicked():
    ppgLayout = PPG.PPGLayout
    prop = PPG.Inspected(0)
    update_baking(prop)
    # call render process
    # get rendermap property
    xsi_object = prop.Parent
    rendermap = xsi_object.Properties("RenderMap")
    Application.RegenerateMaps(rendermap)


def CyclesBake_output_folder_OnChanged():
    ppgLayout = PPG.PPGLayout
    prop = PPG.Inspected(0)
    update_baking(prop)


def CyclesBake_output_name_OnChanged():
    ppgLayout = PPG.PPGLayout
    prop = PPG.Inspected(0)
    update_baking(prop)


def CyclesBake_output_extension_OnChanged():
    ppgLayout = PPG.PPGLayout
    prop = PPG.Inspected(0)
    update_baking(prop)


def CyclesBake_texture_size_OnChanged():
    ppgLayout = PPG.PPGLayout
    prop = PPG.Inspected(0)
    update_baking(prop)


def CyclesBake_uv_index_OnChanged():
    ppgLayout = PPG.PPGLayout
    prop = PPG.Inspected(0)
    update_baking(prop)


def CyclesBake_baking_shader_OnChanged():
    CyclesBakePropertyBuildUI()


def mesh_ui_update(prop):
    subdiv_type = prop.Parameters("subdiv_type").Value
    if subdiv_type == 0:
        prop.Parameters("subdiv_max_level").ReadOnly = True
        prop.Parameters("subdiv_dicing_rate").ReadOnly = True
    else:
        prop.Parameters("subdiv_max_level").ReadOnly = False
        prop.Parameters("subdiv_dicing_rate").ReadOnly = False


def build_common_property_ui(layout):
    layout.AddTab("Shading")
    layout.AddGroup("Shadow Terminator")
    layout.AddItem("shadow_terminator_geometry", "Geometry Offset")
    layout.AddItem("shadow_terminator", "Shading Offset")
    layout.EndGroup()
    # ignore this parameter, because there are no any visible effect
    # here for Mesh and also for Hairs
    layout.AddGroup("Fast GI Approximation")
    layout.AddItem("ao_distance", "AO Distance")
    layout.EndGroup()

    layout.AddGroup("Caustics")
    layout.AddItem("caustics_cast", "Cast Shadow Caustics")
    layout.AddItem("caustics_receive", "Receive Shadow Caustics")
    layout.EndGroup()

    layout.AddTab("Pass")
    layout.AddGroup("Properties")
    layout.AddItem("pass_id", "Pass ID")
    layout.AddItem("shadow_catcher", "Shadow Catcher")
    layout.AddItem("is_holdout", "Holdout")
    layout.EndGroup()

    layout.AddGroup("Light Group")
    item = layout.AddItem("lightgroup", "Lightgroup")
    item.SetAttribute(c.siUINoLabel, True)
    layout.EndGroup()

    layout.AddTab("Motion")
    layout.AddGroup("Motion Blur")
    layout.AddItem("motion_blur_deformation", "Deformation")
    layout.EndGroup()

    # disable culling properties
    # there are no any sufficient effect when use it
    # layout.AddTab("Simplify")
    # layout.AddGroup("Properties")
    # layout.AddItem("simplify_camera_cull", "Use Camera Cull")
    # layout.AddItem("simplify_distance_cull", "Use Distance Cull")
    # layout.EndGroup()

    layout.AddTab("Visibility")
    layout.AddGroup("Ray Visibility")
    layout.AddItem("ray_visibility_camera", "Camera")
    layout.AddItem("ray_visibility_diffuse", "Diffuse")
    layout.AddItem("ray_visibility_glossy", "Glossy")
    layout.AddItem("ray_visibility_transmission", "Transmission")
    layout.AddItem("ray_visibility_volume_scatter", "Volume Scatter")
    layout.AddItem("ray_visibility_shadow", "Shadow")
    layout.EndGroup()


def MeshPropertyBuildUI():
    prop = PPG.Inspected(0)
    layout = PPG.PPGLayout
    layout.Clear()

    layout.AddTab("Subdivision")
    layout.AddGroup("Properties")
    layout.AddEnumControl("subdiv_type", subdivTypes, "Subdivision Type")
    layout.AddItem("subdiv_max_level", "Subdivision Level")
    layout.AddItem("subdiv_dicing_rate", "Dicing Rate")  # implemented in built-in osd
    layout.EndGroup()
    build_common_property_ui(layout)
    PPG.Refresh()

    mesh_ui_update(prop)


def CyclesMesh_subdiv_type_OnChanged():
    prop = PPG.Inspected(0)
    mesh_ui_update(prop)


def CyclesHairsPropertyBuildUI():
    layout = PPG.PPGLayout
    layout.Clear()
    build_common_property_ui(layout)
    PPG.Refresh()


def CyclesVolumePropertyBuildUI():
    oProp = PPG.Inspected(0)
    oLayout = PPG.PPGLayout
    oLayout.Clear()

    parent = oProp.Parent
    oLayout.AddGroup("Volume Properties")
    oLayout.AddEnumControl("volume_object_space", volume_space_types, "Space")
    oLayout.AddItem("volume_step_size", "Step Size")
    oLayout.AddItem("volume_clipping", "Clipping")
    oLayout.EndGroup()
    PPG.Refresh()


def pointcloud_ui_update(prop):
    primitive_pc = prop.Parameters("primitive_pc").Value
    if primitive_pc:
        prop.Parameters("tip_prop").ReadOnly = True
    else:
        prop.Parameters("tip_prop").ReadOnly = False


def CyclesPointcloudPropertyBuildUI():
    prop = PPG.Inspected(0)
    layout = PPG.PPGLayout
    layout.Clear()

    layout.AddTab("Particles")
    layout.AddGroup("Particles")
    layout.AddItem("primitive_pc", "Native Cycles Pointcloud")
    layout.EndGroup()
    layout.AddGroup("Strands")
    layout.AddItem("tip_prop", "Tip Proportion")
    layout.EndGroup()

    build_common_property_ui(layout)
    PPG.Refresh()

    pointcloud_ui_update(prop)


def CyclesPointcloud_primitive_pc_OnChanged():
    prop = PPG.Inspected(0)
    pointcloud_ui_update(prop)
    return


def CyclesMesh_OnInit():
    MeshPropertyBuildUI()
    return True


def CyclesHairs_OnInit():
    CyclesHairsPropertyBuildUI()
    return True


def CyclesVolume_OnInit():
    CyclesVolumePropertyBuildUI()
    return True


def CyclesPointcloud_OnInit():
    CyclesPointcloudPropertyBuildUI()
    return True


def CyclesBake_OnInit():
    CyclesBakePropertyBuildUI()
    return True


def CyclesMesh_OnClosed():
    Application.LogMessage("CyclesMesh_OnClosed called", c.siVerbose)


def CyclesHairs_OnClosed():
    Application.LogMessage("CyclesHairs_OnClosed called", c.siVerbose)

def CyclesVolume_OnClosed():
    Application.LogMessage("CyclesVolume_OnClosed called", c.siVerbose)


def CyclesPointcloud_OnClosed():
    Application.LogMessage("CyclesPointcloud_OnClosed called", c.siVerbose)


def CyclesBake_OnClosed():
    Application.LogMessage("CyclesBake_OnClosed called", c.siVerbose)
