# CyclesMenusPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Tue May 31 21:02:09 UTC+0500 2016 by Shekn Itrch
#
# Tip: To add a command to this plug-in, right-click in the
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c

null = None
false = 0
true = 1


def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn Itrch"
    in_reg.Name = "CyclesMenusPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterMenu(c.siMenuTbGetLightID, "Cycles Lights", True, False)
    in_reg.RegisterMenu(c.siMenuTbGetPropertyID, "Cycles Properties", True, False)
    in_reg.RegisterMenu(c.siMenuTbGetMaterialID, "Cycles Shaders", True, False)
    in_reg.RegisterMenu(c.siMenuMaterialManagerTopLevelID, "Cycles Create", True, False)

    in_reg.RegisterCommand("ApplyDiffuseBSDF", "ApplyDiffuseBSDF")
    in_reg.RegisterCommand("ApplyPrincipledBSDF", "ApplyPrincipledBSDF")
    in_reg.RegisterCommand("ApplyEmission", "ApplyEmission")
    in_reg.RegisterCommand("ApplyBackground", "ApplyBackground")
    in_reg.RegisterCommand("ApplyAnisotropicBSDF", "ApplyAnisotropicBSDF")
    in_reg.RegisterCommand("ApplyGlassBSDF", "ApplyGlassBSDF")
    in_reg.RegisterCommand("ApplyGlossyBSDF", "ApplyGlossyBSDF")
    in_reg.RegisterCommand("ApplyHairBSDF", "ApplyHairBSDF")
    in_reg.RegisterCommand("ApplyHoldout", "ApplyHoldout")
    in_reg.RegisterCommand("ApplyRefractionBSDF", "ApplyRefractionBSDF")
    in_reg.RegisterCommand("ApplySSS", "ApplySSS")
    in_reg.RegisterCommand("ApplyToonBSDF", "ApplyToonBSDF")
    in_reg.RegisterCommand("ApplyTranslucentBSDF", "ApplyTranslucentBSDF")
    in_reg.RegisterCommand("ApplyTransparentBSDF", "ApplyTransparentBSDF")
    in_reg.RegisterCommand("ApplyVelvetBSDF", "ApplyVelvetBSDF")
    in_reg.RegisterCommand("ApplyScatterVolume", "ApplyScatterVolume")
    in_reg.RegisterCommand("ApplyAbsorptionVolume", "ApplyAbsorptionVolume")
    in_reg.RegisterCommand("ApplyPrincipledHairBSDF", "ApplyPrincipledHairBSDF")
    in_reg.RegisterCommand("ApplyPrincipledVolume", "ApplyPrincipledVolume")

    in_reg.RegisterCommand("CreateDiffuseBSDF", "CreateDiffuseBSDF")
    in_reg.RegisterCommand("CreatePrincipledBSDF", "CreatePrincipledBSDF")
    in_reg.RegisterCommand("CreateEmissionCycles", "CreateEmissionCycles")
    in_reg.RegisterCommand("CreateBackgroundCycles", "CreateBackgroundCycles")
    in_reg.RegisterCommand("CreateAnisotropicBSDF", "CreateAnisotropicBSDF")
    in_reg.RegisterCommand("CreateGlassBSDF", "CreateGlassBSDF")
    in_reg.RegisterCommand("CreateGlossyBSDF", "CreateGlossyBSDF")
    in_reg.RegisterCommand("CreateHairBSDF", "CreateHairBSDF")
    in_reg.RegisterCommand("CreateHoldout", "CreateHoldout")
    in_reg.RegisterCommand("CreateyRefractionBSDF", "CreateyRefractionBSDF")
    in_reg.RegisterCommand("CreateSSS", "CreateSSS")
    in_reg.RegisterCommand("CreateToonBSDF", "CreateToonBSDF")
    in_reg.RegisterCommand("CreateTranslucentBSDF", "CreateTranslucentBSDF")
    in_reg.RegisterCommand("CreateTransparentBSDF", "CreateTransparentBSDF")
    in_reg.RegisterCommand("CreateVelvetBSDF", "CreateVelvetBSDF")
    in_reg.RegisterCommand("CreateScatterVolume", "CreateScatterVolume")
    in_reg.RegisterCommand("CreateAbsorptionVolume", "CreateAbsorptionVolume")
    in_reg.RegisterCommand("CreatePrincipledHairBSDF", "CreatePrincipledHairBSDF")
    in_reg.RegisterCommand("CreatePrincipledVolume", "CreatePrincipledVolume")
    # RegistrationInsertionPoint - do not remove this line

    return true


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str(" has been unloaded."), c.siVerbose)
    return true


def Log(message):
    Application.LogMessage(message)


def CyclesCreate_Init(ctxt):
    menu = ctxt.source
    menu.AddCommandItem("Emisiion", "CreateEmissionCycles")
    menu.AddCommandItem("Holdout", "CreateHoldout")
    menu.AddSeparatorItem()
    menu.AddCommandItem("Background", "CreateBackgroundCycles")
    menu.AddCommandItem("Diffuse BSDF", "CreateDiffuseBSDF")
    menu.AddCommandItem("Principled BSDF", "CreatePrincipledBSDF")
    menu.AddCommandItem("Anisotropic BSDF", "CreateAnisotropicBSDF")
    menu.AddCommandItem("Glass BSDF", "CreateGlassBSDF")
    menu.AddCommandItem("Glossy BSDF", "CreateGlossyBSDF")
    menu.AddCommandItem("Refraction BSDF", "CreateyRefractionBSDF")
    menu.AddCommandItem("Hair BSDF", "CreateHairBSDF")
    menu.AddCommandItem("Principled Hair BSDF", "CreatePrincipledHairBSDF")
    menu.AddCommandItem("Subsurface Scattering", "CreateSSS")
    menu.AddCommandItem("Toon BSDF", "CreateToonBSDF")
    menu.AddCommandItem("Velvet BSDF", "CreateVelvetBSDF")
    menu.AddCommandItem("Translucent BSDF", "CreateTranslucentBSDF")
    menu.AddCommandItem("Transparent BSDF", "CreateTransparentBSDF")
    menu.AddSeparatorItem()
    menu.AddCommandItem("Scatter Volume", "CreateScatterVolume")
    menu.AddCommandItem("Absorption Volume", "CreateAbsorptionVolume")
    menu.AddCommandItem("Principled Volume", "CreatePrincipledVolume")


def CyclesLights_Init(ctxt):
    menu = ctxt.source
    menu.AddCommandItem("Cycles Point Light", "CreatePointLight")
    menu.AddCommandItem("Cycles Sun Light", "CreateSunLight")
    menu.AddCommandItem("Cycles Spot Light", "CreateSpotLight")
    menu.AddCommandItem("Cycles Area Light", "CreateAreaLight")
    menu.AddCommandItem("Cycles Background", "CreateBackground")


def CyclesProperties_Init(ctxt):
    menu = ctxt.source
    menu.AddCommandItem("Add Camera Property", "AddCyclesCamera")
    menu.AddCommandItem("Add Mesh Property", "AddCyclesMesh")
    menu.AddCommandItem("Add Curve Property", "AddCyclesCurve")
    menu.AddCommandItem("Add Surface Property", "AddCyclesSurface")
    menu.AddCommandItem("Add Hairs Property", "AddCyclesHairs")
    menu.AddCommandItem("Add Volume Property", "AddCyclesVolume")
    menu.AddCommandItem("Add Pointcloud Property", "AddCyclesPointcloud")
    menu.AddCommandItem("Add Baking Property", "AddCyclesBake")
    menu.AddCommandItem("Add Light Linking Property", "AddCyclesLightLinking")
    menu.AddCommandItem("Print Light Direction", "PrintLightDirection")


def CyclesShaders_Init(ctxt):
    menu = ctxt.source
    # menu.AddCommandItem("Ambient Occlusion", "ApplyAO")
    menu.AddCommandItem("Emission", "ApplyEmission")
    menu.AddCommandItem("Holdout", "ApplyHoldout")
    menu.AddSeparatorItem()
    menu.AddCommandItem("Anisotropic BSDF", "ApplyAnisotropicBSDF")
    menu.AddCommandItem("Diffuse BSDF", "ApplyDiffuseBSDF")
    menu.AddCommandItem("Principled BSDF", "ApplyPrincipledBSDF")
    menu.AddCommandItem("Principled Hair BSDF", "ApplyPrincipledHairBSDF")
    menu.AddCommandItem("Glass BSDF", "ApplyGlassBSDF")
    menu.AddCommandItem("Glossy BSDF", "ApplyGlossyBSDF")
    menu.AddCommandItem("Hair BSDF", "ApplyHairBSDF")
    menu.AddCommandItem("Refraction BSDF", "ApplyRefractionBSDF")
    menu.AddCommandItem("Toon BSDF", "ApplyToonBSDF")
    menu.AddCommandItem("Translucent BSDF", "ApplyTranslucentBSDF")
    menu.AddCommandItem("Transparent BSDF", "ApplyTransparentBSDF")
    menu.AddCommandItem("Velvet BSDF", "ApplyVelvetBSDF")
    menu.AddSeparatorItem()
    menu.AddCommandItem("Subsurface Scattering", "ApplySSS")
    menu.AddSeparatorItem()
    menu.AddCommandItem("Absorption Volume", "ApplyAbsorptionVolume")
    menu.AddCommandItem("Scatter Volume", "ApplyScatterVolume")
    menu.AddCommandItem("Principled Volume", "ApplyPrincipledVolume")


# Apply shaders commands
def ApplyDiffuseBSDF_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def CreateCyclesShader(shaderName, innerName, outName, toName="surface"):
    scn = Application.ActiveProject.ActiveScene
    matlib = scn.ActiveMaterialLibrary
    newMat = matlib.CreateMaterial("Phong", "Phong")
    matStr = str(newMat.Library) + "." + str(newMat.Name)
    node = Application.CreateShaderFromProgID("CyclesShadersPlugin." + shaderName + ".1.0", matStr, innerName)
    Application.SIConnectShaderToCnxPoint(matStr + "." + innerName + "." + outName, matStr + "." + toName, False)
    Application.DisconnectAndDeleteOrUnnestShaders(matStr + ".Phong", matStr)
    if shaderName == "CyclesEmission":
        Application.SetValue(matStr + ".cycEmission.Color.red", 1, "")
        Application.SetValue(matStr + ".cycEmission.Color.green", 1, "")
        Application.SetValue(matStr + ".cycEmission.Color.blue", 1, "")
    newMat.Name = innerName[3:]


def ApplyCyclesShader(selected_objects, fullName, innerName, outName, toName="surface"):
    sel = None
    if selected_objects.Count > 0:
        sel = selected_objects
    else:
        oPicked = Application.PickElement(c.siPolyMeshFilter, "Pick polymesh object", "Pick polymesh object")
        sel = [oPicked[2]]
    if sel is not None and len(sel) > 0:
        # Find first polymesh object
        flag = False
        i = 0
        while not flag:
            selObject = sel[i]
            if selObject.Type == "surfmsh" or selObject.Type == "polySubComponent" or selObject.Type == "polymsh" or selObject.Type == "VDBPrimitive" or selObject.Type == "hair" or selObject.Type == "pointcloud" or selObject.Type == "cyclesPoint" or selObject.Type == "cyclesSun" or selObject.Type == "cyclesSpot" or selObject.Type == "cyclesArea" or selObject.Type == "cyclesBackground":
                flag = True
            else:
                i = i+1
                if i > len(sel) - 1:
                    flag = True
                    i = -1
        if i != -1:
            # We find the polymesh
            firstObj = sel[i]
            if firstObj.Type == "polySubComponent":
                firstObj = Application.CreateCluster(firstObj)[0]
            newMat = firstObj.AddMaterial("Phong")
            matStr = str(newMat.Library) + "." + str(newMat.Name)
            node = Application.CreateShaderFromProgID("CyclesShadersPlugin." + fullName + ".1.0", matStr, innerName)
            Application.SIConnectShaderToCnxPoint(matStr + "." + innerName + "." + outName, matStr + "." + toName, False)
            Application.DisconnectAndDeleteOrUnnestShaders(matStr + ".Phong", matStr)
            if fullName == "CyclesEmission":
                Application.SetValue(matStr + ".cycEmission.Color.red", 1, "")
                Application.SetValue(matStr + ".cycEmission.Color.green", 1, "")
                Application.SetValue(matStr + ".cycEmission.Color.blue", 1, "")
            for j in range(i + 1, len(sel)):
                o = sel[j]
                if o.Type == "polySubComponent":
                    obj = Application.CreateCluster(o)[0]
                else:
                    obj = o
                if obj.Type == "poly" or obj.Type == "polymsh" or obj.Type == "pointcloud" or obj.Type == "cyclesPoint" or obj.Type == "cyclesSun" or obj.Type == "cyclesSpot" or obj.Type == "cyclesArea" or obj.Type == "cyclesBackground":
                    Application.AssignMaterial(str(newMat.FullName) + "," + str(obj.Name), "siLetLocalMaterialsOverlap")
            Application.InspectObj(node)
    return True


def CreateDiffuseBSDF_Execute():
    CreateCyclesShader("CyclesDiffuseBSDF", "cycDiffuseBSDF", "outBSDF")
    return True


def CreatePrincipledBSDF_Execute():
    CreateCyclesShader("CyclesPrincipledBSDF", "cycPrincipledBSDF", "outBSDF")
    return True


def CreateEmissionCycles_Execute():
    CreateCyclesShader("CyclesEmission", "cycEmission", "outEmission")
    return True


def CreateBackgroundCycles_Execute():
    CreateCyclesShader("CyclesBackground", "cycBackground", "outBackground")
    return True


def CreateAnisotropicBSDF_Execute():
    CreateCyclesShader("CyclesAnisotropicBSDF", "cycAnisotropicBSDF", "outBSDF")
    return True


def CreateGlossyBSDF_Execute():
    CreateCyclesShader("CyclesGlossyBSDF", "cycGlossyBSDF", "outBSDF")
    return True


def CreateGlassBSDF_Execute():
    CreateCyclesShader("CyclesGlassBSDF", "cycGlassBSDF", "outBSDF")
    return True


def CreateHairBSDF_Execute():
    CreateCyclesShader("CyclesHairBSDF", "cycHairBSDF", "outBSDF")
    return True


def CreateHoldout_Execute():
    CreateCyclesShader("CyclesHoldout", "cycHoldout", "outHoldout")
    return True


def CreateyRefractionBSDF_Execute():
    CreateCyclesShader("CyclesRefractionBSDF", "cycRefractionBSDF", "outBSDF")
    return True


def CreateSSS_Execute():
    CreateCyclesShader("CyclesSubsurfaceScattering", "cycSubsurfaceScattering", "outBSSRDF")
    return True


def CreateToonBSDF_Execute():
    CreateCyclesShader("CyclesToonBSDF", "cycToonBSDF", "outBSDF")
    return True


def CreateTranslucentBSDF_Execute():
    CreateCyclesShader("CyclesTranslucentBSDF", "cycTranslucentBSDF", "outBSDF")
    return True


def CreateTransparentBSDF_Execute():
    CreateCyclesShader("CyclesTransparentBSDF", "cycTransparentBSDF", "outBSDF")
    return True


def CreateVelvetBSDF_Execute():
    CreateCyclesShader("CyclesVelvetBSDF", "cycVelvetBSDF", "outBSDF")
    return True


def CreateScatterVolume_Execute():
    CreateCyclesShader("CyclesScatterVolume", "cycScatterVolume", "outVolume", "volume")
    return True


def CreateAbsorptionVolume_Execute():
    CreateCyclesShader("CyclesAbsorptionVolume", "cycAbsorptionVolume", "outVolume", "volume")
    return True


def CreatePrincipledHairBSDF_Execute():
    CreateCyclesShader("CyclesPrincipledHairBSDF", "cycPrincipledHairBSDF", "outBSDF")
    return True


def CreatePrincipledVolume_Execute():
    CreateCyclesShader("CyclesPrincipledVolume", "cycPrincipledVolume", "outVolume", "volume")
    return True


def ApplyDiffuseBSDF_Execute():
    Application.LogMessage("ApplyDiffuseBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesDiffuseBSDF", "cycDiffuseBSDF", "outBSDF")
    return True


def ApplyPrincipledBSDF_Execute():
    Application.LogMessage("ApplyPrincipledBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesPrincipledBSDF", "cycPrincipledBSDF", "outBSDF")
    return True


def ApplyEmission_Execute():
    Application.LogMessage("ApplyEmission_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesEmission", "cycEmission", "outEmission")
    return True


def ApplyBackground_Execute():
    Application.LogMessage("ApplyBackground_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesBackground", "cycBackground", "outBackground")
    return True


def ApplyAnisotropicBSDF_Execute():
    Application.LogMessage("ApplyAnisotropicBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesAnisotropicBSDF", "cycAnisotropicBSDF", "outBSDF")
    return True


def ApplyGlassBSDF_Execute():
    Application.LogMessage("ApplyGlassBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesGlassBSDF", "cycGlassBSDF", "outBSDF")
    return True


def ApplyGlossyBSDF_Execute():
    Application.LogMessage("ApplyGlossyBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesGlossyBSDF", "cycGlossyBSDF", "outBSDF")
    return True


def ApplyHairBSDF_Execute():
    Application.LogMessage("ApplyHairBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesHairBSDF", "cycHairBSDF", "outBSDF")
    return True


def ApplyHoldout_Execute():
    Application.LogMessage("ApplyHoldout_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesHoldout", "cycHoldout", "outHoldout")
    return True


def ApplyRefractionBSDF_Execute():
    Application.LogMessage("ApplyRefractionBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesRefractionBSDF", "cycRefractionBSDF", "outBSDF")
    return True


def ApplySSS_Execute():
    Application.LogMessage("ApplySSS_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesSubsurfaceScattering", "cycSubsurfaceScattering", "outBSSRDF")
    return True


def ApplyToonBSDF_Execute():
    Application.LogMessage("ApplyToonBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesToonBSDF", "cycToonBSDF", "outBSDF")
    return True


def ApplyTranslucentBSDF_Execute():
    Application.LogMessage("ApplyTranslucentBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesTranslucentBSDF", "cycTranslucentBSDF", "outBSDF")
    return True


def ApplyTransparentBSDF_Execute():
    Application.LogMessage("ApplyTransparentBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesTransparentBSDF", "cycTransparentBSDF", "outBSDF")
    return True


def ApplyVelvetBSDF_Execute():
    Application.LogMessage("ApplyVelvetBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesVelvetBSDF", "cycVelvetBSDF", "outBSDF")
    return True


def ApplyScatterVolume_Execute():
    Application.LogMessage("ApplyScatterVolume_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesScatterVolume", "cycScatterVolume", "outVolume", "volume")
    return True


def ApplyAbsorptionVolume_Execute():
    Application.LogMessage("ApplyAbsorptionVolume_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesAbsorptionVolume", "cycAbsorptionVolume", "outVolume", "volume")
    return True


def ApplyPrincipledHairBSDF_Execute():
    Application.LogMessage("ApplyPrincipledHairBSDF_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesPrincipledHairBSDF", "cycPrincipledHairBSDF", "outBSDF")
    return True


def ApplyPrincipledVolume_Execute():
    Application.LogMessage("ApplyPrincipledVolume_Execute called", c.siVerbose)
    ApplyCyclesShader(Application.Selection, "CyclesPrincipledVolume", "cycPrincipledVolume", "outVolume", "volume")
    return True
