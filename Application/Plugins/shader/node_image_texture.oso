OpenShadingLanguage 1.00
# Compiled by oslc 1.11.17
# options: -q -O2 -IF:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders -IF:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders -o F:/Repositories/blenderRepo/build_windows_Full_x64_vc16_Release/intern/cycles/kernel/osl/shaders/node_image_texture.oso
shader node_image_texture
param	int	use_mapping	0		%read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{3,3} %write{2147483647,-1} %derivs
param	point	Vector	0 0 0		%read{1,1} %write{0,0} %derivs %initexpr
param	string	filename	""		%read{16,680} %write{2147483647,-1}
param	string	projection	"flat"		%read{4,640} %write{2147483647,-1}
param	string	interpolation	"smartcubic"		%read{16,680} %write{2147483647,-1}
param	string	extension	"periodic"		%read{16,680} %write{2147483647,-1}
param	float	projection_blend	0		%read{101,101} %write{2147483647,-1}
param	int	compress_as_srgb	0		%read{35,699} %write{2147483647,-1}
param	int	ignore_alpha	0		%read{17,681} %write{2147483647,-1}
param	int	unassociate_alpha	0		%read{19,683} %write{2147483647,-1}
param	int	is_tiled	0		%read{9,9} %write{2147483647,-1}
param	int	is_float	1		%read{31,695} %write{2147483647,-1}
oparam	color	Color	0 0 0		%read{351,525} %write{83,747}
oparam	float	Alpha	1		%read{21,692} %write{16,682}
global	point	P	%read{0,0} %write{2147483647,-1} %derivs
global	normal	N	%read{86,86} %write{2147483647,-1}
local	float	___391_u	%read{668,669} %write{666,667} %derivs
local	float	___391_v	%read{669,669} %write{648,668} %derivs
local	float	___391_len	%read{657,662} %write{656,656} %derivs
local	float	___394_len	%read{536,555} %write{535,535} %derivs
local	float	___394_v	%read{561,561} %write{558,560} %derivs
local	float	___394_u	%read{560,561} %write{547,559} %derivs
local	float	___399_flip_v	%read{16,680} %write{14,679} %derivs
local	float	___400_v_i	%read{12,678} %write{11,675} %derivs
local	color	___399_rgb	%read{28,747} %write{16,746}
local	point	p	%read{3,643} %write{1,3} %derivs
local	vector	___406_Nob	%read{87,257} %write{86,99}
local	vector	___406_weight	%read{174,526} %write{100,265}
local	float	___406_blend	%read{102,230} %write{101,101}
local	float	___406_limit	%read{108,261} %write{103,103}
local	float	___406_tmp_alpha	%read{287,527} %write{282,458}
local	point	___419_projected	%read{562,563} %write{561,561} %derivs
local	point	___420_projected	%read{670,671} %write{669,669} %derivs
const	string	$const1	"flat"		%read{4,4} %write{2147483647,-1}
temp	int	$tmp1	%read{5,5} %write{4,4}
const	int	$const2	0		%read{6,701} %write{2147483647,-1}
temp	float	$tmp2	%read{16,16} %write{6,6} %derivs
const	int	$const3	1		%read{7,716} %write{2147483647,-1}
temp	float	$tmp3	%read{10,15} %write{7,7} %derivs
const	string	$const4	"image_texture_lookup"		%read{8,672} %write{2147483647,-1}
temp	int	$tmp4	%read{11,11} %write{10,10} %derivs
const	float	$const5	1		%read{13,742} %write{2147483647,-1}
temp	float	$tmp5	%read{13,13} %write{12,12} %derivs
temp	float	$tmp6	%read{14,14} %write{13,13} %derivs
const	string	$const6	"wrap"		%read{16,680} %write{2147483647,-1}
const	string	$const7	"interp"		%read{16,680} %write{2147483647,-1}
const	string	$const8	"alpha"		%read{16,680} %write{2147483647,-1}
const	string	$const9	"color_unpremultiply"		%read{20,684} %write{2147483647,-1}
temp	int	$tmp7	%read{22,22} %write{21,21}
temp	int	$tmp8	%read{23,27} %write{22,26}
const	float	$const10	0		%read{24,737} %write{2147483647,-1}
temp	int	$tmp9	%read{25,25} %write{24,24}
temp	int	$tmp10	%read{26,26} %write{25,25}
temp	int	$tmp11	%read{32,32} %write{31,31}
temp	color	$tmp12	%read{34,34} %write{33,33}
const	string	$const11	"color_srgb_to_scene_linear"		%read{36,732} %write{2147483647,-1}
temp	float	$tmp13	%read{82,82} %write{43,50}
temp	float	$tmp14	%read{39,47} %write{37,37}
const	float	$const12	0.0404499993		%read{39,733} %write{2147483647,-1}
temp	int	$tmp15	%read{40,40} %write{39,39}
temp	int	$tmp16	%read{42,42} %write{41,41}
const	float	$const13	12.9200001		%read{44,738} %write{2147483647,-1}
temp	float	$tmp17	%read{45,45} %write{44,44}
const	float	$const14	0.0549999997		%read{47,741} %write{2147483647,-1}
temp	float	$tmp18	%read{49,49} %write{47,47}
const	float	$const15	1.05499995		%read{48,742} %write{2147483647,-1}
temp	float	$tmp19	%read{49,49} %write{48,48}
temp	float	$tmp20	%read{50,50} %write{49,49}
const	float	$const16	2.4000001		%read{50,744} %write{2147483647,-1}
temp	float	$tmp21	%read{82,82} %write{58,65}
temp	float	$tmp22	%read{54,62} %write{52,52}
temp	int	$tmp23	%read{55,55} %write{54,54}
temp	int	$tmp24	%read{57,57} %write{56,56}
temp	float	$tmp25	%read{60,60} %write{59,59}
temp	float	$tmp26	%read{64,64} %write{62,62}
temp	float	$tmp27	%read{64,64} %write{63,63}
temp	float	$tmp28	%read{65,65} %write{64,64}
temp	float	$tmp29	%read{82,82} %write{73,80}
const	int	$const17	2		%read{67,731} %write{2147483647,-1}
temp	float	$tmp30	%read{69,77} %write{67,67}
temp	int	$tmp31	%read{70,70} %write{69,69}
temp	int	$tmp32	%read{72,72} %write{71,71}
temp	float	$tmp33	%read{75,75} %write{74,74}
temp	float	$tmp34	%read{79,79} %write{77,77}
temp	float	$tmp35	%read{79,79} %write{78,78}
temp	float	$tmp36	%read{80,80} %write{79,79}
const	string	$const18	"box"		%read{84,84} %write{2147483647,-1}
temp	int	$tmp37	%read{85,85} %write{84,84}
const	string	$const19	"world"		%read{86,86} %write{2147483647,-1}
const	string	$const20	"object"		%read{86,86} %write{2147483647,-1}
temp	float	$tmp38	%read{93,93} %write{88,88}
temp	float	$tmp39	%read{88,88} %write{87,87}
temp	float	$tmp40	%read{93,93} %write{90,90}
temp	float	$tmp41	%read{90,90} %write{89,89}
temp	float	$tmp42	%read{93,93} %write{92,92}
temp	float	$tmp43	%read{92,92} %write{91,91}
temp	float	$tmp44	%read{96,96} %write{94,94}
temp	float	$tmp45	%read{96,96} %write{95,95}
temp	float	$tmp46	%read{98,98} %write{96,96}
temp	float	$tmp47	%read{98,98} %write{97,97}
temp	float	$tmp48	%read{99,99} %write{98,98}
const	vector	$const21	0 0 0		%read{100,100} %write{2147483647,-1}
const	float	$const22	0.5		%read{103,666} %write{2147483647,-1}
temp	float	$tmp49	%read{103,103} %write{102,102}
temp	float	$tmp50	%read{109,109} %write{104,104}
temp	float	$tmp51	%read{107,107} %write{105,105}
temp	float	$tmp52	%read{107,107} %write{106,106}
temp	float	$tmp53	%read{108,108} %write{107,107}
temp	float	$tmp54	%read{109,109} %write{108,108}
temp	int	$tmp55	%read{110,110} %write{109,109}
temp	int	$tmp56	%read{111,120} %write{110,119}
temp	float	$tmp57	%read{117,117} %write{112,112}
temp	float	$tmp58	%read{115,115} %write{113,113}
temp	float	$tmp59	%read{115,115} %write{114,114}
temp	float	$tmp60	%read{116,116} %write{115,115}
temp	float	$tmp61	%read{117,117} %write{116,116}
temp	int	$tmp62	%read{118,118} %write{117,117}
temp	int	$tmp63	%read{119,119} %write{118,118}
temp	float	$tmp64	%read{127,127} %write{122,122}
temp	float	$tmp65	%read{125,125} %write{123,123}
temp	float	$tmp66	%read{125,125} %write{124,124}
temp	float	$tmp67	%read{126,126} %write{125,125}
temp	float	$tmp68	%read{127,127} %write{126,126}
temp	int	$tmp69	%read{128,128} %write{127,127}
temp	int	$tmp70	%read{129,138} %write{128,137}
temp	float	$tmp71	%read{135,135} %write{130,130}
temp	float	$tmp72	%read{133,133} %write{131,131}
temp	float	$tmp73	%read{133,133} %write{132,132}
temp	float	$tmp74	%read{134,134} %write{133,133}
temp	float	$tmp75	%read{135,135} %write{134,134}
temp	int	$tmp76	%read{136,136} %write{135,135}
temp	int	$tmp77	%read{137,137} %write{136,136}
temp	float	$tmp78	%read{145,145} %write{140,140}
temp	float	$tmp79	%read{143,143} %write{141,141}
temp	float	$tmp80	%read{143,143} %write{142,142}
temp	float	$tmp81	%read{144,144} %write{143,143}
temp	float	$tmp82	%read{145,145} %write{144,144}
temp	int	$tmp83	%read{146,146} %write{145,145}
temp	int	$tmp84	%read{147,156} %write{146,155}
temp	float	$tmp85	%read{153,153} %write{148,148}
temp	float	$tmp86	%read{151,151} %write{149,149}
temp	float	$tmp87	%read{151,151} %write{150,150}
temp	float	$tmp88	%read{152,152} %write{151,151}
temp	float	$tmp89	%read{153,153} %write{152,152}
temp	int	$tmp90	%read{154,154} %write{153,153}
temp	int	$tmp91	%read{155,155} %write{154,154}
temp	int	$tmp92	%read{159,159} %write{158,158}
temp	float	$tmp93	%read{166,166} %write{160,160}
temp	float	$tmp94	%read{165,165} %write{161,161}
temp	float	$tmp95	%read{164,164} %write{162,162}
temp	float	$tmp96	%read{164,164} %write{163,163}
temp	float	$tmp97	%read{165,165} %write{164,164}
temp	float	$tmp98	%read{166,166} %write{165,165}
temp	int	$tmp99	%read{167,167} %write{166,166}
temp	float	$tmp100	%read{172,172} %write{168,168}
temp	float	$tmp101	%read{171,171} %write{169,169}
temp	float	$tmp102	%read{171,171} %write{170,170}
temp	float	$tmp103	%read{172,172} %write{171,171}
temp	float	$tmp104	%read{173,173} %write{172,172}
temp	float	$tmp105	%read{182,182} %write{181,181}
temp	float	$tmp106	%read{177,177} %write{174,174}
temp	float	$tmp107	%read{176,176} %write{175,175}
temp	float	$tmp108	%read{177,177} %write{176,176}
temp	float	$tmp109	%read{178,178} %write{177,177}
temp	float	$tmp110	%read{180,180} %write{178,178}
const	string	$const23	"clamp"		%read{179,231} %write{2147483647,-1}
temp	float	$tmp111	%read{181,181} %write{180,180}
temp	float	$tmp112	%read{184,184} %write{183,183}
temp	float	$tmp113	%read{185,185} %write{184,184}
temp	float	$tmp114	%read{192,192} %write{186,186}
temp	float	$tmp115	%read{191,191} %write{187,187}
temp	float	$tmp116	%read{190,190} %write{188,188}
temp	float	$tmp117	%read{190,190} %write{189,189}
temp	float	$tmp118	%read{191,191} %write{190,190}
temp	float	$tmp119	%read{192,192} %write{191,191}
temp	int	$tmp120	%read{193,193} %write{192,192}
temp	float	$tmp121	%read{198,198} %write{194,194}
temp	float	$tmp122	%read{197,197} %write{195,195}
temp	float	$tmp123	%read{197,197} %write{196,196}
temp	float	$tmp124	%read{198,198} %write{197,197}
temp	float	$tmp125	%read{199,199} %write{198,198}
temp	float	$tmp126	%read{208,208} %write{207,207}
temp	float	$tmp127	%read{203,203} %write{200,200}
temp	float	$tmp128	%read{202,202} %write{201,201}
temp	float	$tmp129	%read{203,203} %write{202,202}
temp	float	$tmp130	%read{204,204} %write{203,203}
temp	float	$tmp131	%read{206,206} %write{204,204}
temp	float	$tmp132	%read{207,207} %write{206,206}
temp	float	$tmp133	%read{210,210} %write{209,209}
temp	float	$tmp134	%read{211,211} %write{210,210}
temp	float	$tmp135	%read{218,218} %write{212,212}
temp	float	$tmp136	%read{217,217} %write{213,213}
temp	float	$tmp137	%read{216,216} %write{214,214}
temp	float	$tmp138	%read{216,216} %write{215,215}
temp	float	$tmp139	%read{217,217} %write{216,216}
temp	float	$tmp140	%read{218,218} %write{217,217}
temp	int	$tmp141	%read{219,219} %write{218,218}
temp	float	$tmp142	%read{224,224} %write{220,220}
temp	float	$tmp143	%read{223,223} %write{221,221}
temp	float	$tmp144	%read{223,223} %write{222,222}
temp	float	$tmp145	%read{224,224} %write{223,223}
temp	float	$tmp146	%read{225,225} %write{224,224}
temp	float	$tmp147	%read{234,234} %write{233,233}
temp	float	$tmp148	%read{229,229} %write{226,226}
temp	float	$tmp149	%read{228,228} %write{227,227}
temp	float	$tmp150	%read{229,229} %write{228,228}
temp	float	$tmp151	%read{230,230} %write{229,229}
temp	float	$tmp152	%read{232,232} %write{230,230}
temp	float	$tmp153	%read{233,233} %write{232,232}
temp	float	$tmp154	%read{236,236} %write{235,235}
temp	float	$tmp155	%read{237,237} %write{236,236}
const	float	$const24	2		%read{238,644} %write{2147483647,-1}
temp	float	$tmp156	%read{240,240} %write{238,238}
temp	float	$tmp157	%read{240,240} %write{239,239}
temp	float	$tmp158	%read{242,242} %write{240,240}
temp	float	$tmp159	%read{242,242} %write{241,241}
temp	float	$tmp160	%read{245,245} %write{242,242}
temp	float	$tmp161	%read{244,244} %write{243,243}
temp	float	$tmp162	%read{245,245} %write{244,244}
temp	float	$tmp163	%read{246,246} %write{245,245}
temp	float	$tmp164	%read{249,249} %write{247,247}
temp	float	$tmp165	%read{249,249} %write{248,248}
temp	float	$tmp166	%read{251,251} %write{249,249}
temp	float	$tmp167	%read{251,251} %write{250,250}
temp	float	$tmp168	%read{254,254} %write{251,251}
temp	float	$tmp169	%read{253,253} %write{252,252}
temp	float	$tmp170	%read{254,254} %write{253,253}
temp	float	$tmp171	%read{255,255} %write{254,254}
temp	float	$tmp172	%read{258,258} %write{256,256}
temp	float	$tmp173	%read{258,258} %write{257,257}
temp	float	$tmp174	%read{260,260} %write{258,258}
temp	float	$tmp175	%read{260,260} %write{259,259}
temp	float	$tmp176	%read{263,263} %write{260,260}
temp	float	$tmp177	%read{262,262} %write{261,261}
temp	float	$tmp178	%read{263,263} %write{262,262}
temp	float	$tmp179	%read{264,264} %write{263,263}
const	color	$const25	0 0 0		%read{266,266} %write{2147483647,-1}
temp	float	$tmp180	%read{269,269} %write{268,268}
temp	int	$tmp181	%read{270,270} %write{269,269}
temp	float	$tmp182	%read{350,350} %write{271,271}
temp	color	$tmp183	%read{350,350} %write{349,349}
temp	float	$tmp184	%read{282,282} %write{272,272} %derivs
temp	float	$tmp185	%read{276,281} %write{273,273} %derivs
temp	int	$tmp186	%read{277,277} %write{276,276} %derivs
temp	float	$tmp187	%read{279,279} %write{278,278} %derivs
temp	float	$tmp188	%read{280,280} %write{279,279} %derivs
temp	int	$tmp189	%read{288,288} %write{287,287}
temp	int	$tmp190	%read{289,293} %write{288,292}
temp	int	$tmp191	%read{291,291} %write{290,290}
temp	int	$tmp192	%read{292,292} %write{291,291}
temp	int	$tmp193	%read{298,298} %write{297,297}
temp	color	$tmp194	%read{300,300} %write{299,299}
temp	float	$tmp195	%read{348,348} %write{309,316}
temp	float	$tmp196	%read{305,313} %write{303,303}
temp	int	$tmp197	%read{306,306} %write{305,305}
temp	int	$tmp198	%read{308,308} %write{307,307}
temp	float	$tmp199	%read{311,311} %write{310,310}
temp	float	$tmp200	%read{315,315} %write{313,313}
temp	float	$tmp201	%read{315,315} %write{314,314}
temp	float	$tmp202	%read{316,316} %write{315,315}
temp	float	$tmp203	%read{348,348} %write{324,331}
temp	float	$tmp204	%read{320,328} %write{318,318}
temp	int	$tmp205	%read{321,321} %write{320,320}
temp	int	$tmp206	%read{323,323} %write{322,322}
temp	float	$tmp207	%read{326,326} %write{325,325}
temp	float	$tmp208	%read{330,330} %write{328,328}
temp	float	$tmp209	%read{330,330} %write{329,329}
temp	float	$tmp210	%read{331,331} %write{330,330}
temp	float	$tmp211	%read{348,348} %write{339,346}
temp	float	$tmp212	%read{335,343} %write{333,333}
temp	int	$tmp213	%read{336,336} %write{335,335}
temp	int	$tmp214	%read{338,338} %write{337,337}
temp	float	$tmp215	%read{341,341} %write{340,340}
temp	float	$tmp216	%read{345,345} %write{343,343}
temp	float	$tmp217	%read{345,345} %write{344,344}
temp	float	$tmp218	%read{346,346} %write{345,345}
temp	color	$tmp219	%read{351,351} %write{350,350}
temp	float	$tmp220	%read{353,353} %write{352,352}
temp	float	$tmp221	%read{354,354} %write{353,353}
temp	float	$tmp222	%read{356,356} %write{355,355}
temp	int	$tmp223	%read{357,357} %write{356,356}
temp	float	$tmp224	%read{437,437} %write{358,358}
temp	color	$tmp225	%read{437,437} %write{436,436}
temp	float	$tmp226	%read{369,369} %write{359,359} %derivs
temp	float	$tmp227	%read{363,368} %write{360,360} %derivs
temp	int	$tmp228	%read{364,364} %write{363,363} %derivs
temp	float	$tmp229	%read{366,366} %write{365,365} %derivs
temp	float	$tmp230	%read{367,367} %write{366,366} %derivs
temp	int	$tmp231	%read{375,375} %write{374,374}
temp	int	$tmp232	%read{376,380} %write{375,379}
temp	int	$tmp233	%read{378,378} %write{377,377}
temp	int	$tmp234	%read{379,379} %write{378,378}
temp	int	$tmp235	%read{385,385} %write{384,384}
temp	color	$tmp236	%read{387,387} %write{386,386}
temp	float	$tmp237	%read{435,435} %write{396,403}
temp	float	$tmp238	%read{392,400} %write{390,390}
temp	int	$tmp239	%read{393,393} %write{392,392}
temp	int	$tmp240	%read{395,395} %write{394,394}
temp	float	$tmp241	%read{398,398} %write{397,397}
temp	float	$tmp242	%read{402,402} %write{400,400}
temp	float	$tmp243	%read{402,402} %write{401,401}
temp	float	$tmp244	%read{403,403} %write{402,402}
temp	float	$tmp245	%read{435,435} %write{411,418}
temp	float	$tmp246	%read{407,415} %write{405,405}
temp	int	$tmp247	%read{408,408} %write{407,407}
temp	int	$tmp248	%read{410,410} %write{409,409}
temp	float	$tmp249	%read{413,413} %write{412,412}
temp	float	$tmp250	%read{417,417} %write{415,415}
temp	float	$tmp251	%read{417,417} %write{416,416}
temp	float	$tmp252	%read{418,418} %write{417,417}
temp	float	$tmp253	%read{435,435} %write{426,433}
temp	float	$tmp254	%read{422,430} %write{420,420}
temp	int	$tmp255	%read{423,423} %write{422,422}
temp	int	$tmp256	%read{425,425} %write{424,424}
temp	float	$tmp257	%read{428,428} %write{427,427}
temp	float	$tmp258	%read{432,432} %write{430,430}
temp	float	$tmp259	%read{432,432} %write{431,431}
temp	float	$tmp260	%read{433,433} %write{432,432}
temp	color	$tmp261	%read{438,438} %write{437,437}
temp	float	$tmp262	%read{440,440} %write{439,439}
temp	float	$tmp263	%read{441,441} %write{440,440}
temp	float	$tmp264	%read{443,443} %write{442,442}
temp	int	$tmp265	%read{444,444} %write{443,443}
temp	float	$tmp266	%read{524,524} %write{445,445}
temp	color	$tmp267	%read{524,524} %write{523,523}
temp	float	$tmp268	%read{456,456} %write{446,446} %derivs
temp	float	$tmp269	%read{450,455} %write{447,447} %derivs
temp	int	$tmp270	%read{451,451} %write{450,450} %derivs
temp	float	$tmp271	%read{453,453} %write{452,452} %derivs
temp	float	$tmp272	%read{454,454} %write{453,453} %derivs
temp	int	$tmp273	%read{462,462} %write{461,461}
temp	int	$tmp274	%read{463,467} %write{462,466}
temp	int	$tmp275	%read{465,465} %write{464,464}
temp	int	$tmp276	%read{466,466} %write{465,465}
temp	int	$tmp277	%read{472,472} %write{471,471}
temp	color	$tmp278	%read{474,474} %write{473,473}
temp	float	$tmp279	%read{522,522} %write{483,490}
temp	float	$tmp280	%read{479,487} %write{477,477}
temp	int	$tmp281	%read{480,480} %write{479,479}
temp	int	$tmp282	%read{482,482} %write{481,481}
temp	float	$tmp283	%read{485,485} %write{484,484}
temp	float	$tmp284	%read{489,489} %write{487,487}
temp	float	$tmp285	%read{489,489} %write{488,488}
temp	float	$tmp286	%read{490,490} %write{489,489}
temp	float	$tmp287	%read{522,522} %write{498,505}
temp	float	$tmp288	%read{494,502} %write{492,492}
temp	int	$tmp289	%read{495,495} %write{494,494}
temp	int	$tmp290	%read{497,497} %write{496,496}
temp	float	$tmp291	%read{500,500} %write{499,499}
temp	float	$tmp292	%read{504,504} %write{502,502}
temp	float	$tmp293	%read{504,504} %write{503,503}
temp	float	$tmp294	%read{505,505} %write{504,504}
temp	float	$tmp295	%read{522,522} %write{513,520}
temp	float	$tmp296	%read{509,517} %write{507,507}
temp	int	$tmp297	%read{510,510} %write{509,509}
temp	int	$tmp298	%read{512,512} %write{511,511}
temp	float	$tmp299	%read{515,515} %write{514,514}
temp	float	$tmp300	%read{519,519} %write{517,517}
temp	float	$tmp301	%read{519,519} %write{518,518}
temp	float	$tmp302	%read{520,520} %write{519,519}
temp	color	$tmp303	%read{525,525} %write{524,524}
temp	float	$tmp304	%read{527,527} %write{526,526}
temp	float	$tmp305	%read{528,528} %write{527,527}
const	string	$const26	"sphere"		%read{529,529} %write{2147483647,-1}
temp	int	$tmp306	%read{530,530} %write{529,529}
temp	point	$tmp307	%read{535,554} %write{533,533} %derivs
const	string	$const27	"texco_remap_square"		%read{531,642} %write{2147483647,-1}
const	point	$const28	0.5 0.5 0.5		%read{532,643} %write{2147483647,-1}
temp	vector	$tmp309	%read{533,533} %write{532,532} %derivs
const	string	$const29	"map_to_sphere"		%read{534,534} %write{2147483647,-1}
temp	int	$tmp310	%read{537,537} %write{536,536}
temp	float	$tmp311	%read{539,539} %write{538,538}
temp	int	$tmp312	%read{540,540} %write{539,539}
temp	int	$tmp313	%read{541,546} %write{540,545}
temp	float	$tmp314	%read{543,543} %write{542,542}
temp	int	$tmp315	%read{544,544} %write{543,543}
temp	int	$tmp316	%read{545,545} %write{544,544}
temp	float	$tmp317	%read{551,551} %write{550,550} %derivs
temp	float	$tmp318	%read{550,550} %write{548,548} %derivs
temp	float	$tmp319	%read{550,550} %write{549,549} %derivs
const	float	$const30	3.14159274		%read{551,664} %write{2147483647,-1}
temp	float	$tmp320	%read{552,552} %write{551,551} %derivs
temp	float	$tmp321	%read{553,553} %write{552,552} %derivs
temp	float	$tmp322	%read{557,557} %write{556,556} %derivs
temp	float	$tmp323	%read{555,555} %write{554,554} %derivs
temp	float	$tmp324	%read{556,556} %write{555,555} %derivs
temp	float	$tmp325	%read{558,558} %write{557,557} %derivs
temp	float	$tmp326	%read{572,572} %write{562,562} %derivs
temp	float	$tmp327	%read{566,571} %write{563,563} %derivs
temp	int	$tmp328	%read{567,567} %write{566,566} %derivs
temp	float	$tmp329	%read{569,569} %write{568,568} %derivs
temp	float	$tmp330	%read{570,570} %write{569,569} %derivs
temp	int	$tmp331	%read{578,578} %write{577,577}
temp	int	$tmp332	%read{579,583} %write{578,582}
temp	int	$tmp333	%read{581,581} %write{580,580}
temp	int	$tmp334	%read{582,582} %write{581,581}
temp	int	$tmp335	%read{588,588} %write{587,587}
temp	color	$tmp336	%read{590,590} %write{589,589}
temp	float	$tmp337	%read{638,638} %write{599,606}
temp	float	$tmp338	%read{595,603} %write{593,593}
temp	int	$tmp339	%read{596,596} %write{595,595}
temp	int	$tmp340	%read{598,598} %write{597,597}
temp	float	$tmp341	%read{601,601} %write{600,600}
temp	float	$tmp342	%read{605,605} %write{603,603}
temp	float	$tmp343	%read{605,605} %write{604,604}
temp	float	$tmp344	%read{606,606} %write{605,605}
temp	float	$tmp345	%read{638,638} %write{614,621}
temp	float	$tmp346	%read{610,618} %write{608,608}
temp	int	$tmp347	%read{611,611} %write{610,610}
temp	int	$tmp348	%read{613,613} %write{612,612}
temp	float	$tmp349	%read{616,616} %write{615,615}
temp	float	$tmp350	%read{620,620} %write{618,618}
temp	float	$tmp351	%read{620,620} %write{619,619}
temp	float	$tmp352	%read{621,621} %write{620,620}
temp	float	$tmp353	%read{638,638} %write{629,636}
temp	float	$tmp354	%read{625,633} %write{623,623}
temp	int	$tmp355	%read{626,626} %write{625,625}
temp	int	$tmp356	%read{628,628} %write{627,627}
temp	float	$tmp357	%read{631,631} %write{630,630}
temp	float	$tmp358	%read{635,635} %write{633,633}
temp	float	$tmp359	%read{635,635} %write{634,634}
temp	float	$tmp360	%read{636,636} %write{635,635}
const	string	$const31	"tube"		%read{640,640} %write{2147483647,-1}
temp	int	$tmp361	%read{641,641} %write{640,640}
temp	point	$tmp362	%read{646,661} %write{644,644} %derivs
temp	vector	$tmp364	%read{644,644} %write{643,643} %derivs
const	string	$const32	"map_to_tube"		%read{645,645} %write{2147483647,-1}
temp	float	$tmp365	%read{647,647} %write{646,646} %derivs
temp	float	$tmp366	%read{648,648} %write{647,647} %derivs
temp	float	$tmp367	%read{651,651} %write{649,649} %derivs
temp	float	$tmp368	%read{651,651} %write{650,650} %derivs
temp	float	$tmp369	%read{655,655} %write{651,651} %derivs
temp	float	$tmp370	%read{654,654} %write{652,652} %derivs
temp	float	$tmp371	%read{654,654} %write{653,653} %derivs
temp	float	$tmp372	%read{655,655} %write{654,654} %derivs
temp	float	$tmp373	%read{656,656} %write{655,655} %derivs
temp	int	$tmp374	%read{658,658} %write{657,657}
temp	float	$tmp375	%read{664,664} %write{663,663} %derivs
temp	float	$tmp376	%read{660,660} %write{659,659} %derivs
temp	float	$tmp377	%read{663,663} %write{660,660} %derivs
temp	float	$tmp378	%read{662,662} %write{661,661} %derivs
temp	float	$tmp379	%read{663,663} %write{662,662} %derivs
temp	float	$tmp380	%read{665,665} %write{664,664} %derivs
temp	float	$tmp381	%read{666,666} %write{665,665} %derivs
temp	float	$tmp382	%read{680,680} %write{670,670} %derivs
temp	float	$tmp383	%read{674,679} %write{671,671} %derivs
temp	int	$tmp384	%read{675,675} %write{674,674} %derivs
temp	float	$tmp385	%read{677,677} %write{676,676} %derivs
temp	float	$tmp386	%read{678,678} %write{677,677} %derivs
temp	int	$tmp387	%read{686,686} %write{685,685}
temp	int	$tmp388	%read{687,691} %write{686,690}
temp	int	$tmp389	%read{689,689} %write{688,688}
temp	int	$tmp390	%read{690,690} %write{689,689}
temp	int	$tmp391	%read{696,696} %write{695,695}
temp	color	$tmp392	%read{698,698} %write{697,697}
temp	float	$tmp393	%read{746,746} %write{707,714}
temp	float	$tmp394	%read{703,711} %write{701,701}
temp	int	$tmp395	%read{704,704} %write{703,703}
temp	int	$tmp396	%read{706,706} %write{705,705}
temp	float	$tmp397	%read{709,709} %write{708,708}
temp	float	$tmp398	%read{713,713} %write{711,711}
temp	float	$tmp399	%read{713,713} %write{712,712}
temp	float	$tmp400	%read{714,714} %write{713,713}
temp	float	$tmp401	%read{746,746} %write{722,729}
temp	float	$tmp402	%read{718,726} %write{716,716}
temp	int	$tmp403	%read{719,719} %write{718,718}
temp	int	$tmp404	%read{721,721} %write{720,720}
temp	float	$tmp405	%read{724,724} %write{723,723}
temp	float	$tmp406	%read{728,728} %write{726,726}
temp	float	$tmp407	%read{728,728} %write{727,727}
temp	float	$tmp408	%read{729,729} %write{728,728}
temp	float	$tmp409	%read{746,746} %write{737,744}
temp	float	$tmp410	%read{733,741} %write{731,731}
temp	int	$tmp411	%read{734,734} %write{733,733}
temp	int	$tmp412	%read{736,736} %write{735,735}
temp	float	$tmp413	%read{739,739} %write{738,738}
temp	float	$tmp414	%read{743,743} %write{741,741}
temp	float	$tmp415	%read{743,743} %write{742,742}
temp	float	$tmp416	%read{744,744} %write{743,743}
code Vector
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:88
#                           point Vector = P,
	assign		Vector P 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{88} %argrw{"wr"}
code ___main___
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:102
#   point p = Vector;
	assign		p Vector 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{102} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:104
#   if (use_mapping)
	if		use_mapping 4 4 	%line{104} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:105
#     p = transform(mapping, p);
	transform	p mapping p 	%line{105} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:107
#   if (projection == "flat") {
	eq		$tmp1 projection $const1 	%line{107} %argrw{"wrr"}
	if		$tmp1 84 748 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:109
#                                  p[0],
	compref		$tmp2 p $const2 	%line{109} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:110
#                                  p[1],
	compref		$tmp3 p $const3 	%line{110} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:108
#     Color = image_texture_lookup(filename,
	functioncall	$const4 84 	%line{108} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:59
#   if (is_tiled) {
	if		is_tiled 15 16 	%line{59} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:60
#     float v_i = (int)v;
	assign		$tmp4 $tmp3 	%line{60} %argrw{"wr"}
	assign		___400_v_i $tmp4 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:61
#     flip_v = v_i + (1.0 - (v - v_i));
	sub		$tmp5 $tmp3 ___400_v_i 	%line{61} %argrw{"wrr"}
	sub		$tmp6 $const5 $tmp5 	%argrw{"wrr"}
	add		___399_flip_v ___400_v_i $tmp6 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:64
#     flip_v = 1.0 - v;
	sub		___399_flip_v $const5 $tmp3 	%line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:66
#   color rgb = (color)texture(
	texture		___399_rgb filename $tmp2 ___399_flip_v $const6 extension $const7 interpolation $const8 Alpha 	%line{66} %argrw{"wrrrrrrrrw"} %argderivs{2,3}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:69
#   if (ignore_alpha) {
	if		ignore_alpha 19 35 	%line{69} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:70
#     Alpha = 1.0;
	assign		Alpha $const5 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:72
#   else if (unassociate_alpha) {
	if		unassociate_alpha 35 35 	%line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:73
#     rgb = color_unpremultiply(rgb, Alpha);
	functioncall	$const9 31 	%line{73} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:38
#   if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp7 Alpha $const5 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{38} %argrw{"wrr"}
	neq		$tmp8 $tmp7 $const2 	%argrw{"wrr"}
	if		$tmp8 27 27 	%argrw{"r"}
	neq		$tmp9 Alpha $const10 	%argrw{"wrr"}
	neq		$tmp10 $tmp9 $const2 	%argrw{"wrr"}
	assign		$tmp8 $tmp10 	%argrw{"wr"}
	if		$tmp8 30 30 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:39
#     return c / alpha;
	div		___399_rgb ___399_rgb Alpha 	%line{39} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:41
#   return c;
	assign		___399_rgb ___399_rgb 	%line{41} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:75
#     if (!is_float)
	eq		$tmp11 is_float $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{75} %argrw{"wrr"}
	if		$tmp11 35 35 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:76
#       rgb = min(rgb, 1.0);
	assign		$tmp12 $const5 	%line{76} %argrw{"wr"}
	min		___399_rgb ___399_rgb $tmp12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:79
#   if (compress_as_srgb) {
	if		compress_as_srgb 83 83 	%line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:80
#     rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const11 83 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	compref		$tmp14 ___399_rgb $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{24} %argrw{"wrr"}
	functioncall	$const11 52 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp15 $tmp14 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp15 47 52 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp16 $tmp14 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp16 44 46 	%argrw{"r"}
	assign		$tmp13 $const10 	%argrw{"wr"}
	div		$tmp17 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp13 $tmp14 $tmp17 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp18 $tmp14 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp19 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
	pow		$tmp13 $tmp20 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:25
#                color_srgb_to_scene_linear(c[1]),
	compref		$tmp22 ___399_rgb $const3 	%line{25} %argrw{"wrr"}
	functioncall	$const11 67 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp23 $tmp22 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp23 62 67 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp24 $tmp22 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp24 59 61 	%argrw{"r"}
	assign		$tmp21 $const10 	%argrw{"wr"}
	div		$tmp25 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp21 $tmp22 $tmp25 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp26 $tmp22 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp27 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp28 $tmp26 $tmp27 	%argrw{"wrr"}
	pow		$tmp21 $tmp28 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:26
#                color_srgb_to_scene_linear(c[2]));
	compref		$tmp30 ___399_rgb $const17 	%line{26} %argrw{"wrr"}
	functioncall	$const11 82 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp31 $tmp30 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp31 77 82 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp32 $tmp30 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp32 74 76 	%argrw{"r"}
	assign		$tmp29 $const10 	%argrw{"wr"}
	div		$tmp33 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp29 $tmp30 $tmp33 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp34 $tmp30 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp35 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
	pow		$tmp29 $tmp36 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	color		___399_rgb $tmp13 $tmp21 $tmp29 	%line{24} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:83
#   return rgb;
	assign		Color ___399_rgb 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{83} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:120
#   else if (projection == "box") {
	eq		$tmp37 projection $const18 	%line{120} %argrw{"wrr"}
	if		$tmp37 529 748 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:122
#     vector Nob = transform("world", "object", N);
	transformn	___406_Nob $const19 $const20 N 	%line{122} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:125
#     Nob = vector(fabs(Nob[0]), fabs(Nob[1]), fabs(Nob[2]));
	compref		$tmp39 ___406_Nob $const2 	%line{125} %argrw{"wrr"}
	fabs		$tmp38 $tmp39 	%argrw{"wr"}
	compref		$tmp41 ___406_Nob $const3 	%argrw{"wrr"}
	fabs		$tmp40 $tmp41 	%argrw{"wr"}
	compref		$tmp43 ___406_Nob $const17 	%argrw{"wrr"}
	fabs		$tmp42 $tmp43 	%argrw{"wr"}
	vector		___406_Nob $tmp38 $tmp40 $tmp42 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:126
#     Nob /= (Nob[0] + Nob[1] + Nob[2]);
	compref		$tmp44 ___406_Nob $const2 	%line{126} %argrw{"wrr"}
	compref		$tmp45 ___406_Nob $const3 	%argrw{"wrr"}
	add		$tmp46 $tmp44 $tmp45 	%argrw{"wrr"}
	compref		$tmp47 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp48 $tmp46 $tmp47 	%argrw{"wrr"}
	div		___406_Nob ___406_Nob $tmp48 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:138
#     vector weight = vector(0.0, 0.0, 0.0);
	assign		___406_weight $const21 	%line{138} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:139
#     float blend = projection_blend;
	assign		___406_blend projection_blend 	%line{139} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:140
#     float limit = 0.5 * (1.0 + blend);
	add		$tmp49 $const5 ___406_blend 	%line{140} %argrw{"wrr"}
	mul		___406_limit $const22 $tmp49 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:143
#     if (Nob[0] > limit * (Nob[0] + Nob[1]) && Nob[0] > limit * (Nob[0] + Nob[2])) {
	compref		$tmp50 ___406_Nob $const2 	%line{143} %argrw{"wrr"}
	compref		$tmp51 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp52 ___406_Nob $const3 	%argrw{"wrr"}
	add		$tmp53 $tmp51 $tmp52 	%argrw{"wrr"}
	mul		$tmp54 ___406_limit $tmp53 	%argrw{"wrr"}
	gt		$tmp55 $tmp50 $tmp54 	%argrw{"wrr"}
	neq		$tmp56 $tmp55 $const2 	%argrw{"wrr"}
	if		$tmp56 120 120 	%argrw{"r"}
	compref		$tmp57 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp58 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp59 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp60 $tmp58 $tmp59 	%argrw{"wrr"}
	mul		$tmp61 ___406_limit $tmp60 	%argrw{"wrr"}
	gt		$tmp62 $tmp57 $tmp61 	%argrw{"wrr"}
	neq		$tmp63 $tmp62 $const2 	%argrw{"wrr"}
	assign		$tmp56 $tmp63 	%argrw{"wr"}
	if		$tmp56 122 266 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:144
#       weight[0] = 1.0;
	compassign	___406_weight $const2 $const5 	%line{144} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:146
#     else if (Nob[1] > limit * (Nob[0] + Nob[1]) && Nob[1] > limit * (Nob[1] + Nob[2])) {
	compref		$tmp64 ___406_Nob $const3 	%line{146} %argrw{"wrr"}
	compref		$tmp65 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp66 ___406_Nob $const3 	%argrw{"wrr"}
	add		$tmp67 $tmp65 $tmp66 	%argrw{"wrr"}
	mul		$tmp68 ___406_limit $tmp67 	%argrw{"wrr"}
	gt		$tmp69 $tmp64 $tmp68 	%argrw{"wrr"}
	neq		$tmp70 $tmp69 $const2 	%argrw{"wrr"}
	if		$tmp70 138 138 	%argrw{"r"}
	compref		$tmp71 ___406_Nob $const3 	%argrw{"wrr"}
	compref		$tmp72 ___406_Nob $const3 	%argrw{"wrr"}
	compref		$tmp73 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp74 $tmp72 $tmp73 	%argrw{"wrr"}
	mul		$tmp75 ___406_limit $tmp74 	%argrw{"wrr"}
	gt		$tmp76 $tmp71 $tmp75 	%argrw{"wrr"}
	neq		$tmp77 $tmp76 $const2 	%argrw{"wrr"}
	assign		$tmp70 $tmp77 	%argrw{"wr"}
	if		$tmp70 140 266 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:147
#       weight[1] = 1.0;
	compassign	___406_weight $const3 $const5 	%line{147} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:149
#     else if (Nob[2] > limit * (Nob[0] + Nob[2]) && Nob[2] > limit * (Nob[1] + Nob[2])) {
	compref		$tmp78 ___406_Nob $const17 	%line{149} %argrw{"wrr"}
	compref		$tmp79 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp80 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp81 $tmp79 $tmp80 	%argrw{"wrr"}
	mul		$tmp82 ___406_limit $tmp81 	%argrw{"wrr"}
	gt		$tmp83 $tmp78 $tmp82 	%argrw{"wrr"}
	neq		$tmp84 $tmp83 $const2 	%argrw{"wrr"}
	if		$tmp84 156 156 	%argrw{"r"}
	compref		$tmp85 ___406_Nob $const17 	%argrw{"wrr"}
	compref		$tmp86 ___406_Nob $const3 	%argrw{"wrr"}
	compref		$tmp87 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp88 $tmp86 $tmp87 	%argrw{"wrr"}
	mul		$tmp89 ___406_limit $tmp88 	%argrw{"wrr"}
	gt		$tmp90 $tmp85 $tmp89 	%argrw{"wrr"}
	neq		$tmp91 $tmp90 $const2 	%argrw{"wrr"}
	assign		$tmp84 $tmp91 	%argrw{"wr"}
	if		$tmp84 158 266 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:150
#       weight[2] = 1.0;
	compassign	___406_weight $const17 $const5 	%line{150} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:152
#     else if (blend > 0.0) {
	gt		$tmp92 ___406_blend $const10 	%line{152} %argrw{"wrr"}
	if		$tmp92 265 266 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:154
#       if (Nob[2] < (1.0 - limit) * (Nob[1] + Nob[0])) {
	compref		$tmp93 ___406_Nob $const17 	%line{154} %argrw{"wrr"}
	sub		$tmp94 $const5 ___406_limit 	%argrw{"wrr"}
	compref		$tmp95 ___406_Nob $const3 	%argrw{"wrr"}
	compref		$tmp96 ___406_Nob $const2 	%argrw{"wrr"}
	add		$tmp97 $tmp95 $tmp96 	%argrw{"wrr"}
	mul		$tmp98 $tmp94 $tmp97 	%argrw{"wrr"}
	lt		$tmp99 $tmp93 $tmp98 	%argrw{"wrr"}
	if		$tmp99 186 265 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:155
#         weight[0] = Nob[0] / (Nob[0] + Nob[1]);
	compref		$tmp100 ___406_Nob $const2 	%line{155} %argrw{"wrr"}
	compref		$tmp101 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp102 ___406_Nob $const3 	%argrw{"wrr"}
	add		$tmp103 $tmp101 $tmp102 	%argrw{"wrr"}
	div		$tmp104 $tmp100 $tmp103 	%argrw{"wrr"}
	compassign	___406_weight $const2 $tmp104 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:156
#         weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compref		$tmp106 ___406_weight $const2 	%line{156} %argrw{"wrr"}
	sub		$tmp107 $const5 ___406_blend 	%argrw{"wrr"}
	mul		$tmp108 $const22 $tmp107 	%argrw{"wrr"}
	sub		$tmp109 $tmp106 $tmp108 	%argrw{"wrr"}
	div		$tmp110 $tmp109 ___406_blend 	%argrw{"wrr"}
	functioncall	$const23 182 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp111 $tmp110 $const5 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp105 $tmp111 $const10 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:156
#         weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compassign	___406_weight $const2 $tmp105 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{156} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:157
#         weight[1] = 1.0 - weight[0];
	compref		$tmp112 ___406_weight $const2 	%line{157} %argrw{"wrr"}
	sub		$tmp113 $const5 $tmp112 	%argrw{"wrr"}
	compassign	___406_weight $const3 $tmp113 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:159
#       else if (Nob[0] < (1.0 - limit) * (Nob[1] + Nob[2])) {
	compref		$tmp114 ___406_Nob $const2 	%line{159} %argrw{"wrr"}
	sub		$tmp115 $const5 ___406_limit 	%argrw{"wrr"}
	compref		$tmp116 ___406_Nob $const3 	%argrw{"wrr"}
	compref		$tmp117 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp118 $tmp116 $tmp117 	%argrw{"wrr"}
	mul		$tmp119 $tmp115 $tmp118 	%argrw{"wrr"}
	lt		$tmp120 $tmp114 $tmp119 	%argrw{"wrr"}
	if		$tmp120 212 265 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:160
#         weight[1] = Nob[1] / (Nob[1] + Nob[2]);
	compref		$tmp121 ___406_Nob $const3 	%line{160} %argrw{"wrr"}
	compref		$tmp122 ___406_Nob $const3 	%argrw{"wrr"}
	compref		$tmp123 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp124 $tmp122 $tmp123 	%argrw{"wrr"}
	div		$tmp125 $tmp121 $tmp124 	%argrw{"wrr"}
	compassign	___406_weight $const3 $tmp125 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:161
#         weight[1] = clamp((weight[1] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compref		$tmp127 ___406_weight $const3 	%line{161} %argrw{"wrr"}
	sub		$tmp128 $const5 ___406_blend 	%argrw{"wrr"}
	mul		$tmp129 $const22 $tmp128 	%argrw{"wrr"}
	sub		$tmp130 $tmp127 $tmp129 	%argrw{"wrr"}
	div		$tmp131 $tmp130 ___406_blend 	%argrw{"wrr"}
	functioncall	$const23 208 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp132 $tmp131 $const5 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp126 $tmp132 $const10 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:161
#         weight[1] = clamp((weight[1] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compassign	___406_weight $const3 $tmp126 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{161} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:162
#         weight[2] = 1.0 - weight[1];
	compref		$tmp133 ___406_weight $const3 	%line{162} %argrw{"wrr"}
	sub		$tmp134 $const5 $tmp133 	%argrw{"wrr"}
	compassign	___406_weight $const17 $tmp134 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:164
#       else if (Nob[1] < (1.0 - limit) * (Nob[0] + Nob[2])) {
	compref		$tmp135 ___406_Nob $const3 	%line{164} %argrw{"wrr"}
	sub		$tmp136 $const5 ___406_limit 	%argrw{"wrr"}
	compref		$tmp137 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp138 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp139 $tmp137 $tmp138 	%argrw{"wrr"}
	mul		$tmp140 $tmp136 $tmp139 	%argrw{"wrr"}
	lt		$tmp141 $tmp135 $tmp140 	%argrw{"wrr"}
	if		$tmp141 238 265 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:165
#         weight[0] = Nob[0] / (Nob[0] + Nob[2]);
	compref		$tmp142 ___406_Nob $const2 	%line{165} %argrw{"wrr"}
	compref		$tmp143 ___406_Nob $const2 	%argrw{"wrr"}
	compref		$tmp144 ___406_Nob $const17 	%argrw{"wrr"}
	add		$tmp145 $tmp143 $tmp144 	%argrw{"wrr"}
	div		$tmp146 $tmp142 $tmp145 	%argrw{"wrr"}
	compassign	___406_weight $const2 $tmp146 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:166
#         weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compref		$tmp148 ___406_weight $const2 	%line{166} %argrw{"wrr"}
	sub		$tmp149 $const5 ___406_blend 	%argrw{"wrr"}
	mul		$tmp150 $const22 $tmp149 	%argrw{"wrr"}
	sub		$tmp151 $tmp148 $tmp150 	%argrw{"wrr"}
	div		$tmp152 $tmp151 ___406_blend 	%argrw{"wrr"}
	functioncall	$const23 234 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp153 $tmp152 $const5 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp147 $tmp153 $const10 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:166
#         weight[0] = clamp((weight[0] - 0.5 * (1.0 - blend)) / blend, 0.0, 1.0);
	compassign	___406_weight $const2 $tmp147 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{166} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:167
#         weight[2] = 1.0 - weight[0];
	compref		$tmp154 ___406_weight $const2 	%line{167} %argrw{"wrr"}
	sub		$tmp155 $const5 $tmp154 	%argrw{"wrr"}
	compassign	___406_weight $const17 $tmp155 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:171
#         weight[0] = ((2.0 - limit) * Nob[0] + (limit - 1.0)) / (2.0 * limit - 1.0);
	sub		$tmp156 $const24 ___406_limit 	%line{171} %argrw{"wrr"}
	compref		$tmp157 ___406_Nob $const2 	%argrw{"wrr"}
	mul		$tmp158 $tmp156 $tmp157 	%argrw{"wrr"}
	sub		$tmp159 ___406_limit $const5 	%argrw{"wrr"}
	add		$tmp160 $tmp158 $tmp159 	%argrw{"wrr"}
	mul		$tmp161 $const24 ___406_limit 	%argrw{"wrr"}
	sub		$tmp162 $tmp161 $const5 	%argrw{"wrr"}
	div		$tmp163 $tmp160 $tmp162 	%argrw{"wrr"}
	compassign	___406_weight $const2 $tmp163 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:172
#         weight[1] = ((2.0 - limit) * Nob[1] + (limit - 1.0)) / (2.0 * limit - 1.0);
	sub		$tmp164 $const24 ___406_limit 	%line{172} %argrw{"wrr"}
	compref		$tmp165 ___406_Nob $const3 	%argrw{"wrr"}
	mul		$tmp166 $tmp164 $tmp165 	%argrw{"wrr"}
	sub		$tmp167 ___406_limit $const5 	%argrw{"wrr"}
	add		$tmp168 $tmp166 $tmp167 	%argrw{"wrr"}
	mul		$tmp169 $const24 ___406_limit 	%argrw{"wrr"}
	sub		$tmp170 $tmp169 $const5 	%argrw{"wrr"}
	div		$tmp171 $tmp168 $tmp170 	%argrw{"wrr"}
	compassign	___406_weight $const3 $tmp171 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:173
#         weight[2] = ((2.0 - limit) * Nob[2] + (limit - 1.0)) / (2.0 * limit - 1.0);
	sub		$tmp172 $const24 ___406_limit 	%line{173} %argrw{"wrr"}
	compref		$tmp173 ___406_Nob $const17 	%argrw{"wrr"}
	mul		$tmp174 $tmp172 $tmp173 	%argrw{"wrr"}
	sub		$tmp175 ___406_limit $const5 	%argrw{"wrr"}
	add		$tmp176 $tmp174 $tmp175 	%argrw{"wrr"}
	mul		$tmp177 $const24 ___406_limit 	%argrw{"wrr"}
	sub		$tmp178 $tmp177 $const5 	%argrw{"wrr"}
	div		$tmp179 $tmp176 $tmp178 	%argrw{"wrr"}
	compassign	___406_weight $const17 $tmp179 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:178
#       weight[0] = 1.0;
	compassign	___406_weight $const2 $const5 	%line{178} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:181
#     Color = color(0.0, 0.0, 0.0);
	assign		Color $const25 	%line{181} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:182
#     Alpha = 0.0;
	assign		Alpha $const10 	%line{182} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:186
#     if (weight[0] > 0.0) {
	compref		$tmp180 ___406_weight $const2 	%line{186} %argrw{"wrr"}
	gt		$tmp181 $tmp180 $const10 	%argrw{"wrr"}
	if		$tmp181 355 355 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:187
#       Color += weight[0] * image_texture_lookup(filename,
	compref		$tmp182 ___406_weight $const2 	%line{187} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:188
#                                                 p[1],
	compref		$tmp184 p $const3 	%line{188} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:189
#                                                 p[2],
	compref		$tmp185 p $const17 	%line{189} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:187
#       Color += weight[0] * image_texture_lookup(filename,
	functioncall	$const4 350 	%line{187} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:59
#   if (is_tiled) {
	if		$const2 281 282 	%line{59} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:60
#     float v_i = (int)v;
	assign		$tmp186 $tmp185 	%line{60} %argrw{"wr"}
	assign		___400_v_i $tmp186 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:61
#     flip_v = v_i + (1.0 - (v - v_i));
	sub		$tmp187 $tmp185 ___400_v_i 	%line{61} %argrw{"wrr"}
	sub		$tmp188 $const5 $tmp187 	%argrw{"wrr"}
	add		___399_flip_v ___400_v_i $tmp188 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:64
#     flip_v = 1.0 - v;
	sub		___399_flip_v $const5 $tmp185 	%line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:66
#   color rgb = (color)texture(
	texture		___399_rgb filename $tmp184 ___399_flip_v $const6 extension $const7 interpolation $const8 ___406_tmp_alpha 	%line{66} %argrw{"wrrrrrrrrw"} %argderivs{2,3}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:69
#   if (ignore_alpha) {
	if		ignore_alpha 285 301 	%line{69} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:70
#     Alpha = 1.0;
	assign		___406_tmp_alpha $const5 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:72
#   else if (unassociate_alpha) {
	if		unassociate_alpha 301 301 	%line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:73
#     rgb = color_unpremultiply(rgb, Alpha);
	functioncall	$const9 297 	%line{73} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:38
#   if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp189 ___406_tmp_alpha $const5 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{38} %argrw{"wrr"}
	neq		$tmp190 $tmp189 $const2 	%argrw{"wrr"}
	if		$tmp190 293 293 	%argrw{"r"}
	neq		$tmp191 ___406_tmp_alpha $const10 	%argrw{"wrr"}
	neq		$tmp192 $tmp191 $const2 	%argrw{"wrr"}
	assign		$tmp190 $tmp192 	%argrw{"wr"}
	if		$tmp190 296 296 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:39
#     return c / alpha;
	div		___399_rgb ___399_rgb ___406_tmp_alpha 	%line{39} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:41
#   return c;
	assign		___399_rgb ___399_rgb 	%line{41} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:75
#     if (!is_float)
	eq		$tmp193 is_float $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{75} %argrw{"wrr"}
	if		$tmp193 301 301 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:76
#       rgb = min(rgb, 1.0);
	assign		$tmp194 $const5 	%line{76} %argrw{"wr"}
	min		___399_rgb ___399_rgb $tmp194 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:79
#   if (compress_as_srgb) {
	if		compress_as_srgb 349 349 	%line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:80
#     rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const11 349 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	compref		$tmp196 ___399_rgb $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{24} %argrw{"wrr"}
	functioncall	$const11 318 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp197 $tmp196 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp197 313 318 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp198 $tmp196 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp198 310 312 	%argrw{"r"}
	assign		$tmp195 $const10 	%argrw{"wr"}
	div		$tmp199 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp195 $tmp196 $tmp199 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp200 $tmp196 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp201 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp202 $tmp200 $tmp201 	%argrw{"wrr"}
	pow		$tmp195 $tmp202 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:25
#                color_srgb_to_scene_linear(c[1]),
	compref		$tmp204 ___399_rgb $const3 	%line{25} %argrw{"wrr"}
	functioncall	$const11 333 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp205 $tmp204 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp205 328 333 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp206 $tmp204 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp206 325 327 	%argrw{"r"}
	assign		$tmp203 $const10 	%argrw{"wr"}
	div		$tmp207 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp203 $tmp204 $tmp207 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp208 $tmp204 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp209 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp210 $tmp208 $tmp209 	%argrw{"wrr"}
	pow		$tmp203 $tmp210 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:26
#                color_srgb_to_scene_linear(c[2]));
	compref		$tmp212 ___399_rgb $const17 	%line{26} %argrw{"wrr"}
	functioncall	$const11 348 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp213 $tmp212 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp213 343 348 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp214 $tmp212 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp214 340 342 	%argrw{"r"}
	assign		$tmp211 $const10 	%argrw{"wr"}
	div		$tmp215 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp211 $tmp212 $tmp215 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp216 $tmp212 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp217 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp218 $tmp216 $tmp217 	%argrw{"wrr"}
	pow		$tmp211 $tmp218 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	color		___399_rgb $tmp195 $tmp203 $tmp211 	%line{24} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:83
#   return rgb;
	assign		$tmp183 ___399_rgb 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{83} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:187
#       Color += weight[0] * image_texture_lookup(filename,
	mul		$tmp219 $tmp182 $tmp183 	%line{187} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:197
#                                                 extension);
	add		Color Color $tmp219 	%line{197} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:198
#       Alpha += weight[0] * tmp_alpha;
	compref		$tmp220 ___406_weight $const2 	%line{198} %argrw{"wrr"}
	mul		$tmp221 $tmp220 ___406_tmp_alpha 	%argrw{"wrr"}
	add		Alpha Alpha $tmp221 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:200
#     if (weight[1] > 0.0) {
	compref		$tmp222 ___406_weight $const3 	%line{200} %argrw{"wrr"}
	gt		$tmp223 $tmp222 $const10 	%argrw{"wrr"}
	if		$tmp223 442 442 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:201
#       Color += weight[1] * image_texture_lookup(filename,
	compref		$tmp224 ___406_weight $const3 	%line{201} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:202
#                                                 p[0],
	compref		$tmp226 p $const2 	%line{202} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:203
#                                                 p[2],
	compref		$tmp227 p $const17 	%line{203} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:201
#       Color += weight[1] * image_texture_lookup(filename,
	functioncall	$const4 437 	%line{201} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:59
#   if (is_tiled) {
	if		$const2 368 369 	%line{59} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:60
#     float v_i = (int)v;
	assign		$tmp228 $tmp227 	%line{60} %argrw{"wr"}
	assign		___400_v_i $tmp228 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:61
#     flip_v = v_i + (1.0 - (v - v_i));
	sub		$tmp229 $tmp227 ___400_v_i 	%line{61} %argrw{"wrr"}
	sub		$tmp230 $const5 $tmp229 	%argrw{"wrr"}
	add		___399_flip_v ___400_v_i $tmp230 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:64
#     flip_v = 1.0 - v;
	sub		___399_flip_v $const5 $tmp227 	%line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:66
#   color rgb = (color)texture(
	texture		___399_rgb filename $tmp226 ___399_flip_v $const6 extension $const7 interpolation $const8 ___406_tmp_alpha 	%line{66} %argrw{"wrrrrrrrrw"} %argderivs{2,3}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:69
#   if (ignore_alpha) {
	if		ignore_alpha 372 388 	%line{69} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:70
#     Alpha = 1.0;
	assign		___406_tmp_alpha $const5 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:72
#   else if (unassociate_alpha) {
	if		unassociate_alpha 388 388 	%line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:73
#     rgb = color_unpremultiply(rgb, Alpha);
	functioncall	$const9 384 	%line{73} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:38
#   if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp231 ___406_tmp_alpha $const5 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{38} %argrw{"wrr"}
	neq		$tmp232 $tmp231 $const2 	%argrw{"wrr"}
	if		$tmp232 380 380 	%argrw{"r"}
	neq		$tmp233 ___406_tmp_alpha $const10 	%argrw{"wrr"}
	neq		$tmp234 $tmp233 $const2 	%argrw{"wrr"}
	assign		$tmp232 $tmp234 	%argrw{"wr"}
	if		$tmp232 383 383 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:39
#     return c / alpha;
	div		___399_rgb ___399_rgb ___406_tmp_alpha 	%line{39} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:41
#   return c;
	assign		___399_rgb ___399_rgb 	%line{41} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:75
#     if (!is_float)
	eq		$tmp235 is_float $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{75} %argrw{"wrr"}
	if		$tmp235 388 388 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:76
#       rgb = min(rgb, 1.0);
	assign		$tmp236 $const5 	%line{76} %argrw{"wr"}
	min		___399_rgb ___399_rgb $tmp236 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:79
#   if (compress_as_srgb) {
	if		compress_as_srgb 436 436 	%line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:80
#     rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const11 436 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	compref		$tmp238 ___399_rgb $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{24} %argrw{"wrr"}
	functioncall	$const11 405 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp239 $tmp238 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp239 400 405 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp240 $tmp238 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp240 397 399 	%argrw{"r"}
	assign		$tmp237 $const10 	%argrw{"wr"}
	div		$tmp241 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp237 $tmp238 $tmp241 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp242 $tmp238 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp243 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp244 $tmp242 $tmp243 	%argrw{"wrr"}
	pow		$tmp237 $tmp244 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:25
#                color_srgb_to_scene_linear(c[1]),
	compref		$tmp246 ___399_rgb $const3 	%line{25} %argrw{"wrr"}
	functioncall	$const11 420 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp247 $tmp246 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp247 415 420 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp248 $tmp246 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp248 412 414 	%argrw{"r"}
	assign		$tmp245 $const10 	%argrw{"wr"}
	div		$tmp249 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp245 $tmp246 $tmp249 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp250 $tmp246 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp251 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp252 $tmp250 $tmp251 	%argrw{"wrr"}
	pow		$tmp245 $tmp252 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:26
#                color_srgb_to_scene_linear(c[2]));
	compref		$tmp254 ___399_rgb $const17 	%line{26} %argrw{"wrr"}
	functioncall	$const11 435 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp255 $tmp254 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp255 430 435 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp256 $tmp254 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp256 427 429 	%argrw{"r"}
	assign		$tmp253 $const10 	%argrw{"wr"}
	div		$tmp257 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp253 $tmp254 $tmp257 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp258 $tmp254 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp259 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp260 $tmp258 $tmp259 	%argrw{"wrr"}
	pow		$tmp253 $tmp260 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	color		___399_rgb $tmp237 $tmp245 $tmp253 	%line{24} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:83
#   return rgb;
	assign		$tmp225 ___399_rgb 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{83} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:201
#       Color += weight[1] * image_texture_lookup(filename,
	mul		$tmp261 $tmp224 $tmp225 	%line{201} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:211
#                                                 extension);
	add		Color Color $tmp261 	%line{211} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:212
#       Alpha += weight[1] * tmp_alpha;
	compref		$tmp262 ___406_weight $const3 	%line{212} %argrw{"wrr"}
	mul		$tmp263 $tmp262 ___406_tmp_alpha 	%argrw{"wrr"}
	add		Alpha Alpha $tmp263 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:214
#     if (weight[2] > 0.0) {
	compref		$tmp264 ___406_weight $const17 	%line{214} %argrw{"wrr"}
	gt		$tmp265 $tmp264 $const10 	%argrw{"wrr"}
	if		$tmp265 529 529 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:215
#       Color += weight[2] * image_texture_lookup(filename,
	compref		$tmp266 ___406_weight $const17 	%line{215} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:216
#                                                 p[1],
	compref		$tmp268 p $const3 	%line{216} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:217
#                                                 p[0],
	compref		$tmp269 p $const2 	%line{217} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:215
#       Color += weight[2] * image_texture_lookup(filename,
	functioncall	$const4 524 	%line{215} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:59
#   if (is_tiled) {
	if		$const2 455 456 	%line{59} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:60
#     float v_i = (int)v;
	assign		$tmp270 $tmp269 	%line{60} %argrw{"wr"}
	assign		___400_v_i $tmp270 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:61
#     flip_v = v_i + (1.0 - (v - v_i));
	sub		$tmp271 $tmp269 ___400_v_i 	%line{61} %argrw{"wrr"}
	sub		$tmp272 $const5 $tmp271 	%argrw{"wrr"}
	add		___399_flip_v ___400_v_i $tmp272 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:64
#     flip_v = 1.0 - v;
	sub		___399_flip_v $const5 $tmp269 	%line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:66
#   color rgb = (color)texture(
	texture		___399_rgb filename $tmp268 ___399_flip_v $const6 extension $const7 interpolation $const8 ___406_tmp_alpha 	%line{66} %argrw{"wrrrrrrrrw"} %argderivs{2,3}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:69
#   if (ignore_alpha) {
	if		ignore_alpha 459 475 	%line{69} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:70
#     Alpha = 1.0;
	assign		___406_tmp_alpha $const5 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:72
#   else if (unassociate_alpha) {
	if		unassociate_alpha 475 475 	%line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:73
#     rgb = color_unpremultiply(rgb, Alpha);
	functioncall	$const9 471 	%line{73} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:38
#   if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp273 ___406_tmp_alpha $const5 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{38} %argrw{"wrr"}
	neq		$tmp274 $tmp273 $const2 	%argrw{"wrr"}
	if		$tmp274 467 467 	%argrw{"r"}
	neq		$tmp275 ___406_tmp_alpha $const10 	%argrw{"wrr"}
	neq		$tmp276 $tmp275 $const2 	%argrw{"wrr"}
	assign		$tmp274 $tmp276 	%argrw{"wr"}
	if		$tmp274 470 470 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:39
#     return c / alpha;
	div		___399_rgb ___399_rgb ___406_tmp_alpha 	%line{39} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:41
#   return c;
	assign		___399_rgb ___399_rgb 	%line{41} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:75
#     if (!is_float)
	eq		$tmp277 is_float $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{75} %argrw{"wrr"}
	if		$tmp277 475 475 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:76
#       rgb = min(rgb, 1.0);
	assign		$tmp278 $const5 	%line{76} %argrw{"wr"}
	min		___399_rgb ___399_rgb $tmp278 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:79
#   if (compress_as_srgb) {
	if		compress_as_srgb 523 523 	%line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:80
#     rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const11 523 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	compref		$tmp280 ___399_rgb $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{24} %argrw{"wrr"}
	functioncall	$const11 492 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp281 $tmp280 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp281 487 492 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp282 $tmp280 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp282 484 486 	%argrw{"r"}
	assign		$tmp279 $const10 	%argrw{"wr"}
	div		$tmp283 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp279 $tmp280 $tmp283 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp284 $tmp280 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp285 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp286 $tmp284 $tmp285 	%argrw{"wrr"}
	pow		$tmp279 $tmp286 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:25
#                color_srgb_to_scene_linear(c[1]),
	compref		$tmp288 ___399_rgb $const3 	%line{25} %argrw{"wrr"}
	functioncall	$const11 507 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp289 $tmp288 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp289 502 507 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp290 $tmp288 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp290 499 501 	%argrw{"r"}
	assign		$tmp287 $const10 	%argrw{"wr"}
	div		$tmp291 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp287 $tmp288 $tmp291 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp292 $tmp288 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp293 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp294 $tmp292 $tmp293 	%argrw{"wrr"}
	pow		$tmp287 $tmp294 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:26
#                color_srgb_to_scene_linear(c[2]));
	compref		$tmp296 ___399_rgb $const17 	%line{26} %argrw{"wrr"}
	functioncall	$const11 522 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp297 $tmp296 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp297 517 522 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp298 $tmp296 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp298 514 516 	%argrw{"r"}
	assign		$tmp295 $const10 	%argrw{"wr"}
	div		$tmp299 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp295 $tmp296 $tmp299 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp300 $tmp296 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp301 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp302 $tmp300 $tmp301 	%argrw{"wrr"}
	pow		$tmp295 $tmp302 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	color		___399_rgb $tmp279 $tmp287 $tmp295 	%line{24} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:83
#   return rgb;
	assign		$tmp267 ___399_rgb 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{83} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:215
#       Color += weight[2] * image_texture_lookup(filename,
	mul		$tmp303 $tmp266 $tmp267 	%line{215} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:225
#                                                 extension);
	add		Color Color $tmp303 	%line{225} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:226
#       Alpha += weight[2] * tmp_alpha;
	compref		$tmp304 ___406_weight $const17 	%line{226} %argrw{"wrr"}
	mul		$tmp305 $tmp304 ___406_tmp_alpha 	%argrw{"wrr"}
	add		Alpha Alpha $tmp305 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:229
#   else if (projection == "sphere") {
	eq		$tmp306 projection $const26 	%line{229} %argrw{"wrr"}
	if		$tmp306 640 748 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:230
#     point projected = map_to_sphere(texco_remap_square(p));
	functioncall	$const27 534 	%line{230} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:9
#   return (co - point(0.5, 0.5, 0.5)) * 2.0;
	sub		$tmp309 p $const28 	%line{9} %argrw{"wrr"}
	mul		$tmp307 $tmp309 $const24 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:230
#     point projected = map_to_sphere(texco_remap_square(p));
	functioncall	$const29 562 	%line{230} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:28
#   float len = length(dir);
	length		___394_len $tmp307 	%line{28} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:30
#   if (len > 0.0) {
	gt		$tmp310 ___394_len $const10 	%line{30} %argrw{"wrr"}
	if		$tmp310 559 561 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:31
#     if (dir[0] == 0.0 && dir[1] == 0.0) {
	compref		$tmp311 $tmp307 $const2 	%line{31} %argrw{"wrr"}
	eq		$tmp312 $tmp311 $const10 	%argrw{"wrr"}
	neq		$tmp313 $tmp312 $const2 	%argrw{"wrr"}
	if		$tmp313 546 546 	%argrw{"r"}
	compref		$tmp314 $tmp307 $const3 	%argrw{"wrr"}
	eq		$tmp315 $tmp314 $const10 	%argrw{"wrr"}
	neq		$tmp316 $tmp315 $const2 	%argrw{"wrr"}
	assign		$tmp313 $tmp316 	%argrw{"wr"}
	if		$tmp313 548 554 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:32
#       u = 0.0; /* Otherwise domain error. */
	assign		___394_u $const10 	%line{32} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:35
#       u = (1.0 - atan2(dir[0], dir[1]) / M_PI) / 2.0;
	compref		$tmp318 $tmp307 $const2 	%line{35} %argrw{"wrr"}
	compref		$tmp319 $tmp307 $const3 	%argrw{"wrr"}
	atan2		$tmp317 $tmp318 $tmp319 	%argrw{"wrr"}
	div		$tmp320 $tmp317 $const30 	%argrw{"wrr"}
	sub		$tmp321 $const5 $tmp320 	%argrw{"wrr"}
	div		___394_u $tmp321 $const24 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:37
#     v = 1.0 - acos(dir[2] / len) / M_PI;
	compref		$tmp323 $tmp307 $const17 	%line{37} %argrw{"wrr"}
	div		$tmp324 $tmp323 ___394_len 	%argrw{"wrr"}
	acos		$tmp322 $tmp324 	%argrw{"wr"}
	div		$tmp325 $tmp322 $const30 	%argrw{"wrr"}
	sub		___394_v $const5 $tmp325 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:40
#     v = u = 0.0; /* To avoid un-initialized variables. */
	assign		___394_u $const10 	%line{40} %argrw{"wr"}
	assign		___394_v ___394_u 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:42
#   return point(u, v, 0.0);
	point		___419_projected ___394_u ___394_v $const10 	%line{42} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:232
#                                  projected[0],
	compref		$tmp326 ___419_projected $const2 	%line{232} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:233
#                                  projected[1],
	compref		$tmp327 ___419_projected $const3 	%line{233} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:231
#     Color = image_texture_lookup(filename,
	functioncall	$const4 640 	%line{231} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:59
#   if (is_tiled) {
	if		$const2 571 572 	%line{59} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:60
#     float v_i = (int)v;
	assign		$tmp328 $tmp327 	%line{60} %argrw{"wr"}
	assign		___400_v_i $tmp328 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:61
#     flip_v = v_i + (1.0 - (v - v_i));
	sub		$tmp329 $tmp327 ___400_v_i 	%line{61} %argrw{"wrr"}
	sub		$tmp330 $const5 $tmp329 	%argrw{"wrr"}
	add		___399_flip_v ___400_v_i $tmp330 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:64
#     flip_v = 1.0 - v;
	sub		___399_flip_v $const5 $tmp327 	%line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:66
#   color rgb = (color)texture(
	texture		___399_rgb filename $tmp326 ___399_flip_v $const6 extension $const7 interpolation $const8 Alpha 	%line{66} %argrw{"wrrrrrrrrw"} %argderivs{2,3}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:69
#   if (ignore_alpha) {
	if		ignore_alpha 575 591 	%line{69} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:70
#     Alpha = 1.0;
	assign		Alpha $const5 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:72
#   else if (unassociate_alpha) {
	if		unassociate_alpha 591 591 	%line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:73
#     rgb = color_unpremultiply(rgb, Alpha);
	functioncall	$const9 587 	%line{73} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:38
#   if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp331 Alpha $const5 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{38} %argrw{"wrr"}
	neq		$tmp332 $tmp331 $const2 	%argrw{"wrr"}
	if		$tmp332 583 583 	%argrw{"r"}
	neq		$tmp333 Alpha $const10 	%argrw{"wrr"}
	neq		$tmp334 $tmp333 $const2 	%argrw{"wrr"}
	assign		$tmp332 $tmp334 	%argrw{"wr"}
	if		$tmp332 586 586 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:39
#     return c / alpha;
	div		___399_rgb ___399_rgb Alpha 	%line{39} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:41
#   return c;
	assign		___399_rgb ___399_rgb 	%line{41} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:75
#     if (!is_float)
	eq		$tmp335 is_float $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{75} %argrw{"wrr"}
	if		$tmp335 591 591 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:76
#       rgb = min(rgb, 1.0);
	assign		$tmp336 $const5 	%line{76} %argrw{"wr"}
	min		___399_rgb ___399_rgb $tmp336 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:79
#   if (compress_as_srgb) {
	if		compress_as_srgb 639 639 	%line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:80
#     rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const11 639 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	compref		$tmp338 ___399_rgb $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{24} %argrw{"wrr"}
	functioncall	$const11 608 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp339 $tmp338 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp339 603 608 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp340 $tmp338 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp340 600 602 	%argrw{"r"}
	assign		$tmp337 $const10 	%argrw{"wr"}
	div		$tmp341 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp337 $tmp338 $tmp341 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp342 $tmp338 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp343 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp344 $tmp342 $tmp343 	%argrw{"wrr"}
	pow		$tmp337 $tmp344 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:25
#                color_srgb_to_scene_linear(c[1]),
	compref		$tmp346 ___399_rgb $const3 	%line{25} %argrw{"wrr"}
	functioncall	$const11 623 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp347 $tmp346 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp347 618 623 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp348 $tmp346 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp348 615 617 	%argrw{"r"}
	assign		$tmp345 $const10 	%argrw{"wr"}
	div		$tmp349 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp345 $tmp346 $tmp349 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp350 $tmp346 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp351 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp352 $tmp350 $tmp351 	%argrw{"wrr"}
	pow		$tmp345 $tmp352 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:26
#                color_srgb_to_scene_linear(c[2]));
	compref		$tmp354 ___399_rgb $const17 	%line{26} %argrw{"wrr"}
	functioncall	$const11 638 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp355 $tmp354 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp355 633 638 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp356 $tmp354 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp356 630 632 	%argrw{"r"}
	assign		$tmp353 $const10 	%argrw{"wr"}
	div		$tmp357 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp353 $tmp354 $tmp357 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp358 $tmp354 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp359 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp360 $tmp358 $tmp359 	%argrw{"wrr"}
	pow		$tmp353 $tmp360 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	color		___399_rgb $tmp337 $tmp345 $tmp353 	%line{24} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:83
#   return rgb;
	assign		Color ___399_rgb 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{83} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:243
#   else if (projection == "tube") {
	eq		$tmp361 projection $const31 	%line{243} %argrw{"wrr"}
	if		$tmp361 748 748 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:244
#     point projected = map_to_tube(texco_remap_square(p));
	functioncall	$const27 645 	%line{244} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:9
#   return (co - point(0.5, 0.5, 0.5)) * 2.0;
	sub		$tmp364 p $const28 	%line{9} %argrw{"wrr"}
	mul		$tmp362 $tmp364 $const24 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:244
#     point projected = map_to_tube(texco_remap_square(p));
	functioncall	$const32 670 	%line{244} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:15
#   v = (dir[2] + 1.0) * 0.5;
	compref		$tmp365 $tmp362 $const17 	%line{15} %argrw{"wrr"}
	add		$tmp366 $tmp365 $const5 	%argrw{"wrr"}
	mul		___391_v $tmp366 $const22 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:16
#   float len = sqrt(dir[0] * dir[0] + dir[1] * dir[1]);
	compref		$tmp367 $tmp362 $const2 	%line{16} %argrw{"wrr"}
	compref		$tmp368 $tmp362 $const2 	%argrw{"wrr"}
	mul		$tmp369 $tmp367 $tmp368 	%argrw{"wrr"}
	compref		$tmp370 $tmp362 $const3 	%argrw{"wrr"}
	compref		$tmp371 $tmp362 $const3 	%argrw{"wrr"}
	mul		$tmp372 $tmp370 $tmp371 	%argrw{"wrr"}
	add		$tmp373 $tmp369 $tmp372 	%argrw{"wrr"}
	sqrt		___391_len $tmp373 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:17
#   if (len > 0.0) {
	gt		$tmp374 ___391_len $const10 	%line{17} %argrw{"wrr"}
	if		$tmp374 667 669 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:18
#     u = (1.0 - (atan2(dir[0] / len, dir[1] / len) / M_PI)) * 0.5;
	compref		$tmp376 $tmp362 $const2 	%line{18} %argrw{"wrr"}
	div		$tmp377 $tmp376 ___391_len 	%argrw{"wrr"}
	compref		$tmp378 $tmp362 $const3 	%argrw{"wrr"}
	div		$tmp379 $tmp378 ___391_len 	%argrw{"wrr"}
	atan2		$tmp375 $tmp377 $tmp379 	%argrw{"wrr"}
	div		$tmp380 $tmp375 $const30 	%argrw{"wrr"}
	sub		$tmp381 $const5 $tmp380 	%argrw{"wrr"}
	mul		___391_u $tmp381 $const22 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:21
#     v = u = 0.0; /* To avoid un-initialized variables. */
	assign		___391_u $const10 	%line{21} %argrw{"wr"}
	assign		___391_v ___391_u 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:23
#   return point(u, v, 0.0);
	point		___420_projected ___391_u ___391_v $const10 	%line{23} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:246
#                                  projected[0],
	compref		$tmp382 ___420_projected $const2 	%line{246} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:247
#                                  projected[1],
	compref		$tmp383 ___420_projected $const3 	%line{247} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:245
#     Color = image_texture_lookup(filename,
	functioncall	$const4 748 	%line{245} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:59
#   if (is_tiled) {
	if		$const2 679 680 	%line{59} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:60
#     float v_i = (int)v;
	assign		$tmp384 $tmp383 	%line{60} %argrw{"wr"}
	assign		___400_v_i $tmp384 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:61
#     flip_v = v_i + (1.0 - (v - v_i));
	sub		$tmp385 $tmp383 ___400_v_i 	%line{61} %argrw{"wrr"}
	sub		$tmp386 $const5 $tmp385 	%argrw{"wrr"}
	add		___399_flip_v ___400_v_i $tmp386 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:64
#     flip_v = 1.0 - v;
	sub		___399_flip_v $const5 $tmp383 	%line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:66
#   color rgb = (color)texture(
	texture		___399_rgb filename $tmp382 ___399_flip_v $const6 extension $const7 interpolation $const8 Alpha 	%line{66} %argrw{"wrrrrrrrrw"} %argderivs{2,3}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:69
#   if (ignore_alpha) {
	if		ignore_alpha 683 699 	%line{69} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:70
#     Alpha = 1.0;
	assign		Alpha $const5 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:72
#   else if (unassociate_alpha) {
	if		unassociate_alpha 699 699 	%line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:73
#     rgb = color_unpremultiply(rgb, Alpha);
	functioncall	$const9 695 	%line{73} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:38
#   if (alpha != 1.0 && alpha != 0.0)
	neq		$tmp387 Alpha $const5 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{38} %argrw{"wrr"}
	neq		$tmp388 $tmp387 $const2 	%argrw{"wrr"}
	if		$tmp388 691 691 	%argrw{"r"}
	neq		$tmp389 Alpha $const10 	%argrw{"wrr"}
	neq		$tmp390 $tmp389 $const2 	%argrw{"wrr"}
	assign		$tmp388 $tmp390 	%argrw{"wr"}
	if		$tmp388 694 694 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:39
#     return c / alpha;
	div		___399_rgb ___399_rgb Alpha 	%line{39} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:41
#   return c;
	assign		___399_rgb ___399_rgb 	%line{41} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:75
#     if (!is_float)
	eq		$tmp391 is_float $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{75} %argrw{"wrr"}
	if		$tmp391 699 699 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:76
#       rgb = min(rgb, 1.0);
	assign		$tmp392 $const5 	%line{76} %argrw{"wr"}
	min		___399_rgb ___399_rgb $tmp392 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:79
#   if (compress_as_srgb) {
	if		compress_as_srgb 747 747 	%line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:80
#     rgb = color_srgb_to_scene_linear(rgb);
	functioncall	$const11 747 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	compref		$tmp394 ___399_rgb $const2 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h"} %line{24} %argrw{"wrr"}
	functioncall	$const11 716 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp395 $tmp394 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp395 711 716 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp396 $tmp394 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp396 708 710 	%argrw{"r"}
	assign		$tmp393 $const10 	%argrw{"wr"}
	div		$tmp397 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp393 $tmp394 $tmp397 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp398 $tmp394 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp399 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp400 $tmp398 $tmp399 	%argrw{"wrr"}
	pow		$tmp393 $tmp400 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:25
#                color_srgb_to_scene_linear(c[1]),
	compref		$tmp402 ___399_rgb $const3 	%line{25} %argrw{"wrr"}
	functioncall	$const11 731 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp403 $tmp402 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp403 726 731 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp404 $tmp402 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp404 723 725 	%argrw{"r"}
	assign		$tmp401 $const10 	%argrw{"wr"}
	div		$tmp405 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp401 $tmp402 $tmp405 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp406 $tmp402 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp407 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp408 $tmp406 $tmp407 	%argrw{"wrr"}
	pow		$tmp401 $tmp408 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:26
#                color_srgb_to_scene_linear(c[2]));
	compref		$tmp410 ___399_rgb $const17 	%line{26} %argrw{"wrr"}
	functioncall	$const11 746 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:8
#   if (c < 0.04045)
	lt		$tmp411 $tmp410 $const12 	%line{8} %argrw{"wrr"}
	if		$tmp411 741 746 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:9
#     return (c < 0.0) ? 0.0 : c * (1.0 / 12.92);
	lt		$tmp412 $tmp410 $const10 	%line{9} %argrw{"wrr"}
	if		$tmp412 738 740 	%argrw{"r"}
	assign		$tmp409 $const10 	%argrw{"wr"}
	div		$tmp413 $const5 $const13 	%argrw{"wrr"}
	mul		$tmp409 $tmp410 $tmp413 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:11
#     return pow((c + 0.055) * (1.0 / 1.055), 2.4);
	add		$tmp414 $tmp410 $const14 	%line{11} %argrw{"wrr"}
	div		$tmp415 $const5 $const15 	%argrw{"wrr"}
	mul		$tmp416 $tmp414 $tmp415 	%argrw{"wrr"}
	pow		$tmp409 $tmp416 $const16 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_color.h:24
#   return color(color_srgb_to_scene_linear(c[0]),
	color		___399_rgb $tmp393 $tmp401 $tmp409 	%line{24} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl:83
#   return rgb;
	assign		Color ___399_rgb 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_image_texture.osl"} %line{83} %argrw{"wr"}
	end
