OpenShadingLanguage 1.00
# Compiled by oslc 1.11.17
# options: -q -O2 -IF:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders -IF:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders -o F:/Repositories/blenderRepo/build_windows_Full_x64_vc16_Release/intern/cycles/kernel/osl/shaders/node_principled_bsdf.oso
shader node_principled_bsdf
param	string	distribution	"Multiscatter GGX"		%read{124,196} %write{2147483647,-1}
param	string	subsurface_method	"random_walk"		%read{91,91} %write{2147483647,-1}
param	color	BaseColor	0.800000012 0.800000012 0.800000012		%read{23,214} %write{2147483647,-1}
param	float	Subsurface	0		%read{84,90} %write{2147483647,-1}
param	vector	SubsurfaceRadius	1 1 1		%read{90,90} %write{2147483647,-1}
param	color	SubsurfaceColor	0.699999988 0.100000001 0.100000001		%read{86,86} %write{2147483647,-1}
param	float	SubsurfaceIOR	1.39999998		%read{91,91} %write{2147483647,-1}
param	float	SubsurfaceAnisotropy	0		%read{91,91} %write{2147483647,-1}
param	float	Metallic	0		%read{5,122} %write{2147483647,-1}
param	float	Specular	0.5		%read{118,139} %write{2147483647,-1}
param	float	SpecularTint	0		%read{114,150} %write{2147483647,-1}
param	float	Roughness	0.5		%read{91,213} %write{2147483647,-1}
param	float	Anisotropic	0		%read{108,108} %write{2147483647,-1}
param	float	AnisotropicRotation	0		%read{28,30} %write{2147483647,-1}
param	float	Sheen	0		%read{95,102} %write{2147483647,-1}
param	float	SheenTint	0.5		%read{97,99} %write{2147483647,-1}
param	float	Clearcoat	0		%read{217,220} %write{2147483647,-1}
param	float	ClearcoatRoughness	0.0299999993		%read{219,219} %write{2147483647,-1}
param	float	IOR	1.45000005		%read{3,3} %write{2147483647,-1}
param	float	Transmission	0		%read{9,14} %write{2147483647,-1}
param	float	TransmissionRoughness	0		%read{199,199} %write{2147483647,-1}
param	normal	Normal	0 0 0		%read{32,214} %write{0,0} %initexpr
param	normal	ClearcoatNormal	0 0 0		%read{220,220} %write{1,1} %initexpr
param	normal	Tangent	0 0 0		%read{22,22} %write{2,2} %initexpr
oparam	closure color	BSDF			%read{104,221} %write{92,221}
global	vector	I	%read{164,164} %write{2147483647,-1}
global	normal	N	%read{0,1} %write{2147483647,-1}
global	vector	dPdu	%read{2,2} %write{2147483647,-1}
local	vector	___257_axis	%read{36,38} %write{33,33}
local	float	___257_cosang	%read{35,76} %write{34,34}
local	float	___257_sinang	%read{46,71} %write{34,34}
local	float	___257_cosang1	%read{45,70} %write{35,35}
local	float	___257_x	%read{39,71} %write{36,36}
local	float	___257_y	%read{44,69} %write{37,37}
local	float	___257_z	%read{46,74} %write{38,38}
local	matrix	___257_M	%read{80,80} %write{78,78}
local	float	___330_c	%read{169,181} %write{166,166}
local	float	___330_g	%read{171,180} %write{170,173}
local	float	___330_result	%read{190,190} %write{188,189}
local	float	___331_A	%read{184,185} %write{176,176}
local	float	___331_B	%read{186,186} %write{183,183}
local	float	f	%read{155,156} %write{3,3}
local	float	diffuse_weight	%read{82,105} %write{12,12}
local	float	final_transmission	%read{21,215} %write{20,20}
local	float	specular_weight	%read{106,145} %write{21,21}
local	vector	T	%read{79,144} %write{22,81}
local	float	m_cdlum	%read{24,26} %write{23,23}
local	color	m_ctint	%read{99,116} %write{26,27}
local	color	___372_mixed_ss_base_color	%read{91,92} %write{89,89}
local	color	___374_sheen_color	%read{102,102} %write{100,100}
local	float	___375_aspect	%read{112,113} %write{110,110}
local	float	___375_r2	%read{112,113} %write{111,111}
local	float	___375_alpha_x	%read{136,144} %write{112,112}
local	float	___375_alpha_y	%read{136,144} %write{113,113}
local	color	___375_tmp_col	%read{119,119} %write{117,117}
local	color	___375_Cspec0	%read{136,144} %write{123,123}
local	color	___378_Cspec0	%read{203,214} %write{152,152}
local	float	___378_eta	%read{167,214} %write{155,156}
local	float	___379_cosNO	%read{166,166} %write{164,164}
local	float	___379_Fr	%read{204,207} %write{190,190}
local	float	___379_refl_roughness	%read{195,202} %write{191,194}
local	float	___379_transmission_roughness	%read{205,205} %write{195,201}
const	float	$const1	9.99999975e-06		%read{3,217} %write{2147483647,-1}
const	float	$const2	1		%read{5,207} %write{2147483647,-1}
temp	float	$tmp1	%read{7,7} %write{6,6}
const	float	$const3	0		%read{6,194} %write{2147483647,-1}
const	string	$const4	"clamp"		%read{4,16} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5}
temp	float	$tmp3	%read{12,12} %write{7,7}
temp	float	$tmp4	%read{11,11} %write{10,10}
temp	float	$tmp5	%read{10,10} %write{9,9}
temp	float	$tmp6	%read{12,12} %write{11,11}
temp	float	$tmp7	%read{20,20} %write{15,15}
temp	float	$tmp8	%read{15,15} %write{14,14}
temp	float	$tmp9	%read{19,19} %write{18,18}
temp	float	$tmp10	%read{18,18} %write{17,17}
temp	float	$tmp11	%read{20,20} %write{19,19}
temp	int	$tmp12	%read{25,25} %write{24,24}
const	color	$const5	1 1 1		%read{27,151} %write{2147483647,-1}
temp	int	$tmp13	%read{29,29} %write{28,28}
const	float	$const6	6.28318548		%read{30,30} %write{2147483647,-1}
temp	float	$tmp14	%read{34,34} %write{30,30}
const	point	$const7	0 0 0		%read{32,81} %write{2147483647,-1}
const	string	$const8	"rotate"		%read{31,31} %write{2147483647,-1}
temp	vector	$tmp16	%read{33,33} %write{32,32}
const	int	$const9	0		%read{36,171} %write{2147483647,-1}
const	int	$const10	1		%read{37,37} %write{2147483647,-1}
const	int	$const11	2		%read{38,38} %write{2147483647,-1}
temp	float	$tmp17	%read{43,43} %write{39,39}
temp	float	$tmp18	%read{41,41} %write{40,40}
temp	float	$tmp19	%read{42,42} %write{41,41}
temp	float	$tmp20	%read{43,43} %write{42,42}
temp	float	$tmp21	%read{78,78} %write{43,43}
temp	float	$tmp22	%read{45,45} %write{44,44}
temp	float	$tmp23	%read{47,47} %write{45,45}
temp	float	$tmp24	%read{47,47} %write{46,46}
temp	float	$tmp25	%read{78,78} %write{47,47}
temp	float	$tmp26	%read{49,49} %write{48,48}
temp	float	$tmp27	%read{51,51} %write{49,49}
temp	float	$tmp28	%read{51,51} %write{50,50}
temp	float	$tmp29	%read{78,78} %write{51,51}
temp	float	$tmp30	%read{53,53} %write{52,52}
temp	float	$tmp31	%read{55,55} %write{53,53}
temp	float	$tmp32	%read{55,55} %write{54,54}
temp	float	$tmp33	%read{78,78} %write{55,55}
temp	float	$tmp34	%read{60,60} %write{56,56}
temp	float	$tmp35	%read{58,58} %write{57,57}
temp	float	$tmp36	%read{59,59} %write{58,58}
temp	float	$tmp37	%read{60,60} %write{59,59}
temp	float	$tmp38	%read{78,78} %write{60,60}
temp	float	$tmp39	%read{62,62} %write{61,61}
temp	float	$tmp40	%read{64,64} %write{62,62}
temp	float	$tmp41	%read{64,64} %write{63,63}
temp	float	$tmp42	%read{78,78} %write{64,64}
temp	float	$tmp43	%read{66,66} %write{65,65}
temp	float	$tmp44	%read{68,68} %write{66,66}
temp	float	$tmp45	%read{68,68} %write{67,67}
temp	float	$tmp46	%read{78,78} %write{68,68}
temp	float	$tmp47	%read{70,70} %write{69,69}
temp	float	$tmp48	%read{72,72} %write{70,70}
temp	float	$tmp49	%read{72,72} %write{71,71}
temp	float	$tmp50	%read{78,78} %write{72,72}
temp	float	$tmp51	%read{77,77} %write{73,73}
temp	float	$tmp52	%read{75,75} %write{74,74}
temp	float	$tmp53	%read{76,76} %write{75,75}
temp	float	$tmp54	%read{77,77} %write{76,76}
temp	float	$tmp55	%read{78,78} %write{77,77}
temp	vector	$tmp56	%read{81,81} %write{80,80}
temp	vector	$tmp57	%read{80,80} %write{79,79}
temp	int	$tmp58	%read{83,83} %write{82,82}
temp	int	$tmp59	%read{85,85} %write{84,84}
temp	color	$tmp60	%read{89,89} %write{86,86}
temp	float	$tmp61	%read{88,88} %write{87,87}
temp	color	$tmp62	%read{89,89} %write{88,88}
temp	closure color	$tmp63	%read{92,92} %write{91,91}
temp	vector	$tmp64	%read{91,91} %write{90,90}
const	string	$const12	"roughness"		%read{91,91} %write{2147483647,-1}
const	string	$const13	"ior"		%read{91,91} %write{2147483647,-1}
const	string	$const14	"anisotropy"		%read{91,91} %write{2147483647,-1}
const	string	$const15	"bssrdf"		%read{91,91} %write{2147483647,-1}
temp	closure color	$tmp65	%read{94,94} %write{93,93}
const	string	$const16	"principled_diffuse"		%read{93,93} %write{2147483647,-1}
temp	int	$tmp66	%read{96,96} %write{95,95}
temp	float	$tmp68	%read{98,98} %write{97,97}
temp	color	$tmp69	%read{100,100} %write{98,98}
temp	color	$tmp70	%read{100,100} %write{99,99}
temp	closure color	$tmp71	%read{103,103} %write{101,101}
const	string	$const17	"principled_sheen"		%read{101,101} %write{2147483647,-1}
temp	color	$tmp72	%read{103,103} %write{102,102}
temp	closure color	$tmp73	%read{104,104} %write{103,103}
temp	int	$tmp74	%read{107,107} %write{106,106}
const	float	$const18	0.899999976		%read{108,108} %write{2147483647,-1}
temp	float	$tmp75	%read{109,109} %write{108,108}
temp	float	$tmp76	%read{110,110} %write{109,109}
temp	float	$tmp78	%read{115,115} %write{114,114}
temp	color	$tmp79	%read{117,117} %write{115,115}
temp	color	$tmp80	%read{117,117} %write{116,116}
const	float	$const19	0.0799999982		%read{118,139} %write{2147483647,-1}
temp	float	$tmp81	%read{119,119} %write{118,118}
temp	color	$tmp82	%read{121,121} %write{119,119}
temp	float	$tmp83	%read{121,121} %write{120,120}
temp	color	$tmp84	%read{123,123} %write{121,121}
temp	color	$tmp85	%read{123,123} %write{122,122}
const	string	$const20	"GGX"		%read{124,196} %write{2147483647,-1}
temp	int	$tmp86	%read{125,125} %write{124,124}
temp	int	$tmp87	%read{126,130} %write{125,129}
const	float	$const21	0.075000003		%read{127,127} %write{2147483647,-1}
temp	int	$tmp88	%read{128,128} %write{127,127}
temp	int	$tmp89	%read{129,129} %write{128,128}
temp	closure color	$tmp90	%read{137,137} %write{136,136}
const	float	$const22	2		%read{134,142} %write{2147483647,-1}
temp	float	$tmp91	%read{133,133} %write{132,132}
temp	float	$tmp92	%read{132,132} %write{131,131}
temp	float	$tmp93	%read{134,134} %write{133,133}
temp	float	$tmp94	%read{135,135} %write{134,134}
temp	float	$tmp95	%read{136,136} %write{135,135}
const	string	$const23	"microfacet_ggx_aniso_fresnel"		%read{136,136} %write{2147483647,-1}
temp	closure color	$tmp96	%read{138,138} %write{137,137}
temp	closure color	$tmp97	%read{145,145} %write{144,144}
temp	float	$tmp98	%read{141,141} %write{140,140}
temp	float	$tmp99	%read{140,140} %write{139,139}
temp	float	$tmp100	%read{142,142} %write{141,141}
temp	float	$tmp101	%read{143,143} %write{142,142}
temp	float	$tmp102	%read{144,144} %write{143,143}
const	string	$const24	"microfacet_multi_ggx_aniso_fresnel"		%read{144,144} %write{2147483647,-1}
temp	closure color	$tmp103	%read{146,146} %write{145,145}
temp	int	$tmp104	%read{148,148} %write{147,147}
temp	color	$tmp105	%read{152,152} %write{149,149}
temp	float	$tmp107	%read{151,151} %write{150,150}
temp	color	$tmp108	%read{152,152} %write{151,151}
temp	int	$tmp109	%read{154,154} %write{153,153}
temp	int	$tmp110	%read{158,158} %write{157,157}
temp	int	$tmp111	%read{159,163} %write{158,162}
const	float	$const25	0.0500000007		%read{160,160} %write{2147483647,-1}
temp	int	$tmp112	%read{161,161} %write{160,160}
temp	int	$tmp113	%read{162,162} %write{161,161}
const	string	$const26	"fresnel_dielectric_cos"		%read{165,165} %write{2147483647,-1}
temp	float	$tmp114	%read{168,168} %write{167,167}
temp	float	$tmp115	%read{170,170} %write{168,168}
temp	float	$tmp116	%read{170,170} %write{169,169}
temp	int	$tmp117	%read{172,172} %write{171,171}
temp	float	$tmp118	%read{176,176} %write{174,174}
temp	float	$tmp119	%read{176,176} %write{175,175}
temp	float	$tmp120	%read{178,178} %write{177,177}
temp	float	$tmp121	%read{179,179} %write{178,178}
temp	float	$tmp122	%read{183,183} %write{179,179}
temp	float	$tmp123	%read{181,181} %write{180,180}
temp	float	$tmp124	%read{182,182} %write{181,181}
temp	float	$tmp125	%read{183,183} %write{182,182}
const	float	$const27	0.5		%read{184,184} %write{2147483647,-1}
temp	float	$tmp126	%read{185,185} %write{184,184}
temp	float	$tmp127	%read{188,188} %write{185,185}
temp	float	$tmp128	%read{187,187} %write{186,186}
temp	float	$tmp129	%read{188,188} %write{187,187}
const	float	$const28	0.00999999978		%read{192,192} %write{2147483647,-1}
temp	int	$tmp130	%read{193,193} %write{192,192}
temp	int	$tmp131	%read{197,197} %write{196,196}
temp	float	$tmp132	%read{200,200} %write{198,198}
temp	float	$tmp133	%read{200,200} %write{199,199}
temp	float	$tmp134	%read{201,201} %write{200,200}
temp	closure color	$tmp135	%read{204,204} %write{203,203}
temp	float	$tmp136	%read{203,203} %write{202,202}
const	string	$const29	"microfacet_ggx_fresnel"		%read{203,203} %write{2147483647,-1}
temp	closure color	$tmp137	%read{210,210} %write{204,204}
temp	closure color	$tmp138	%read{209,209} %write{206,206}
temp	float	$tmp139	%read{206,206} %write{205,205}
const	string	$const30	"microfacet_ggx_refraction"		%read{206,206} %write{2147483647,-1}
temp	float	$tmp140	%read{208,208} %write{207,207}
temp	color	$tmp141	%read{209,209} %write{208,208}
temp	closure color	$tmp142	%read{210,210} %write{209,209}
temp	closure color	$tmp143	%read{211,211} %write{210,210}
temp	closure color	$tmp144	%read{212,212} %write{211,211}
temp	closure color	$tmp145	%read{215,215} %write{214,214}
temp	float	$tmp146	%read{214,214} %write{213,213}
const	string	$const31	"microfacet_multi_ggx_glass_fresnel"		%read{214,214} %write{2147483647,-1}
temp	closure color	$tmp147	%read{216,216} %write{215,215}
temp	int	$tmp148	%read{218,218} %write{217,217}
temp	closure color	$tmp149	%read{221,221} %write{220,220}
temp	float	$tmp150	%read{220,220} %write{219,219}
const	string	$const32	"principled_clearcoat"		%read{220,220} %write{2147483647,-1}
code Normal
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:28
#                             normal Normal = N,
	assign		Normal N 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{28} %argrw{"wr"}
code ClearcoatNormal
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:29
#                             normal ClearcoatNormal = N,
	assign		ClearcoatNormal N 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{29} %argrw{"wr"}
code Tangent
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:30
#                             normal Tangent = normalize(dPdu),
	normalize	Tangent dPdu 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{30} %argrw{"wr"}
code ___main___
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:33
#   float f = max(IOR, 1e-5);
	max		f IOR $const1 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{33} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:34
#   float diffuse_weight = (1.0 - clamp(Metallic, 0.0, 1.0)) * (1.0 - clamp(Transmission, 0.0, 1.0));
	functioncall	$const4 7 	%line{34} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp2 Metallic $const2 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp1 $tmp2 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:34
#   float diffuse_weight = (1.0 - clamp(Metallic, 0.0, 1.0)) * (1.0 - clamp(Transmission, 0.0, 1.0));
	sub		$tmp3 $const2 $tmp1 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{34} %argrw{"wrr"}
	functioncall	$const4 11 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp5 Transmission $const2 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp4 $tmp5 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:34
#   float diffuse_weight = (1.0 - clamp(Metallic, 0.0, 1.0)) * (1.0 - clamp(Transmission, 0.0, 1.0));
	sub		$tmp6 $const2 $tmp4 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{34} %argrw{"wrr"}
	mul		diffuse_weight $tmp3 $tmp6 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:35
#   float final_transmission = clamp(Transmission, 0.0, 1.0) * (1.0 - clamp(Metallic, 0.0, 1.0));
	functioncall	$const4 16 	%line{35} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp8 Transmission $const2 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp7 $tmp8 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:35
#   float final_transmission = clamp(Transmission, 0.0, 1.0) * (1.0 - clamp(Metallic, 0.0, 1.0));
	functioncall	$const4 19 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{35} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp10 Metallic $const2 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp9 $tmp10 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:35
#   float final_transmission = clamp(Transmission, 0.0, 1.0) * (1.0 - clamp(Metallic, 0.0, 1.0));
	sub		$tmp11 $const2 $tmp9 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{35} %argrw{"wrr"}
	mul		final_transmission $tmp7 $tmp11 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:36
#   float specular_weight = (1.0 - final_transmission);
	sub		specular_weight $const2 final_transmission 	%line{36} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:38
#   vector T = Tangent;
	assign		T Tangent 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:40
#   float m_cdlum = luminance(BaseColor);
	luminance	m_cdlum BaseColor 	%line{40} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:41
#   color m_ctint = m_cdlum > 0.0 ? BaseColor / m_cdlum :
	gt		$tmp12 m_cdlum $const3 	%line{41} %argrw{"wrr"}
	if		$tmp12 27 28 	%argrw{"r"}
	div		m_ctint BaseColor m_cdlum 	%argrw{"wrr"}
	assign		m_ctint $const5 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:45
#   if (AnisotropicRotation != 0.0)
	neq		$tmp13 AnisotropicRotation $const3 	%line{45} %argrw{"wrr"}
	if		$tmp13 82 82 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:46
#     T = rotate(T, AnisotropicRotation * M_2PI, point(0.0, 0.0, 0.0), Normal);
	mul		$tmp14 AnisotropicRotation $const6 	%line{46} %argrw{"wrr"}
	functioncall	$const8 82 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp16 Normal $const7 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp16 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp14 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const2 ___257_cosang 	%line{273} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const9 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const10 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const11 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp17 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp18 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp19 $const2 $tmp18 	%argrw{"wrr"}
	mul		$tmp20 $tmp19 ___257_cosang 	%argrw{"wrr"}
	add		$tmp21 $tmp17 $tmp20 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp22 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp23 $tmp22 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp24 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp25 $tmp23 $tmp24 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp26 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp27 $tmp26 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp28 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp29 $tmp27 $tmp28 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp30 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp31 $tmp30 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp32 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp34 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp35 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp36 $const2 $tmp35 	%argrw{"wrr"}
	mul		$tmp37 $tmp36 ___257_cosang 	%argrw{"wrr"}
	add		$tmp38 $tmp34 $tmp37 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp39 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp40 $tmp39 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp41 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp42 $tmp40 $tmp41 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp43 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp44 $tmp43 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp45 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp46 $tmp44 $tmp45 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp47 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp48 $tmp47 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp49 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp50 $tmp48 $tmp49 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp51 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp52 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp53 $const2 $tmp52 	%argrw{"wrr"}
	mul		$tmp54 $tmp53 ___257_cosang 	%argrw{"wrr"}
	add		$tmp55 $tmp51 $tmp54 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp21 $tmp25 $tmp29 $const3 $tmp33 $tmp38 $tmp42 $const3 $tmp46 $tmp50 $tmp55 $const3 $const3 $const3 $const3 $const2 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp57 T $const7 	%line{288} %argrw{"wrr"}
	transformv	$tmp56 ___257_M $tmp57 	%argrw{"wrr"}
	add		T $tmp56 $const7 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:48
#   if (diffuse_weight > 1e-5) {
	gt		$tmp58 diffuse_weight $const1 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{48} %argrw{"wrr"}
	if		$tmp58 106 106 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:49
#     if (Subsurface > 1e-5) {
	gt		$tmp59 Subsurface $const1 	%line{49} %argrw{"wrr"}
	if		$tmp59 93 95 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:50
#       color mixed_ss_base_color = SubsurfaceColor * Subsurface + BaseColor * (1.0 - Subsurface);
	mul		$tmp60 SubsurfaceColor Subsurface 	%line{50} %argrw{"wrr"}
	sub		$tmp61 $const2 Subsurface 	%argrw{"wrr"}
	mul		$tmp62 BaseColor $tmp61 	%argrw{"wrr"}
	add		___372_mixed_ss_base_color $tmp60 $tmp62 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:54
#                                           Subsurface * SubsurfaceRadius,
	mul		$tmp64 Subsurface SubsurfaceRadius 	%line{54} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:52
#       BSDF = mixed_ss_base_color * bssrdf(subsurface_method,
	closure		$tmp63 $const15 subsurface_method Normal $tmp64 ___372_mixed_ss_base_color $const12 Roughness $const13 SubsurfaceIOR $const14 SubsurfaceAnisotropy 	%line{52} %argrw{"wrrrrrrrrrrr"}
	mul		BSDF $tmp63 ___372_mixed_ss_base_color 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:64
#       BSDF = BaseColor * principled_diffuse(Normal, Roughness);
	closure		$tmp65 $const16 Normal Roughness 	%line{64} %argrw{"wrrr"}
	mul		BSDF $tmp65 BaseColor 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:67
#     if (Sheen > 1e-5) {
	gt		$tmp66 Sheen $const1 	%line{67} %argrw{"wrr"}
	if		$tmp66 105 105 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:68
#       color sheen_color = color(1.0, 1.0, 1.0) * (1.0 - SheenTint) + m_ctint * SheenTint;
	sub		$tmp68 $const2 SheenTint 	%line{68} %argrw{"wrr"}
	mul		$tmp69 $const5 $tmp68 	%argrw{"wrr"}
	mul		$tmp70 m_ctint SheenTint 	%argrw{"wrr"}
	add		___374_sheen_color $tmp69 $tmp70 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:70
#       BSDF = BSDF + sheen_color * Sheen * principled_sheen(Normal);
	closure		$tmp71 $const17 Normal 	%line{70} %argrw{"wrr"}
	mul		$tmp72 ___374_sheen_color Sheen 	%argrw{"wrr"}
	mul		$tmp73 $tmp71 $tmp72 	%argrw{"wrr"}
	add		BSDF BSDF $tmp73 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:73
#     BSDF = BSDF * diffuse_weight;
	mul		BSDF BSDF diffuse_weight 	%line{73} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:76
#   if (specular_weight > 1e-5) {
	gt		$tmp74 specular_weight $const1 	%line{76} %argrw{"wrr"}
	if		$tmp74 147 147 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:77
#     float aspect = sqrt(1.0 - Anisotropic * 0.9);
	mul		$tmp75 Anisotropic $const18 	%line{77} %argrw{"wrr"}
	sub		$tmp76 $const2 $tmp75 	%argrw{"wrr"}
	sqrt		___375_aspect $tmp76 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:78
#     float r2 = Roughness * Roughness;
	mul		___375_r2 Roughness Roughness 	%line{78} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:80
#     float alpha_x = r2 / aspect;
	div		___375_alpha_x ___375_r2 ___375_aspect 	%line{80} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:81
#     float alpha_y = r2 * aspect;
	mul		___375_alpha_y ___375_r2 ___375_aspect 	%line{81} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:83
#     color tmp_col = color(1.0, 1.0, 1.0) * (1.0 - SpecularTint) + m_ctint * SpecularTint;
	sub		$tmp78 $const2 SpecularTint 	%line{83} %argrw{"wrr"}
	mul		$tmp79 $const5 $tmp78 	%argrw{"wrr"}
	mul		$tmp80 m_ctint SpecularTint 	%argrw{"wrr"}
	add		___375_tmp_col $tmp79 $tmp80 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:85
#     color Cspec0 = (Specular * 0.08 * tmp_col) * (1.0 - Metallic) + BaseColor * Metallic;
	mul		$tmp81 Specular $const19 	%line{85} %argrw{"wrr"}
	mul		$tmp82 $tmp81 ___375_tmp_col 	%argrw{"wrr"}
	sub		$tmp83 $const2 Metallic 	%argrw{"wrr"}
	mul		$tmp84 $tmp82 $tmp83 	%argrw{"wrr"}
	mul		$tmp85 BaseColor Metallic 	%argrw{"wrr"}
	add		___375_Cspec0 $tmp84 $tmp85 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:87
#     if (distribution == "GGX" || Roughness <= 0.075) {
	eq		$tmp86 distribution $const20 	%line{87} %argrw{"wrr"}
	neq		$tmp87 $tmp86 $const9 	%argrw{"wrr"}
	if		$tmp87 127 130 	%argrw{"r"}
	le		$tmp88 Roughness $const21 	%argrw{"wrr"}
	neq		$tmp89 $tmp88 $const9 	%argrw{"wrr"}
	assign		$tmp87 $tmp89 	%argrw{"wr"}
	if		$tmp87 139 147 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:93
#                                                      (2.0 / (1.0 - sqrt(0.08 * Specular))) - 1.0,
	mul		$tmp92 $const19 Specular 	%line{93} %argrw{"wrr"}
	sqrt		$tmp91 $tmp92 	%argrw{"wr"}
	sub		$tmp93 $const2 $tmp91 	%argrw{"wrr"}
	div		$tmp94 $const22 $tmp93 	%argrw{"wrr"}
	sub		$tmp95 $tmp94 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:89
#                         microfacet_ggx_aniso_fresnel(Normal,
	closure		$tmp90 $const23 Normal T ___375_alpha_x ___375_alpha_y $tmp95 BaseColor ___375_Cspec0 	%line{89} %argrw{"wrrrrrrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:88
#       BSDF = BSDF + specular_weight *
	mul		$tmp96 $tmp90 specular_weight 	%line{88} %argrw{"wrr"}
	add		BSDF BSDF $tmp96 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:103
#                                           (2.0 / (1.0 - sqrt(0.08 * Specular))) - 1.0,
	mul		$tmp99 $const19 Specular 	%line{103} %argrw{"wrr"}
	sqrt		$tmp98 $tmp99 	%argrw{"wr"}
	sub		$tmp100 $const2 $tmp98 	%argrw{"wrr"}
	div		$tmp101 $const22 $tmp100 	%argrw{"wrr"}
	sub		$tmp102 $tmp101 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:98
#       BSDF = BSDF + specular_weight * microfacet_multi_ggx_aniso_fresnel(
	closure		$tmp97 $const24 Normal T ___375_alpha_x ___375_alpha_y $tmp102 BaseColor ___375_Cspec0 	%line{98} %argrw{"wrrrrrrrr"}
	mul		$tmp103 $tmp97 specular_weight 	%argrw{"wrr"}
	add		BSDF BSDF $tmp103 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:109
#   if (final_transmission > 1e-5) {
	gt		$tmp104 final_transmission $const1 	%line{109} %argrw{"wrr"}
	if		$tmp104 217 217 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:110
#     color Cspec0 = BaseColor * SpecularTint + color(1.0, 1.0, 1.0) * (1.0 - SpecularTint);
	mul		$tmp105 BaseColor SpecularTint 	%line{110} %argrw{"wrr"}
	sub		$tmp107 $const2 SpecularTint 	%argrw{"wrr"}
	mul		$tmp108 $const5 $tmp107 	%argrw{"wrr"}
	add		___378_Cspec0 $tmp105 $tmp108 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:111
#     float eta = backfacing() ? 1.0 / f : f;
	backfacing	$tmp109 	%line{111} %argrw{"w"}
	if		$tmp109 156 157 	%argrw{"r"}
	div		___378_eta $const2 f 	%argrw{"wrr"}
	assign		___378_eta f 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:113
#     if (distribution == "GGX" || Roughness <= 5e-2) {
	eq		$tmp110 distribution $const20 	%line{113} %argrw{"wrr"}
	neq		$tmp111 $tmp110 $const9 	%argrw{"wrr"}
	if		$tmp111 160 163 	%argrw{"r"}
	le		$tmp112 Roughness $const25 	%argrw{"wrr"}
	neq		$tmp113 $tmp112 $const9 	%argrw{"wrr"}
	assign		$tmp111 $tmp113 	%argrw{"wr"}
	if		$tmp111 213 217 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:114
#       float cosNO = dot(Normal, I);
	dot		___379_cosNO Normal I 	%line{114} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:115
#       float Fr = fresnel_dielectric_cos(cosNO, eta);
	functioncall	$const26 191 	%line{115} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:13
#   float c = fabs(cosi);
	fabs		___330_c ___379_cosNO 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h"} %line{13} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:14
#   float g = eta * eta - 1 + c * c;
	mul		$tmp114 ___378_eta ___378_eta 	%line{14} %argrw{"wrr"}
	sub		$tmp115 $tmp114 $const2 	%argrw{"wrr"}
	mul		$tmp116 ___330_c ___330_c 	%argrw{"wrr"}
	add		___330_g $tmp115 $tmp116 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:17
#   if (g > 0) {
	gt		$tmp117 ___330_g $const9 	%line{17} %argrw{"wrr"}
	if		$tmp117 189 190 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:18
#     g = sqrt(g);
	sqrt		___330_g ___330_g 	%line{18} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:19
#     float A = (g - c) / (g + c);
	sub		$tmp118 ___330_g ___330_c 	%line{19} %argrw{"wrr"}
	add		$tmp119 ___330_g ___330_c 	%argrw{"wrr"}
	div		___331_A $tmp118 $tmp119 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:20
#     float B = (c * (g + c) - 1) / (c * (g - c) + 1);
	add		$tmp120 ___330_g ___330_c 	%line{20} %argrw{"wrr"}
	mul		$tmp121 ___330_c $tmp120 	%argrw{"wrr"}
	sub		$tmp122 $tmp121 $const2 	%argrw{"wrr"}
	sub		$tmp123 ___330_g ___330_c 	%argrw{"wrr"}
	mul		$tmp124 ___330_c $tmp123 	%argrw{"wrr"}
	add		$tmp125 $tmp124 $const2 	%argrw{"wrr"}
	div		___331_B $tmp122 $tmp125 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:21
#     result = 0.5 * A * A * (1 + B * B);
	mul		$tmp126 $const27 ___331_A 	%line{21} %argrw{"wrr"}
	mul		$tmp127 $tmp126 ___331_A 	%argrw{"wrr"}
	mul		$tmp128 ___331_B ___331_B 	%argrw{"wrr"}
	add		$tmp129 $const2 $tmp128 	%argrw{"wrr"}
	mul		___330_result $tmp127 $tmp129 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:24
#     result = 1.0; /* TIR (no refracted component) */
	assign		___330_result $const2 	%line{24} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_fresnel.h:26
#   return result;
	assign		___379_Fr ___330_result 	%line{26} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:117
#       float refl_roughness = Roughness;
	assign		___379_refl_roughness Roughness 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl"} %line{117} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:118
#       if (Roughness <= 1e-2)
	le		$tmp130 Roughness $const28 	%line{118} %argrw{"wrr"}
	if		$tmp130 195 195 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:119
#         refl_roughness = 0.0;
	assign		___379_refl_roughness $const3 	%line{119} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:121
#       float transmission_roughness = refl_roughness;
	assign		___379_transmission_roughness ___379_refl_roughness 	%line{121} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:122
#       if (distribution == "GGX")
	eq		$tmp131 distribution $const20 	%line{122} %argrw{"wrr"}
	if		$tmp131 202 202 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:123
#         transmission_roughness = 1.0 - (1.0 - refl_roughness) * (1.0 - TransmissionRoughness);
	sub		$tmp132 $const2 ___379_refl_roughness 	%line{123} %argrw{"wrr"}
	sub		$tmp133 $const2 TransmissionRoughness 	%argrw{"wrr"}
	mul		$tmp134 $tmp132 $tmp133 	%argrw{"wrr"}
	sub		___379_transmission_roughness $const2 $tmp134 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:128
#                            Normal, refl_roughness * refl_roughness, eta, BaseColor, Cspec0) +
	mul		$tmp136 ___379_refl_roughness ___379_refl_roughness 	%line{128} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:127
#                  (Fr * microfacet_ggx_fresnel(
	closure		$tmp135 $const29 Normal $tmp136 ___378_eta BaseColor ___378_Cspec0 	%line{127} %argrw{"wrrrrrr"}
	mul		$tmp137 $tmp135 ___379_Fr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:131
#                           Normal, transmission_roughness * transmission_roughness, eta));
	mul		$tmp139 ___379_transmission_roughness ___379_transmission_roughness 	%line{131} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:130
#                       microfacet_ggx_refraction(
	closure		$tmp138 $const30 Normal $tmp139 ___378_eta 	%line{130} %argrw{"wrrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:129
#                   (1.0 - Fr) * BaseColor *
	sub		$tmp140 $const2 ___379_Fr 	%line{129} %argrw{"wrr"}
	mul		$tmp141 $tmp140 BaseColor 	%argrw{"wrr"}
	mul		$tmp142 $tmp138 $tmp141 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:128
#                            Normal, refl_roughness * refl_roughness, eta, BaseColor, Cspec0) +
	add		$tmp143 $tmp137 $tmp142 	%line{128} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:126
#              final_transmission *
	mul		$tmp144 $tmp143 final_transmission 	%line{126} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:125
#       BSDF = BSDF +
	add		BSDF BSDF $tmp144 	%line{125} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:136
#                                       Normal, Roughness * Roughness, eta, BaseColor, Cspec0);
	mul		$tmp146 Roughness Roughness 	%line{136} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:135
#              final_transmission * microfacet_multi_ggx_glass_fresnel(
	closure		$tmp145 $const31 Normal $tmp146 ___378_eta BaseColor ___378_Cspec0 	%line{135} %argrw{"wrrrrrr"}
	mul		$tmp147 $tmp145 final_transmission 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:134
#       BSDF = BSDF +
	add		BSDF BSDF $tmp147 	%line{134} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:140
#   if (Clearcoat > 1e-5) {
	gt		$tmp148 Clearcoat $const1 	%line{140} %argrw{"wrr"}
	if		$tmp148 222 222 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:142
#                       ClearcoatNormal, Clearcoat, ClearcoatRoughness * ClearcoatRoughness);
	mul		$tmp150 ClearcoatRoughness ClearcoatRoughness 	%line{142} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_principled_bsdf.osl:141
#     BSDF = BSDF + principled_clearcoat(
	closure		$tmp149 $const32 ClearcoatNormal Clearcoat $tmp150 	%line{141} %argrw{"wrrrr"}
	add		BSDF BSDF $tmp149 	%argrw{"wrr"}
	end
