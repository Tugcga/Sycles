OpenShadingLanguage 1.00
# Compiled by oslc 1.11.17
# options: -q -O2 -IF:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders -IF:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders -o F:/Repositories/blenderRepo/build_windows_Full_x64_vc16_Release/intern/cycles/kernel/osl/shaders/node_white_noise_texture.oso
shader node_white_noise_texture
param	string	dimensions	"3D"		%read{0,57} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{17,62} %write{2147483647,-1}
param	float	W	0		%read{2,63} %write{2147483647,-1}
oparam	float	Value	0		%read{2147483647,-1} %write{2,59}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{14,82}
const	string	$const1	"1D"		%read{0,0} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	string	$const2	"hash"		%read{2,59} %write{2147483647,-1}
const	string	$const3	"hash_float_to_color"		%read{3,3} %write{2147483647,-1}
temp	float	$tmp2	%read{14,14} %write{5,5}
const	string	$const4	"hash_float_to_float"		%read{4,4} %write{2147483647,-1}
temp	float	$tmp3	%read{14,14} %write{9,9}
temp	float	$tmp4.x	%read{9,9} %write{6,6}
temp	float	$tmp4.y	%read{9,9} %write{7,7}
const	float	$const5	1		%read{7,45} %write{2147483647,-1}
const	string	$const6	"hash_vector2_to_float"		%read{8,23} %write{2147483647,-1}
temp	float	$tmp5	%read{14,14} %write{13,13}
temp	float	$tmp6.x	%read{13,13} %write{10,10}
temp	float	$tmp6.y	%read{13,13} %write{11,11}
const	float	$const7	2		%read{11,52} %write{2147483647,-1}
const	string	$const8	"2D"		%read{15,15} %write{2147483647,-1}
temp	int	$tmp7	%read{16,16} %write{15,15}
const	int	$const9	0		%read{17,60} %write{2147483647,-1}
temp	float	$tmp8	%read{19,19} %write{17,17}
const	int	$const10	1		%read{18,61} %write{2147483647,-1}
temp	float	$tmp9	%read{19,19} %write{18,18}
temp	float	$tmp10.x	%read{24,28} %write{20,20}
temp	float	$tmp10.y	%read{24,28} %write{21,21}
const	string	$const11	"hash_vector2_to_color"		%read{22,22} %write{2147483647,-1}
temp	float	$tmp11	%read{31,31} %write{24,24}
temp	float	$tmp12	%read{31,31} %write{27,27}
temp	point	$tmp13	%read{27,27} %write{25,25}
const	string	$const12	"hash_vector3_to_float"		%read{26,40} %write{2147483647,-1}
temp	float	$tmp14	%read{31,31} %write{30,30}
temp	point	$tmp15	%read{30,30} %write{28,28}
const	string	$const13	"3D"		%read{32,32} %write{2147483647,-1}
temp	int	$tmp16	%read{33,33} %write{32,32}
temp	point	$tmp17	%read{41,51} %write{38,38}
temp	float	$tmp18	%read{38,38} %write{35,35}
temp	float	$tmp19	%read{38,38} %write{36,36}
const	int	$const14	2		%read{37,62} %write{2147483647,-1}
temp	float	$tmp20	%read{38,38} %write{37,37}
const	string	$const15	"hash_vector3_to_color"		%read{39,39} %write{2147483647,-1}
temp	float	$tmp21	%read{56,56} %write{41,41}
temp	float	$tmp22	%read{56,56} %write{48,48}
temp	float	$tmp23.x	%read{47,47} %write{42,42}
temp	float	$tmp23.y	%read{47,47} %write{43,43}
temp	float	$tmp23.z	%read{47,47} %write{44,44}
temp	float	$tmp23.w	%read{48,48} %write{45,45}
const	string	$const16	"hash_vector4_to_float"		%read{46,79} %write{2147483647,-1}
temp	point	$tmp24	%read{48,48} %write{47,47}
temp	float	$tmp25	%read{56,56} %write{55,55}
temp	float	$tmp26.x	%read{54,54} %write{49,49}
temp	float	$tmp26.y	%read{54,54} %write{50,50}
temp	float	$tmp26.z	%read{54,54} %write{51,51}
temp	float	$tmp26.w	%read{55,55} %write{52,52}
temp	point	$tmp27	%read{55,55} %write{54,54}
const	string	$const17	"4D"		%read{57,57} %write{2147483647,-1}
temp	int	$tmp28	%read{58,58} %write{57,57}
temp	float	$tmp29.x	%read{66,78} %write{60,60}
temp	float	$tmp29.y	%read{66,77} %write{61,61}
temp	float	$tmp29.z	%read{66,76} %write{62,62}
temp	float	$tmp29.w	%read{67,75} %write{63,63}
const	string	$const18	"hash_vector4_to_color"		%read{64,64} %write{2147483647,-1}
temp	float	$tmp30	%read{82,82} %write{67,67}
temp	point	$tmp31	%read{67,67} %write{66,66}
temp	float	$tmp32	%read{82,82} %write{74,74}
temp	float	$tmp33.x	%read{73,73} %write{68,68}
temp	float	$tmp33.y	%read{73,73} %write{69,69}
temp	float	$tmp33.z	%read{73,73} %write{70,70}
temp	float	$tmp33.w	%read{74,74} %write{71,71}
temp	point	$tmp34	%read{74,74} %write{73,73}
temp	float	$tmp35	%read{82,82} %write{81,81}
temp	float	$tmp36.x	%read{80,80} %write{75,75}
temp	float	$tmp36.y	%read{80,80} %write{76,76}
temp	float	$tmp36.z	%read{80,80} %write{77,77}
temp	float	$tmp36.w	%read{81,81} %write{78,78}
temp	point	$tmp37	%read{81,81} %write{80,80}
const	string	$const19	"%s"		%read{83,83} %write{2147483647,-1}
const	string	$const20	"Unknown dimension!"		%read{83,83} %write{2147483647,-1}
code ___main___
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:17
#   if (dimensions == "1D") {
	eq		$tmp1 dimensions $const1 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl"} %line{17} %argrw{"wrr"}
	if		$tmp1 15 84 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:18
#     Value = noise("hash", W);
	noise		Value $const2 W 	%line{18} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:19
#     Color = hash_float_to_color(W);
	functioncall	$const3 15 	%line{19} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:58
#   return color(hash_float_to_float(k),
	functioncall	$const4 6 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h"} %line{58} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:14
#   return hashnoise(k);
	hashnoise	$tmp2 W 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:59
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp4.x W 	%line{59} %argrw{"wr"}
	assign		$tmp4.y $const5 	%argrw{"wr"}
	functioncall	$const6 10 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:19
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp3 $tmp4.x $tmp4.y 	%line{19} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:60
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp6.x W 	%line{60} %argrw{"wr"}
	assign		$tmp6.y $const7 	%argrw{"wr"}
	functioncall	$const6 14 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:19
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp5 $tmp6.x $tmp6.y 	%line{19} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:58
#   return color(hash_float_to_float(k),
	color		Color $tmp2 $tmp3 $tmp5 	%line{58} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:21
#   else if (dimensions == "2D") {
	eq		$tmp7 dimensions $const8 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl"} %line{21} %argrw{"wrr"}
	if		$tmp7 32 84 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:22
#     Value = noise("hash", Vector[0], Vector[1]);
	compref		$tmp8 Vector $const9 	%line{22} %argrw{"wrr"}
	compref		$tmp9 Vector $const10 	%argrw{"wrr"}
	noise		Value $const2 $tmp8 $tmp9 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:23
#     Color = hash_vector2_to_color(vector2(Vector[0], Vector[1]));
	compref		$tmp10.x Vector $const9 	%line{23} %argrw{"wrr"}
	compref		$tmp10.y Vector $const10 	%argrw{"wrr"}
	functioncall	$const11 32 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:65
#   return color(hash_vector2_to_float(k),
	functioncall	$const6 25 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h"} %line{65} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:19
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp11 $tmp10.x $tmp10.y 	%line{19} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:66
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp13 $tmp10.x $tmp10.y $const5 	%line{66} %argrw{"wrrr"}
	functioncall	$const12 28 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:24
#   return hashnoise(k);
	hashnoise	$tmp12 $tmp13 	%line{24} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:67
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp15 $tmp10.x $tmp10.y $const7 	%line{67} %argrw{"wrrr"}
	functioncall	$const12 31 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:24
#   return hashnoise(k);
	hashnoise	$tmp14 $tmp15 	%line{24} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:65
#   return color(hash_vector2_to_float(k),
	color		Color $tmp11 $tmp12 $tmp14 	%line{65} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:25
#   else if (dimensions == "3D") {
	eq		$tmp16 dimensions $const13 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl"} %line{25} %argrw{"wrr"}
	if		$tmp16 57 84 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:26
#     Value = noise("hash", Vector);
	noise		Value $const2 Vector 	%line{26} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:27
#     Color = hash_vector3_to_color(vector3(Vector[0], Vector[1], Vector[2]));
	compref		$tmp18 Vector $const9 	%line{27} %argrw{"wrr"}
	compref		$tmp19 Vector $const10 	%argrw{"wrr"}
	compref		$tmp20 Vector $const14 	%argrw{"wrr"}
	point		$tmp17 $tmp18 $tmp19 $tmp20 	%argrw{"wrrr"}
	functioncall	$const15 57 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:72
#   return color(hash_vector3_to_float(k),
	functioncall	$const12 42 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h"} %line{72} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:24
#   return hashnoise(k);
	hashnoise	$tmp21 $tmp17 	%line{24} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:73
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp23.x $tmp17 $const9 	%line{73} %argrw{"wrr"}
	compref		$tmp23.y $tmp17 $const10 	%argrw{"wrr"}
	compref		$tmp23.z $tmp17 $const14 	%argrw{"wrr"}
	assign		$tmp23.w $const5 	%argrw{"wr"}
	functioncall	$const16 49 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:29
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp24 $tmp23.x $tmp23.y $tmp23.z 	%line{29} %argrw{"wrrr"}
	hashnoise	$tmp22 $tmp24 $tmp23.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:74
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp26.x $tmp17 $const9 	%line{74} %argrw{"wrr"}
	compref		$tmp26.y $tmp17 $const10 	%argrw{"wrr"}
	compref		$tmp26.z $tmp17 $const14 	%argrw{"wrr"}
	assign		$tmp26.w $const7 	%argrw{"wr"}
	functioncall	$const16 56 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:29
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp27 $tmp26.x $tmp26.y $tmp26.z 	%line{29} %argrw{"wrrr"}
	hashnoise	$tmp25 $tmp27 $tmp26.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:72
#   return color(hash_vector3_to_float(k),
	color		Color $tmp21 $tmp22 $tmp25 	%line{72} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:29
#   else if (dimensions == "4D") {
	eq		$tmp28 dimensions $const17 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl"} %line{29} %argrw{"wrr"}
	if		$tmp28 83 84 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:30
#     Value = noise("hash", Vector, W);
	noise		Value $const2 Vector W 	%line{30} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:31
#     Color = hash_vector4_to_color(vector4(Vector[0], Vector[1], Vector[2], W));
	compref		$tmp29.x Vector $const9 	%line{31} %argrw{"wrr"}
	compref		$tmp29.y Vector $const10 	%argrw{"wrr"}
	compref		$tmp29.z Vector $const14 	%argrw{"wrr"}
	assign		$tmp29.w W 	%argrw{"wr"}
	functioncall	$const18 83 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:79
#   return color(hash_vector4_to_float(k),
	functioncall	$const16 68 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h"} %line{79} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:29
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp31 $tmp29.x $tmp29.y $tmp29.z 	%line{29} %argrw{"wrrr"}
	hashnoise	$tmp30 $tmp31 $tmp29.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:80
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp33.x $tmp29.z 	%line{80} %argrw{"wr"}
	assign		$tmp33.y $tmp29.x 	%argrw{"wr"}
	assign		$tmp33.z $tmp29.w 	%argrw{"wr"}
	assign		$tmp33.w $tmp29.y 	%argrw{"wr"}
	functioncall	$const16 75 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:29
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp34 $tmp33.x $tmp33.y $tmp33.z 	%line{29} %argrw{"wrrr"}
	hashnoise	$tmp32 $tmp34 $tmp33.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:81
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp36.x $tmp29.w 	%line{81} %argrw{"wr"}
	assign		$tmp36.y $tmp29.z 	%argrw{"wr"}
	assign		$tmp36.z $tmp29.y 	%argrw{"wr"}
	assign		$tmp36.w $tmp29.x 	%argrw{"wr"}
	functioncall	$const16 82 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:29
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp37 $tmp36.x $tmp36.y $tmp36.z 	%line{29} %argrw{"wrrr"}
	hashnoise	$tmp35 $tmp37 $tmp36.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_hash.h:79
#   return color(hash_vector4_to_float(k),
	color		Color $tmp30 $tmp32 $tmp35 	%line{79} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl:34
#     warning("%s", "Unknown dimension!");
	warning		$const19 $const20 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_white_noise_texture.osl"} %line{34} %argrw{"rr"}
	end
