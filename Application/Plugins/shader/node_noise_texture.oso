OpenShadingLanguage 1.00
# Compiled by oslc 1.11.17
# options: -q -O2 -IF:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders -IF:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders -o F:/Repositories/blenderRepo/build_windows_Full_x64_vc16_Release/intern/cycles/kernel/osl/shaders/node_noise_texture.oso
shader node_noise_texture
param	int	use_mapping	0		%read{1,1} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{2,2} %write{2147483647,-1}
param	string	dimensions	"3D"		%read{5,726} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{0,0} %write{2147483647,-1}
param	float	W	0		%read{4,4} %write{2147483647,-1}
param	float	Scale	5		%read{3,4} %write{2147483647,-1}
param	float	Detail	2		%read{31,1044} %write{2147483647,-1}
param	float	Roughness	0.5		%read{50,1073} %write{2147483647,-1}
param	float	Distortion	0		%read{9,846} %write{2147483647,-1}
oparam	float	Fac	0		%read{2147483647,-1} %write{201,1114}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{200,1113}
local	float	___442_f	%read{36,187} %write{36,182}
local	float	___443_f	%read{261,452} %write{261,447}
local	float	___444_f	%read{546,711} %write{546,706}
local	float	___445_f	%read{863,1100} %write{863,1095}
local	float	___446_f	%read{18,22} %write{17,17}
local	float	___447_f	%read{223,245} %write{222,240}
local	float	___448_f	%read{487,531} %write{486,526}
local	float	___449_f	%read{760,845} %write{759,840}
local	float	___450_fscale	%read{36,180} %write{26,175}
local	float	___450_amp	%read{36,191} %write{27,175}
local	float	___450_maxamp	%read{36,198} %write{28,175}
local	float	___450_sum	%read{36,198} %write{29,190}
local	float	___450_octaves	%read{33,177} %write{32,152}
local	int	___450_n	%read{36,175} %write{33,153}
local	int	___451_i	%read{36,175} %write{35,175}
local	float	___452_t	%read{36,175} %write{36,175}
local	float	___450_rmd	%read{58,195} %write{57,177}
local	float	___453_t	%read{68,188} %write{65,187}
local	float	___453_sum2	%read{72,195} %write{69,192}
local	float	___455_fscale	%read{261,442} %write{251,435}
local	float	___455_amp	%read{261,456} %write{252,435}
local	float	___455_maxamp	%read{261,463} %write{253,435}
local	float	___455_sum	%read{261,463} %write{254,455}
local	float	___455_octaves	%read{258,437} %write{257,407}
local	int	___455_n	%read{261,435} %write{258,408}
local	int	___456_i	%read{261,435} %write{260,435}
local	float	___457_t	%read{261,435} %write{261,435}
local	float	___455_rmd	%read{288,460} %write{287,437}
local	float	___458_t	%read{303,453} %write{300,452}
local	float	___458_sum2	%read{307,460} %write{304,457}
local	float	___460_fscale	%read{546,704} %write{536,699}
local	float	___460_amp	%read{546,715} %write{537,699}
local	float	___460_maxamp	%read{546,722} %write{538,699}
local	float	___460_sum	%read{546,722} %write{539,714}
local	float	___460_octaves	%read{543,701} %write{542,676}
local	int	___460_n	%read{546,699} %write{543,677}
local	int	___461_i	%read{546,699} %write{545,699}
local	float	___462_t	%read{546,699} %write{546,699}
local	float	___460_rmd	%read{568,719} %write{567,701}
local	float	___463_t	%read{578,712} %write{575,711}
local	float	___463_sum2	%read{582,719} %write{579,716}
local	float	___465_fscale	%read{863,1087} %write{853,1078}
local	float	___465_amp	%read{863,1104} %write{854,1078}
local	float	___465_maxamp	%read{863,1111} %write{855,1078}
local	float	___465_sum	%read{863,1111} %write{856,1103}
local	float	___465_octaves	%read{860,1080} %write{859,1045}
local	int	___465_n	%read{863,1078} %write{860,1046}
local	int	___466_i	%read{863,1078} %write{862,1078}
local	float	___467_t	%read{863,1078} %write{863,1078}
local	float	___465_rmd	%read{895,1108} %write{894,1080}
local	float	___468_t	%read{915,1101} %write{912,1100}
local	float	___468_sum2	%read{919,1108} %write{916,1105}
local	float	___512_p	%read{15,144} %write{8,24}
local	float	___512_value	%read{200,201} %write{76,78}
local	float	___514_p.x	%read{219,398} %write{207,248} %mystruct{___514_p} %mystructfield{0}
local	float	___514_p.y	%read{220,399} %write{208,249} %mystruct{___514_p} %mystructfield{1}
local	float	___514_value	%read{465,466} %write{311,313}
local	point	___516_p	%read{484,668} %write{470,534}
local	float	___516_value	%read{724,725} %write{586,588}
local	float	___518_p.x	%read{753,1034} %write{733,848} %mystruct{___518_p} %mystructfield{0}
local	float	___518_p.y	%read{754,1035} %write{734,849} %mystruct{___518_p} %mystructfield{1}
local	float	___518_p.z	%read{755,1036} %write{735,850} %mystruct{___518_p} %mystructfield{2}
local	float	___518_p.w	%read{756,1037} %write{736,851} %mystruct{___518_p} %mystructfield{3}
local	float	___518_value	%read{1113,1114} %write{923,925}
local	point	p	%read{2,730} %write{0,3}
local	float	w	%read{8,731} %write{4,4}
const	string	$const1	"1D"		%read{5,5} %write{2147483647,-1}
temp	int	$tmp1	%read{6,6} %write{5,5}
const	string	$const2	"noise_texture"		%read{7,732} %write{2147483647,-1}
const	float	$const3	0		%read{9,1081} %write{2147483647,-1}
temp	int	$tmp2	%read{10,10} %write{9,9}
temp	float	$tmp3	%read{23,23} %write{20,22}
temp	float	$tmp4	%read{15,15} %write{14,14}
const	string	$const4	"random_float_offset"		%read{11,140} %write{2147483647,-1}
const	float	$const5	100		%read{13,1032} %write{2147483647,-1}
temp	float	$tmp5	%read{13,13} %write{12,12}
const	string	$const6	"hash"		%read{12,1030} %write{2147483647,-1}
temp	float	$tmp6	%read{14,14} %write{13,13}
temp	float	$tmp7	%read{17,17} %write{15,15}
const	string	$const7	"safe_snoise"		%read{16,838} %write{2147483647,-1}
const	string	$const8	"snoise"		%read{17,840} %write{2147483647,-1}
temp	int	$tmp8	%read{19,19} %write{18,18}
temp	float	$tmp9	%read{24,24} %write{23,23}
const	string	$const9	"fractal_noise"		%read{25,1038} %write{2147483647,-1}
const	float	$const10	1		%read{26,1106} %write{2147483647,-1}
const	float	$const11	15		%read{31,1044} %write{2147483647,-1}
const	string	$const12	"clamp"		%read{30,1072} %write{2147483647,-1}
temp	float	$tmp10	%read{32,32} %write{31,31}
const	int	$const13	0		%read{35,1050} %write{2147483647,-1}
temp	int	$tmp11	%read{36,55} %write{36,55}
temp	int	$tmp12	%read{34,55} %write{35,55}
temp	float	$tmp13	%read{36,55} %write{36,55}
const	string	$const14	"safe_noise"		%read{39,1093} %write{2147483647,-1}
const	string	$const15	"noise"		%read{40,1095} %write{2147483647,-1}
temp	int	$tmp14	%read{36,55} %write{36,55}
const	float	$const16	0.5		%read{43,1098} %write{2147483647,-1}
temp	float	$tmp15	%read{36,55} %write{36,55}
temp	float	$tmp16	%read{36,55} %write{36,55}
temp	float	$tmp17	%read{36,55} %write{36,55}
const	float	$const17	2		%read{53,1076} %write{2147483647,-1}
const	int	$const18	1		%read{55,1078} %write{2147483647,-1}
temp	int	$tmp18	%read{2147483647,-1} %write{36,55}
temp	float	$tmp19	%read{57,57} %write{56,56}
temp	int	$tmp20	%read{59,59} %write{58,58}
temp	float	$tmp21	%read{62,62} %write{60,60}
temp	int	$tmp22	%read{64,64} %write{63,63}
temp	float	$tmp23	%read{69,69} %write{68,68}
temp	float	$tmp24	%read{72,72} %write{71,71}
temp	float	$tmp25	%read{74,74} %write{73,73}
temp	float	$tmp26	%read{76,76} %write{74,74}
temp	float	$tmp27	%read{76,76} %write{75,75}
temp	float	$tmp28	%read{200,200} %write{136,138}
temp	float	$tmp29	%read{84,84} %write{83,83}
temp	float	$tmp30	%read{82,82} %write{81,81}
temp	float	$tmp31	%read{83,83} %write{82,82}
temp	float	$tmp32	%read{96,120} %write{84,84}
temp	float	$tmp33	%read{92,92} %write{91,91}
temp	int	$tmp34	%read{96,115} %write{96,115}
temp	int	$tmp35	%read{94,115} %write{95,115}
temp	float	$tmp36	%read{96,115} %write{96,115}
temp	int	$tmp37	%read{96,115} %write{96,115}
temp	float	$tmp38	%read{96,115} %write{96,115}
temp	float	$tmp39	%read{96,115} %write{96,115}
temp	float	$tmp40	%read{96,115} %write{96,115}
temp	int	$tmp41	%read{2147483647,-1} %write{96,115}
temp	float	$tmp42	%read{117,117} %write{116,116}
temp	int	$tmp43	%read{119,119} %write{118,118}
temp	float	$tmp44	%read{122,122} %write{120,120}
temp	int	$tmp45	%read{124,124} %write{123,123}
temp	float	$tmp46	%read{129,129} %write{128,128}
temp	float	$tmp47	%read{132,132} %write{131,131}
temp	float	$tmp48	%read{134,134} %write{133,133}
temp	float	$tmp49	%read{136,136} %write{134,134}
temp	float	$tmp50	%read{136,136} %write{135,135}
temp	float	$tmp51	%read{200,200} %write{196,198}
temp	float	$tmp52	%read{144,144} %write{143,143}
temp	float	$tmp53	%read{142,142} %write{141,141}
temp	float	$tmp54	%read{143,143} %write{142,142}
temp	float	$tmp55	%read{156,180} %write{144,144}
temp	float	$tmp56	%read{152,152} %write{151,151}
temp	int	$tmp57	%read{156,175} %write{156,175}
temp	int	$tmp58	%read{154,175} %write{155,175}
temp	float	$tmp59	%read{156,175} %write{156,175}
temp	int	$tmp60	%read{156,175} %write{156,175}
temp	float	$tmp61	%read{156,175} %write{156,175}
temp	float	$tmp62	%read{156,175} %write{156,175}
temp	float	$tmp63	%read{156,175} %write{156,175}
temp	int	$tmp64	%read{2147483647,-1} %write{156,175}
temp	float	$tmp65	%read{177,177} %write{176,176}
temp	int	$tmp66	%read{179,179} %write{178,178}
temp	float	$tmp67	%read{182,182} %write{180,180}
temp	int	$tmp68	%read{184,184} %write{183,183}
temp	float	$tmp69	%read{189,189} %write{188,188}
temp	float	$tmp70	%read{192,192} %write{191,191}
temp	float	$tmp71	%read{194,194} %write{193,193}
temp	float	$tmp72	%read{196,196} %write{194,194}
temp	float	$tmp73	%read{196,196} %write{195,195}
const	string	$const19	"2D"		%read{202,202} %write{2147483647,-1}
temp	int	$tmp74	%read{203,203} %write{202,202}
temp	float	$tmp75.x	%read{207,207} %write{204,204}
temp	float	$tmp75.y	%read{208,208} %write{205,205}
temp	int	$tmp76	%read{210,210} %write{209,209}
temp	float	$tmp77.x	%read{248,248} %write{228,228}
temp	float	$tmp77.y	%read{249,249} %write{246,246}
temp	float	$tmp78	%read{228,228} %write{225,227}
temp	float	$tmp79.x	%read{222,222} %write{219,219}
temp	float	$tmp79.y	%read{222,222} %write{220,220}
temp	float	$tmp80.x	%read{219,219} %write{214,214}
temp	float	$tmp80.y	%read{220,220} %write{217,217}
const	string	$const20	"random_vector2_offset"		%read{211,390} %write{2147483647,-1}
temp	float	$tmp81	%read{213,213} %write{212,212}
temp	float	$tmp82	%read{214,214} %write{213,213}
temp	float	$tmp83	%read{216,216} %write{215,215}
temp	float	$tmp84	%read{217,217} %write{216,216}
const	string	$const21	"__operator__add__"		%read{218,1033} %write{2147483647,-1}
temp	int	$tmp85	%read{224,224} %write{223,223}
temp	float	$tmp86	%read{246,246} %write{243,245}
temp	float	$tmp87.x	%read{240,240} %write{237,237}
temp	float	$tmp87.y	%read{240,240} %write{238,238}
temp	float	$tmp88.x	%read{237,237} %write{232,232}
temp	float	$tmp88.y	%read{238,238} %write{235,235}
temp	float	$tmp89	%read{231,231} %write{230,230}
temp	float	$tmp90	%read{232,232} %write{231,231}
temp	float	$tmp91	%read{234,234} %write{233,233}
temp	float	$tmp92	%read{235,235} %write{234,234}
temp	int	$tmp93	%read{242,242} %write{241,241}
temp	float	$tmp94	%read{257,257} %write{256,256}
temp	int	$tmp95	%read{261,285} %write{261,285}
temp	int	$tmp96	%read{259,285} %write{260,285}
temp	float	$tmp97.x	%read{261,285} %write{261,285}
temp	float	$tmp97.y	%read{261,285} %write{261,285}
const	string	$const22	"__operator__mul__"		%read{263,1088} %write{2147483647,-1}
temp	float	$tmp98.x	%read{261,285} %write{261,285}
temp	float	$tmp98.y	%read{261,285} %write{261,285}
temp	int	$tmp99	%read{261,285} %write{261,285}
temp	float	$tmp100	%read{261,285} %write{261,285}
temp	float	$tmp101	%read{261,285} %write{261,285}
temp	float	$tmp102	%read{261,285} %write{261,285}
temp	int	$tmp103	%read{2147483647,-1} %write{261,285}
temp	float	$tmp104	%read{287,287} %write{286,286}
temp	int	$tmp105	%read{289,289} %write{288,288}
temp	float	$tmp106.x	%read{297,297} %write{294,294}
temp	float	$tmp106.y	%read{297,297} %write{295,295}
temp	float	$tmp107.x	%read{294,294} %write{291,291}
temp	float	$tmp107.y	%read{295,295} %write{292,292}
temp	int	$tmp108	%read{299,299} %write{298,298}
temp	float	$tmp109	%read{304,304} %write{303,303}
temp	float	$tmp110	%read{307,307} %write{306,306}
temp	float	$tmp111	%read{309,309} %write{308,308}
temp	float	$tmp112	%read{311,311} %write{309,309}
temp	float	$tmp113	%read{311,311} %write{310,310}
temp	float	$tmp114	%read{465,465} %write{386,388}
temp	float	$tmp115.x	%read{336,369} %write{323,323}
temp	float	$tmp115.y	%read{336,370} %write{324,324}
temp	float	$tmp116.x	%read{323,323} %write{318,318}
temp	float	$tmp116.y	%read{324,324} %write{321,321}
temp	float	$tmp117	%read{317,317} %write{316,316}
temp	float	$tmp118	%read{318,318} %write{317,317}
temp	float	$tmp119	%read{320,320} %write{319,319}
temp	float	$tmp120	%read{321,321} %write{320,320}
temp	float	$tmp121	%read{332,332} %write{331,331}
temp	int	$tmp122	%read{336,360} %write{336,360}
temp	int	$tmp123	%read{334,360} %write{335,360}
temp	float	$tmp124.x	%read{336,360} %write{336,360}
temp	float	$tmp124.y	%read{336,360} %write{336,360}
temp	float	$tmp125.x	%read{336,360} %write{336,360}
temp	float	$tmp125.y	%read{336,360} %write{336,360}
temp	int	$tmp126	%read{336,360} %write{336,360}
temp	float	$tmp127	%read{336,360} %write{336,360}
temp	float	$tmp128	%read{336,360} %write{336,360}
temp	float	$tmp129	%read{336,360} %write{336,360}
temp	int	$tmp130	%read{2147483647,-1} %write{336,360}
temp	float	$tmp131	%read{362,362} %write{361,361}
temp	int	$tmp132	%read{364,364} %write{363,363}
temp	float	$tmp133.x	%read{372,372} %write{369,369}
temp	float	$tmp133.y	%read{372,372} %write{370,370}
temp	float	$tmp134.x	%read{369,369} %write{366,366}
temp	float	$tmp134.y	%read{370,370} %write{367,367}
temp	int	$tmp135	%read{374,374} %write{373,373}
temp	float	$tmp136	%read{379,379} %write{378,378}
temp	float	$tmp137	%read{382,382} %write{381,381}
temp	float	$tmp138	%read{384,384} %write{383,383}
temp	float	$tmp139	%read{386,386} %write{384,384}
temp	float	$tmp140	%read{386,386} %write{385,385}
temp	float	$tmp141	%read{465,465} %write{461,463}
temp	float	$tmp142.x	%read{411,444} %write{398,398}
temp	float	$tmp142.y	%read{411,445} %write{399,399}
temp	float	$tmp143.x	%read{398,398} %write{393,393}
temp	float	$tmp143.y	%read{399,399} %write{396,396}
const	float	$const23	3		%read{391,1030} %write{2147483647,-1}
temp	float	$tmp144	%read{392,392} %write{391,391}
temp	float	$tmp145	%read{393,393} %write{392,392}
temp	float	$tmp146	%read{395,395} %write{394,394}
temp	float	$tmp147	%read{396,396} %write{395,395}
temp	float	$tmp148	%read{407,407} %write{406,406}
temp	int	$tmp149	%read{411,435} %write{411,435}
temp	int	$tmp150	%read{409,435} %write{410,435}
temp	float	$tmp151.x	%read{411,435} %write{411,435}
temp	float	$tmp151.y	%read{411,435} %write{411,435}
temp	float	$tmp152.x	%read{411,435} %write{411,435}
temp	float	$tmp152.y	%read{411,435} %write{411,435}
temp	int	$tmp153	%read{411,435} %write{411,435}
temp	float	$tmp154	%read{411,435} %write{411,435}
temp	float	$tmp155	%read{411,435} %write{411,435}
temp	float	$tmp156	%read{411,435} %write{411,435}
temp	int	$tmp157	%read{2147483647,-1} %write{411,435}
temp	float	$tmp158	%read{437,437} %write{436,436}
temp	int	$tmp159	%read{439,439} %write{438,438}
temp	float	$tmp160.x	%read{447,447} %write{444,444}
temp	float	$tmp160.y	%read{447,447} %write{445,445}
temp	float	$tmp161.x	%read{444,444} %write{441,441}
temp	float	$tmp161.y	%read{445,445} %write{442,442}
temp	int	$tmp162	%read{449,449} %write{448,448}
temp	float	$tmp163	%read{454,454} %write{453,453}
temp	float	$tmp164	%read{457,457} %write{456,456}
temp	float	$tmp165	%read{459,459} %write{458,458}
temp	float	$tmp166	%read{461,461} %write{459,459}
temp	float	$tmp167	%read{461,461} %write{460,460}
const	string	$const24	"3D"		%read{467,467} %write{2147483647,-1}
temp	int	$tmp168	%read{468,468} %write{467,467}
temp	int	$tmp169	%read{472,472} %write{471,471}
temp	point	$tmp170	%read{534,534} %write{533,533}
temp	float	$tmp171	%read{492,492} %write{489,491}
temp	point	$tmp172	%read{484,484} %write{483,483}
const	string	$const25	"random_vector3_offset"		%read{473,657} %write{2147483647,-1}
temp	float	$tmp173	%read{475,475} %write{474,474}
temp	float	$tmp174	%read{476,476} %write{475,475}
temp	float	$tmp175	%read{483,483} %write{476,476}
temp	float	$tmp176	%read{478,478} %write{477,477}
temp	float	$tmp177	%read{479,479} %write{478,478}
temp	float	$tmp178	%read{483,483} %write{479,479}
temp	float	$tmp179	%read{481,481} %write{480,480}
temp	float	$tmp180	%read{482,482} %write{481,481}
temp	float	$tmp181	%read{483,483} %write{482,482}
temp	point	$tmp182	%read{486,486} %write{484,484}
temp	int	$tmp183	%read{488,488} %write{487,487}
temp	float	$tmp184	%read{533,533} %write{492,492}
temp	float	$tmp185	%read{512,512} %write{509,511}
temp	point	$tmp186	%read{504,504} %write{503,503}
temp	float	$tmp187	%read{495,495} %write{494,494}
temp	float	$tmp188	%read{496,496} %write{495,495}
temp	float	$tmp189	%read{503,503} %write{496,496}
temp	float	$tmp190	%read{498,498} %write{497,497}
temp	float	$tmp191	%read{499,499} %write{498,498}
temp	float	$tmp192	%read{503,503} %write{499,499}
temp	float	$tmp193	%read{501,501} %write{500,500}
temp	float	$tmp194	%read{502,502} %write{501,501}
temp	float	$tmp195	%read{503,503} %write{502,502}
temp	point	$tmp196	%read{506,506} %write{504,504}
temp	int	$tmp197	%read{508,508} %write{507,507}
temp	float	$tmp198	%read{533,533} %write{512,512}
temp	float	$tmp199	%read{532,532} %write{529,531}
temp	point	$tmp200	%read{524,524} %write{523,523}
temp	float	$tmp201	%read{515,515} %write{514,514}
temp	float	$tmp202	%read{516,516} %write{515,515}
temp	float	$tmp203	%read{523,523} %write{516,516}
temp	float	$tmp204	%read{518,518} %write{517,517}
temp	float	$tmp205	%read{519,519} %write{518,518}
temp	float	$tmp206	%read{523,523} %write{519,519}
temp	float	$tmp207	%read{521,521} %write{520,520}
temp	float	$tmp208	%read{522,522} %write{521,521}
temp	float	$tmp209	%read{523,523} %write{522,522}
temp	point	$tmp210	%read{526,526} %write{524,524}
temp	int	$tmp211	%read{528,528} %write{527,527}
temp	float	$tmp212	%read{533,533} %write{532,532}
temp	float	$tmp213	%read{542,542} %write{541,541}
temp	int	$tmp214	%read{546,565} %write{546,565}
temp	int	$tmp215	%read{544,565} %write{545,565}
temp	point	$tmp216	%read{546,565} %write{546,565}
temp	int	$tmp217	%read{546,565} %write{546,565}
temp	float	$tmp218	%read{546,565} %write{546,565}
temp	float	$tmp219	%read{546,565} %write{546,565}
temp	float	$tmp220	%read{546,565} %write{546,565}
temp	int	$tmp221	%read{2147483647,-1} %write{546,565}
temp	float	$tmp222	%read{567,567} %write{566,566}
temp	int	$tmp223	%read{569,569} %write{568,568}
temp	point	$tmp224	%read{572,572} %write{570,570}
temp	int	$tmp225	%read{574,574} %write{573,573}
temp	float	$tmp226	%read{579,579} %write{578,578}
temp	float	$tmp227	%read{582,582} %write{581,581}
temp	float	$tmp228	%read{584,584} %write{583,583}
temp	float	$tmp229	%read{586,586} %write{584,584}
temp	float	$tmp230	%read{586,586} %write{585,585}
temp	float	$tmp231	%read{724,724} %write{653,655}
temp	point	$tmp232	%read{601,601} %write{600,600}
temp	float	$tmp233	%read{592,592} %write{591,591}
temp	float	$tmp234	%read{593,593} %write{592,592}
temp	float	$tmp235	%read{600,600} %write{593,593}
temp	float	$tmp236	%read{595,595} %write{594,594}
temp	float	$tmp237	%read{596,596} %write{595,595}
temp	float	$tmp238	%read{600,600} %write{596,596}
temp	float	$tmp239	%read{598,598} %write{597,597}
temp	float	$tmp240	%read{599,599} %write{598,598}
temp	float	$tmp241	%read{600,600} %write{599,599}
temp	point	$tmp242	%read{613,637} %write{601,601}
temp	float	$tmp243	%read{609,609} %write{608,608}
temp	int	$tmp244	%read{613,632} %write{613,632}
temp	int	$tmp245	%read{611,632} %write{612,632}
temp	point	$tmp246	%read{613,632} %write{613,632}
temp	int	$tmp247	%read{613,632} %write{613,632}
temp	float	$tmp248	%read{613,632} %write{613,632}
temp	float	$tmp249	%read{613,632} %write{613,632}
temp	float	$tmp250	%read{613,632} %write{613,632}
temp	int	$tmp251	%read{2147483647,-1} %write{613,632}
temp	float	$tmp252	%read{634,634} %write{633,633}
temp	int	$tmp253	%read{636,636} %write{635,635}
temp	point	$tmp254	%read{639,639} %write{637,637}
temp	int	$tmp255	%read{641,641} %write{640,640}
temp	float	$tmp256	%read{646,646} %write{645,645}
temp	float	$tmp257	%read{649,649} %write{648,648}
temp	float	$tmp258	%read{651,651} %write{650,650}
temp	float	$tmp259	%read{653,653} %write{651,651}
temp	float	$tmp260	%read{653,653} %write{652,652}
temp	float	$tmp261	%read{724,724} %write{720,722}
temp	point	$tmp262	%read{668,668} %write{667,667}
const	float	$const26	4		%read{658,937} %write{2147483647,-1}
temp	float	$tmp263	%read{659,659} %write{658,658}
temp	float	$tmp264	%read{660,660} %write{659,659}
temp	float	$tmp265	%read{667,667} %write{660,660}
temp	float	$tmp266	%read{662,662} %write{661,661}
temp	float	$tmp267	%read{663,663} %write{662,662}
temp	float	$tmp268	%read{667,667} %write{663,663}
temp	float	$tmp269	%read{665,665} %write{664,664}
temp	float	$tmp270	%read{666,666} %write{665,665}
temp	float	$tmp271	%read{667,667} %write{666,666}
temp	point	$tmp272	%read{680,704} %write{668,668}
temp	float	$tmp273	%read{676,676} %write{675,675}
temp	int	$tmp274	%read{680,699} %write{680,699}
temp	int	$tmp275	%read{678,699} %write{679,699}
temp	point	$tmp276	%read{680,699} %write{680,699}
temp	int	$tmp277	%read{680,699} %write{680,699}
temp	float	$tmp278	%read{680,699} %write{680,699}
temp	float	$tmp279	%read{680,699} %write{680,699}
temp	float	$tmp280	%read{680,699} %write{680,699}
temp	int	$tmp281	%read{2147483647,-1} %write{680,699}
temp	float	$tmp282	%read{701,701} %write{700,700}
temp	int	$tmp283	%read{703,703} %write{702,702}
temp	point	$tmp284	%read{706,706} %write{704,704}
temp	int	$tmp285	%read{708,708} %write{707,707}
temp	float	$tmp286	%read{713,713} %write{712,712}
temp	float	$tmp287	%read{716,716} %write{715,715}
temp	float	$tmp288	%read{718,718} %write{717,717}
temp	float	$tmp289	%read{720,720} %write{718,718}
temp	float	$tmp290	%read{720,720} %write{719,719}
const	string	$const27	"4D"		%read{726,726} %write{2147483647,-1}
temp	int	$tmp291	%read{727,727} %write{726,726}
temp	float	$tmp292.x	%read{733,733} %write{728,728}
temp	float	$tmp292.y	%read{734,734} %write{729,729}
temp	float	$tmp292.z	%read{735,735} %write{730,730}
temp	float	$tmp292.w	%read{736,736} %write{731,731}
const	int	$const28	2		%read{730,730} %write{2147483647,-1}
temp	int	$tmp293	%read{738,738} %write{737,737}
temp	float	$tmp294.x	%read{848,848} %write{765,765}
temp	float	$tmp294.y	%read{849,849} %write{792,792}
temp	float	$tmp294.z	%read{850,850} %write{819,819}
temp	float	$tmp294.w	%read{851,851} %write{846,846}
temp	float	$tmp295	%read{765,765} %write{762,764}
temp	float	$tmp296.x	%read{758,758} %write{753,753}
temp	float	$tmp296.y	%read{758,758} %write{754,754}
temp	float	$tmp296.z	%read{758,758} %write{755,755}
temp	float	$tmp296.w	%read{759,759} %write{756,756}
temp	float	$tmp297.x	%read{753,753} %write{742,742}
temp	float	$tmp297.y	%read{754,754} %write{745,745}
temp	float	$tmp297.z	%read{755,755} %write{748,748}
temp	float	$tmp297.w	%read{756,756} %write{751,751}
const	string	$const29	"random_vector4_offset"		%read{739,1020} %write{2147483647,-1}
temp	float	$tmp298	%read{741,741} %write{740,740}
temp	float	$tmp299	%read{742,742} %write{741,741}
temp	float	$tmp300	%read{744,744} %write{743,743}
temp	float	$tmp301	%read{745,745} %write{744,744}
temp	float	$tmp302	%read{747,747} %write{746,746}
temp	float	$tmp303	%read{748,748} %write{747,747}
temp	float	$tmp304	%read{750,750} %write{749,749}
temp	float	$tmp305	%read{751,751} %write{750,750}
temp	point	$tmp306	%read{759,759} %write{758,758}
temp	int	$tmp307	%read{761,761} %write{760,760}
temp	float	$tmp308	%read{792,792} %write{789,791}
temp	float	$tmp309.x	%read{785,785} %write{780,780}
temp	float	$tmp309.y	%read{785,785} %write{781,781}
temp	float	$tmp309.z	%read{785,785} %write{782,782}
temp	float	$tmp309.w	%read{786,786} %write{783,783}
temp	float	$tmp310.x	%read{780,780} %write{769,769}
temp	float	$tmp310.y	%read{781,781} %write{772,772}
temp	float	$tmp310.z	%read{782,782} %write{775,775}
temp	float	$tmp310.w	%read{783,783} %write{778,778}
temp	float	$tmp311	%read{768,768} %write{767,767}
temp	float	$tmp312	%read{769,769} %write{768,768}
temp	float	$tmp313	%read{771,771} %write{770,770}
temp	float	$tmp314	%read{772,772} %write{771,771}
temp	float	$tmp315	%read{774,774} %write{773,773}
temp	float	$tmp316	%read{775,775} %write{774,774}
temp	float	$tmp317	%read{777,777} %write{776,776}
temp	float	$tmp318	%read{778,778} %write{777,777}
temp	point	$tmp319	%read{786,786} %write{785,785}
temp	int	$tmp320	%read{788,788} %write{787,787}
temp	float	$tmp321	%read{819,819} %write{816,818}
temp	float	$tmp322.x	%read{812,812} %write{807,807}
temp	float	$tmp322.y	%read{812,812} %write{808,808}
temp	float	$tmp322.z	%read{812,812} %write{809,809}
temp	float	$tmp322.w	%read{813,813} %write{810,810}
temp	float	$tmp323.x	%read{807,807} %write{796,796}
temp	float	$tmp323.y	%read{808,808} %write{799,799}
temp	float	$tmp323.z	%read{809,809} %write{802,802}
temp	float	$tmp323.w	%read{810,810} %write{805,805}
temp	float	$tmp324	%read{795,795} %write{794,794}
temp	float	$tmp325	%read{796,796} %write{795,795}
temp	float	$tmp326	%read{798,798} %write{797,797}
temp	float	$tmp327	%read{799,799} %write{798,798}
temp	float	$tmp328	%read{801,801} %write{800,800}
temp	float	$tmp329	%read{802,802} %write{801,801}
temp	float	$tmp330	%read{804,804} %write{803,803}
temp	float	$tmp331	%read{805,805} %write{804,804}
temp	point	$tmp332	%read{813,813} %write{812,812}
temp	int	$tmp333	%read{815,815} %write{814,814}
temp	float	$tmp334	%read{846,846} %write{843,845}
temp	float	$tmp335.x	%read{839,839} %write{834,834}
temp	float	$tmp335.y	%read{839,839} %write{835,835}
temp	float	$tmp335.z	%read{839,839} %write{836,836}
temp	float	$tmp335.w	%read{840,840} %write{837,837}
temp	float	$tmp336.x	%read{834,834} %write{823,823}
temp	float	$tmp336.y	%read{835,835} %write{826,826}
temp	float	$tmp336.z	%read{836,836} %write{829,829}
temp	float	$tmp336.w	%read{837,837} %write{832,832}
temp	float	$tmp337	%read{822,822} %write{821,821}
temp	float	$tmp338	%read{823,823} %write{822,822}
temp	float	$tmp339	%read{825,825} %write{824,824}
temp	float	$tmp340	%read{826,826} %write{825,825}
temp	float	$tmp341	%read{828,828} %write{827,827}
temp	float	$tmp342	%read{829,829} %write{828,828}
temp	float	$tmp343	%read{831,831} %write{830,830}
temp	float	$tmp344	%read{832,832} %write{831,831}
temp	point	$tmp345	%read{840,840} %write{839,839}
temp	int	$tmp346	%read{842,842} %write{841,841}
temp	float	$tmp347	%read{859,859} %write{858,858}
temp	int	$tmp348	%read{863,892} %write{863,892}
temp	int	$tmp349	%read{861,892} %write{862,892}
temp	float	$tmp350.x	%read{863,892} %write{863,892}
temp	float	$tmp350.y	%read{863,892} %write{863,892}
temp	float	$tmp350.z	%read{863,892} %write{863,892}
temp	float	$tmp350.w	%read{863,892} %write{863,892}
temp	float	$tmp351.x	%read{863,892} %write{863,892}
temp	float	$tmp351.y	%read{863,892} %write{863,892}
temp	float	$tmp351.z	%read{863,892} %write{863,892}
temp	float	$tmp351.w	%read{863,892} %write{863,892}
temp	point	$tmp352	%read{863,892} %write{863,892}
temp	int	$tmp353	%read{863,892} %write{863,892}
temp	float	$tmp354	%read{863,892} %write{863,892}
temp	float	$tmp355	%read{863,892} %write{863,892}
temp	float	$tmp356	%read{863,892} %write{863,892}
temp	int	$tmp357	%read{2147483647,-1} %write{863,892}
temp	float	$tmp358	%read{894,894} %write{893,893}
temp	int	$tmp359	%read{896,896} %write{895,895}
temp	float	$tmp360.x	%read{908,908} %write{903,903}
temp	float	$tmp360.y	%read{908,908} %write{904,904}
temp	float	$tmp360.z	%read{908,908} %write{905,905}
temp	float	$tmp360.w	%read{909,909} %write{906,906}
temp	float	$tmp361.x	%read{903,903} %write{898,898}
temp	float	$tmp361.y	%read{904,904} %write{899,899}
temp	float	$tmp361.z	%read{905,905} %write{900,900}
temp	float	$tmp361.w	%read{906,906} %write{901,901}
temp	point	$tmp362	%read{909,909} %write{908,908}
temp	int	$tmp363	%read{911,911} %write{910,910}
temp	float	$tmp364	%read{916,916} %write{915,915}
temp	float	$tmp365	%read{919,919} %write{918,918}
temp	float	$tmp366	%read{921,921} %write{920,920}
temp	float	$tmp367	%read{923,923} %write{921,921}
temp	float	$tmp368	%read{923,923} %write{922,922}
temp	float	$tmp369	%read{1113,1113} %write{1016,1018}
temp	float	$tmp370.x	%read{956,996} %write{941,941}
temp	float	$tmp370.y	%read{956,997} %write{942,942}
temp	float	$tmp370.z	%read{956,998} %write{943,943}
temp	float	$tmp370.w	%read{956,999} %write{944,944}
temp	float	$tmp371.x	%read{941,941} %write{930,930}
temp	float	$tmp371.y	%read{942,942} %write{933,933}
temp	float	$tmp371.z	%read{943,943} %write{936,936}
temp	float	$tmp371.w	%read{944,944} %write{939,939}
temp	float	$tmp372	%read{929,929} %write{928,928}
temp	float	$tmp373	%read{930,930} %write{929,929}
temp	float	$tmp374	%read{932,932} %write{931,931}
temp	float	$tmp375	%read{933,933} %write{932,932}
temp	float	$tmp376	%read{935,935} %write{934,934}
temp	float	$tmp377	%read{936,936} %write{935,935}
temp	float	$tmp378	%read{938,938} %write{937,937}
temp	float	$tmp379	%read{939,939} %write{938,938}
temp	float	$tmp380	%read{952,952} %write{951,951}
temp	int	$tmp381	%read{956,985} %write{956,985}
temp	int	$tmp382	%read{954,985} %write{955,985}
temp	float	$tmp383.x	%read{956,985} %write{956,985}
temp	float	$tmp383.y	%read{956,985} %write{956,985}
temp	float	$tmp383.z	%read{956,985} %write{956,985}
temp	float	$tmp383.w	%read{956,985} %write{956,985}
temp	float	$tmp384.x	%read{956,985} %write{956,985}
temp	float	$tmp384.y	%read{956,985} %write{956,985}
temp	float	$tmp384.z	%read{956,985} %write{956,985}
temp	float	$tmp384.w	%read{956,985} %write{956,985}
temp	point	$tmp385	%read{956,985} %write{956,985}
temp	int	$tmp386	%read{956,985} %write{956,985}
temp	float	$tmp387	%read{956,985} %write{956,985}
temp	float	$tmp388	%read{956,985} %write{956,985}
temp	float	$tmp389	%read{956,985} %write{956,985}
temp	int	$tmp390	%read{2147483647,-1} %write{956,985}
temp	float	$tmp391	%read{987,987} %write{986,986}
temp	int	$tmp392	%read{989,989} %write{988,988}
temp	float	$tmp393.x	%read{1001,1001} %write{996,996}
temp	float	$tmp393.y	%read{1001,1001} %write{997,997}
temp	float	$tmp393.z	%read{1001,1001} %write{998,998}
temp	float	$tmp393.w	%read{1002,1002} %write{999,999}
temp	float	$tmp394.x	%read{996,996} %write{991,991}
temp	float	$tmp394.y	%read{997,997} %write{992,992}
temp	float	$tmp394.z	%read{998,998} %write{993,993}
temp	float	$tmp394.w	%read{999,999} %write{994,994}
temp	point	$tmp395	%read{1002,1002} %write{1001,1001}
temp	int	$tmp396	%read{1004,1004} %write{1003,1003}
temp	float	$tmp397	%read{1009,1009} %write{1008,1008}
temp	float	$tmp398	%read{1012,1012} %write{1011,1011}
temp	float	$tmp399	%read{1014,1014} %write{1013,1013}
temp	float	$tmp400	%read{1016,1016} %write{1014,1014}
temp	float	$tmp401	%read{1016,1016} %write{1015,1015}
temp	float	$tmp402	%read{1113,1113} %write{1109,1111}
temp	float	$tmp403.x	%read{1049,1089} %write{1034,1034}
temp	float	$tmp403.y	%read{1049,1090} %write{1035,1035}
temp	float	$tmp403.z	%read{1049,1091} %write{1036,1036}
temp	float	$tmp403.w	%read{1049,1092} %write{1037,1037}
temp	float	$tmp404.x	%read{1034,1034} %write{1023,1023}
temp	float	$tmp404.y	%read{1035,1035} %write{1026,1026}
temp	float	$tmp404.z	%read{1036,1036} %write{1029,1029}
temp	float	$tmp404.w	%read{1037,1037} %write{1032,1032}
const	float	$const30	5		%read{1021,1030} %write{2147483647,-1}
temp	float	$tmp405	%read{1022,1022} %write{1021,1021}
temp	float	$tmp406	%read{1023,1023} %write{1022,1022}
temp	float	$tmp407	%read{1025,1025} %write{1024,1024}
temp	float	$tmp408	%read{1026,1026} %write{1025,1025}
temp	float	$tmp409	%read{1028,1028} %write{1027,1027}
temp	float	$tmp410	%read{1029,1029} %write{1028,1028}
temp	float	$tmp411	%read{1031,1031} %write{1030,1030}
temp	float	$tmp412	%read{1032,1032} %write{1031,1031}
temp	float	$tmp413	%read{1045,1045} %write{1044,1044}
temp	int	$tmp414	%read{1049,1078} %write{1049,1078}
temp	int	$tmp415	%read{1047,1078} %write{1048,1078}
temp	float	$tmp416.x	%read{1049,1078} %write{1049,1078}
temp	float	$tmp416.y	%read{1049,1078} %write{1049,1078}
temp	float	$tmp416.z	%read{1049,1078} %write{1049,1078}
temp	float	$tmp416.w	%read{1049,1078} %write{1049,1078}
temp	float	$tmp417.x	%read{1049,1078} %write{1049,1078}
temp	float	$tmp417.y	%read{1049,1078} %write{1049,1078}
temp	float	$tmp417.z	%read{1049,1078} %write{1049,1078}
temp	float	$tmp417.w	%read{1049,1078} %write{1049,1078}
temp	point	$tmp418	%read{1049,1078} %write{1049,1078}
temp	int	$tmp419	%read{1049,1078} %write{1049,1078}
temp	float	$tmp420	%read{1049,1078} %write{1049,1078}
temp	float	$tmp421	%read{1049,1078} %write{1049,1078}
temp	float	$tmp422	%read{1049,1078} %write{1049,1078}
temp	int	$tmp423	%read{2147483647,-1} %write{1049,1078}
temp	float	$tmp424	%read{1080,1080} %write{1079,1079}
temp	int	$tmp425	%read{1082,1082} %write{1081,1081}
temp	float	$tmp426.x	%read{1094,1094} %write{1089,1089}
temp	float	$tmp426.y	%read{1094,1094} %write{1090,1090}
temp	float	$tmp426.z	%read{1094,1094} %write{1091,1091}
temp	float	$tmp426.w	%read{1095,1095} %write{1092,1092}
temp	float	$tmp427.x	%read{1089,1089} %write{1084,1084}
temp	float	$tmp427.y	%read{1090,1090} %write{1085,1085}
temp	float	$tmp427.z	%read{1091,1091} %write{1086,1086}
temp	float	$tmp427.w	%read{1092,1092} %write{1087,1087}
temp	point	$tmp428	%read{1095,1095} %write{1094,1094}
temp	int	$tmp429	%read{1097,1097} %write{1096,1096}
temp	float	$tmp430	%read{1102,1102} %write{1101,1101}
temp	float	$tmp431	%read{1105,1105} %write{1104,1104}
temp	float	$tmp432	%read{1107,1107} %write{1106,1106}
temp	float	$tmp433	%read{1109,1109} %write{1107,1107}
temp	float	$tmp434	%read{1109,1109} %write{1108,1108}
const	string	$const31	"Unknown dimension!"		%read{1115,1115} %write{2147483647,-1}
code ___main___
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:122
#   vector3 p = Vector;
	assign		p Vector 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{122} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:123
#   if (use_mapping)
	if		use_mapping 3 3 	%line{123} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:124
#     p = transform(mapping, p);
	transform	p mapping p 	%line{124} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:126
#   p *= Scale;
	mul		p p Scale 	%line{126} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:127
#   float w = W * Scale;
	mul		w W Scale 	%line{127} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:129
#   if (dimensions == "1D")
	eq		$tmp1 dimensions $const1 	%line{129} %argrw{"wrr"}
	if		$tmp1 202 1116 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:130
#     Fac = noise_texture(w, Detail, Roughness, Distortion, Color);
	functioncall	$const2 202 	%line{130} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:47
#   float p = co;
	assign		___512_p w 	%line{47} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:48
#   if (distortion != 0.0) {
	neq		$tmp2 Distortion $const3 	%line{48} %argrw{"wrr"}
	if		$tmp2 25 25 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:49
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	functioncall	$const4 15 	%line{49} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:21
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp5 $const6 $const3 	%line{21} %argrw{"wrr"}
	mul		$tmp6 $tmp5 $const5 	%argrw{"wrr"}
	add		$tmp4 $const5 $tmp6 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:49
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	add		$tmp7 ___512_p $tmp4 	%line{49} %argrw{"wrr"}
	functioncall	$const7 23 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const8 $tmp7 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp8 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp8 22 22 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp3 $const3 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp3 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:49
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	mul		$tmp9 $tmp3 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{49} %argrw{"wrr"}
	add		___512_p ___512_p $tmp9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:52
#   float value = fractal_noise(p, detail, roughness);
	functioncall	$const9 80 	%line{52} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:76
#   float fscale = 1.0;
	assign		___450_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{76} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:77
#   float amp = 1.0;
	assign		___450_amp $const10 	%line{77} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:78
#   float maxamp = 0.0;
	assign		___450_maxamp $const3 	%line{78} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:79
#   float sum = 0.0;
	assign		___450_sum $const3 	%line{79} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:80
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 33 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp10 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___450_octaves $tmp10 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:81
#   int n = (int)octaves;
	assign		___450_n ___450_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{81} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:82
#   for (int i = 0; i <= n; i++) {
	for		$tmp12 36 38 54 56 	%line{82} %argrw{"r"}
	assign		___451_i $const13 	%argrw{"wr"}
	le		$tmp11 ___451_i ___450_n 	%argrw{"wrr"}
	neq		$tmp12 $tmp11 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:83
#     float t = safe_noise(fscale * p);
	mul		$tmp13 ___450_fscale ___512_p 	%line{83} %argrw{"wrr"}
	functioncall	$const14 46 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:11
#   float f = noise("noise", p);
	noise		___442_f $const15 $tmp13 	%line{11} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:12
#   if (isinf(f))
	isinf		$tmp14 ___442_f 	%line{12} %argrw{"wr"}
	if		$tmp14 45 45 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:13
#     return 0.5;
	assign		___452_t $const16 	%line{13} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:14
#   return f;
	assign		___452_t ___442_f 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:84
#     sum += t * amp;
	mul		$tmp15 ___452_t ___450_amp 	%line{84} %argrw{"wrr"}
	add		___450_sum ___450_sum $tmp15 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:85
#     maxamp += amp;
	add		___450_maxamp ___450_maxamp ___450_amp 	%line{85} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:86
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 52 	%line{86} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp17 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp16 $tmp17 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:86
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___450_amp ___450_amp $tmp16 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{86} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:87
#     fscale *= 2.0;
	mul		___450_fscale ___450_fscale $const17 	%line{87} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:82
#   for (int i = 0; i <= n; i++) {
	assign		$tmp18 ___451_i 	%line{82} %argrw{"wr"}
	add		___451_i ___451_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:89
#   float rmd = octaves - floor(octaves);
	floor		$tmp19 ___450_octaves 	%line{89} %argrw{"wr"}
	sub		___450_rmd ___450_octaves $tmp19 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:90
#   if (rmd != 0.0) {
	neq		$tmp20 ___450_rmd $const3 	%line{90} %argrw{"wrr"}
	if		$tmp20 78 80 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:91
#     float t = safe_noise(fscale * p);
	mul		$tmp21 ___450_fscale ___512_p 	%line{91} %argrw{"wrr"}
	functioncall	$const14 68 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:11
#   float f = noise("noise", p);
	noise		___442_f $const15 $tmp21 	%line{11} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:12
#   if (isinf(f))
	isinf		$tmp22 ___442_f 	%line{12} %argrw{"wr"}
	if		$tmp22 67 67 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:13
#     return 0.5;
	assign		___453_t $const16 	%line{13} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:14
#   return f;
	assign		___453_t ___442_f 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:92
#     float sum2 = sum + t * amp;
	mul		$tmp23 ___453_t ___450_amp 	%line{92} %argrw{"wrr"}
	add		___453_sum2 ___450_sum $tmp23 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:93
#     sum /= maxamp;
	div		___450_sum ___450_sum ___450_maxamp 	%line{93} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:94
#     sum2 /= maxamp + amp;
	add		$tmp24 ___450_maxamp ___450_amp 	%line{94} %argrw{"wrr"}
	div		___453_sum2 ___453_sum2 $tmp24 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:95
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp25 $const10 ___450_rmd 	%line{95} %argrw{"wrr"}
	mul		$tmp26 $tmp25 ___450_sum 	%argrw{"wrr"}
	mul		$tmp27 ___450_rmd ___453_sum2 	%argrw{"wrr"}
	add		___512_value $tmp26 $tmp27 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:98
#     return sum / maxamp;
	div		___512_value ___450_sum ___450_maxamp 	%line{98} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:54
#                 fractal_noise(p + random_float_offset(1.0), detail, roughness),
	functioncall	$const4 84 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{54} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:21
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp30 $const6 $const10 	%line{21} %argrw{"wrr"}
	mul		$tmp31 $tmp30 $const5 	%argrw{"wrr"}
	add		$tmp29 $const5 $tmp31 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:54
#                 fractal_noise(p + random_float_offset(1.0), detail, roughness),
	add		$tmp32 ___512_p $tmp29 	%line{54} %argrw{"wrr"}
	functioncall	$const9 140 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:76
#   float fscale = 1.0;
	assign		___450_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{76} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:77
#   float amp = 1.0;
	assign		___450_amp $const10 	%line{77} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:78
#   float maxamp = 0.0;
	assign		___450_maxamp $const3 	%line{78} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:79
#   float sum = 0.0;
	assign		___450_sum $const3 	%line{79} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:80
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 93 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp33 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___450_octaves $tmp33 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:81
#   int n = (int)octaves;
	assign		___450_n ___450_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{81} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:82
#   for (int i = 0; i <= n; i++) {
	for		$tmp35 96 98 114 116 	%line{82} %argrw{"r"}
	assign		___451_i $const13 	%argrw{"wr"}
	le		$tmp34 ___451_i ___450_n 	%argrw{"wrr"}
	neq		$tmp35 $tmp34 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:83
#     float t = safe_noise(fscale * p);
	mul		$tmp36 ___450_fscale $tmp32 	%line{83} %argrw{"wrr"}
	functioncall	$const14 106 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:11
#   float f = noise("noise", p);
	noise		___442_f $const15 $tmp36 	%line{11} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:12
#   if (isinf(f))
	isinf		$tmp37 ___442_f 	%line{12} %argrw{"wr"}
	if		$tmp37 105 105 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:13
#     return 0.5;
	assign		___452_t $const16 	%line{13} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:14
#   return f;
	assign		___452_t ___442_f 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:84
#     sum += t * amp;
	mul		$tmp38 ___452_t ___450_amp 	%line{84} %argrw{"wrr"}
	add		___450_sum ___450_sum $tmp38 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:85
#     maxamp += amp;
	add		___450_maxamp ___450_maxamp ___450_amp 	%line{85} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:86
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 112 	%line{86} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp40 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp39 $tmp40 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:86
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___450_amp ___450_amp $tmp39 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{86} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:87
#     fscale *= 2.0;
	mul		___450_fscale ___450_fscale $const17 	%line{87} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:82
#   for (int i = 0; i <= n; i++) {
	assign		$tmp41 ___451_i 	%line{82} %argrw{"wr"}
	add		___451_i ___451_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:89
#   float rmd = octaves - floor(octaves);
	floor		$tmp42 ___450_octaves 	%line{89} %argrw{"wr"}
	sub		___450_rmd ___450_octaves $tmp42 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:90
#   if (rmd != 0.0) {
	neq		$tmp43 ___450_rmd $const3 	%line{90} %argrw{"wrr"}
	if		$tmp43 138 140 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:91
#     float t = safe_noise(fscale * p);
	mul		$tmp44 ___450_fscale $tmp32 	%line{91} %argrw{"wrr"}
	functioncall	$const14 128 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:11
#   float f = noise("noise", p);
	noise		___442_f $const15 $tmp44 	%line{11} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:12
#   if (isinf(f))
	isinf		$tmp45 ___442_f 	%line{12} %argrw{"wr"}
	if		$tmp45 127 127 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:13
#     return 0.5;
	assign		___453_t $const16 	%line{13} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:14
#   return f;
	assign		___453_t ___442_f 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:92
#     float sum2 = sum + t * amp;
	mul		$tmp46 ___453_t ___450_amp 	%line{92} %argrw{"wrr"}
	add		___453_sum2 ___450_sum $tmp46 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:93
#     sum /= maxamp;
	div		___450_sum ___450_sum ___450_maxamp 	%line{93} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:94
#     sum2 /= maxamp + amp;
	add		$tmp47 ___450_maxamp ___450_amp 	%line{94} %argrw{"wrr"}
	div		___453_sum2 ___453_sum2 $tmp47 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:95
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp48 $const10 ___450_rmd 	%line{95} %argrw{"wrr"}
	mul		$tmp49 $tmp48 ___450_sum 	%argrw{"wrr"}
	mul		$tmp50 ___450_rmd ___453_sum2 	%argrw{"wrr"}
	add		$tmp28 $tmp49 $tmp50 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:98
#     return sum / maxamp;
	div		$tmp28 ___450_sum ___450_maxamp 	%line{98} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:55
#                 fractal_noise(p + random_float_offset(2.0), detail, roughness));
	functioncall	$const4 144 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{55} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:21
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp53 $const6 $const17 	%line{21} %argrw{"wrr"}
	mul		$tmp54 $tmp53 $const5 	%argrw{"wrr"}
	add		$tmp52 $const5 $tmp54 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:55
#                 fractal_noise(p + random_float_offset(2.0), detail, roughness));
	add		$tmp55 ___512_p $tmp52 	%line{55} %argrw{"wrr"}
	functioncall	$const9 200 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:76
#   float fscale = 1.0;
	assign		___450_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{76} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:77
#   float amp = 1.0;
	assign		___450_amp $const10 	%line{77} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:78
#   float maxamp = 0.0;
	assign		___450_maxamp $const3 	%line{78} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:79
#   float sum = 0.0;
	assign		___450_sum $const3 	%line{79} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:80
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 153 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp56 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___450_octaves $tmp56 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:81
#   int n = (int)octaves;
	assign		___450_n ___450_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{81} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:82
#   for (int i = 0; i <= n; i++) {
	for		$tmp58 156 158 174 176 	%line{82} %argrw{"r"}
	assign		___451_i $const13 	%argrw{"wr"}
	le		$tmp57 ___451_i ___450_n 	%argrw{"wrr"}
	neq		$tmp58 $tmp57 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:83
#     float t = safe_noise(fscale * p);
	mul		$tmp59 ___450_fscale $tmp55 	%line{83} %argrw{"wrr"}
	functioncall	$const14 166 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:11
#   float f = noise("noise", p);
	noise		___442_f $const15 $tmp59 	%line{11} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:12
#   if (isinf(f))
	isinf		$tmp60 ___442_f 	%line{12} %argrw{"wr"}
	if		$tmp60 165 165 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:13
#     return 0.5;
	assign		___452_t $const16 	%line{13} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:14
#   return f;
	assign		___452_t ___442_f 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:84
#     sum += t * amp;
	mul		$tmp61 ___452_t ___450_amp 	%line{84} %argrw{"wrr"}
	add		___450_sum ___450_sum $tmp61 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:85
#     maxamp += amp;
	add		___450_maxamp ___450_maxamp ___450_amp 	%line{85} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:86
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 172 	%line{86} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp63 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp62 $tmp63 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:86
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___450_amp ___450_amp $tmp62 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{86} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:87
#     fscale *= 2.0;
	mul		___450_fscale ___450_fscale $const17 	%line{87} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:82
#   for (int i = 0; i <= n; i++) {
	assign		$tmp64 ___451_i 	%line{82} %argrw{"wr"}
	add		___451_i ___451_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:89
#   float rmd = octaves - floor(octaves);
	floor		$tmp65 ___450_octaves 	%line{89} %argrw{"wr"}
	sub		___450_rmd ___450_octaves $tmp65 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:90
#   if (rmd != 0.0) {
	neq		$tmp66 ___450_rmd $const3 	%line{90} %argrw{"wrr"}
	if		$tmp66 198 200 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:91
#     float t = safe_noise(fscale * p);
	mul		$tmp67 ___450_fscale $tmp55 	%line{91} %argrw{"wrr"}
	functioncall	$const14 188 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:11
#   float f = noise("noise", p);
	noise		___442_f $const15 $tmp67 	%line{11} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:12
#   if (isinf(f))
	isinf		$tmp68 ___442_f 	%line{12} %argrw{"wr"}
	if		$tmp68 187 187 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:13
#     return 0.5;
	assign		___453_t $const16 	%line{13} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:14
#   return f;
	assign		___453_t ___442_f 	%line{14} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:92
#     float sum2 = sum + t * amp;
	mul		$tmp69 ___453_t ___450_amp 	%line{92} %argrw{"wrr"}
	add		___453_sum2 ___450_sum $tmp69 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:93
#     sum /= maxamp;
	div		___450_sum ___450_sum ___450_maxamp 	%line{93} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:94
#     sum2 /= maxamp + amp;
	add		$tmp70 ___450_maxamp ___450_amp 	%line{94} %argrw{"wrr"}
	div		___453_sum2 ___453_sum2 $tmp70 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:95
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp71 $const10 ___450_rmd 	%line{95} %argrw{"wrr"}
	mul		$tmp72 $tmp71 ___450_sum 	%argrw{"wrr"}
	mul		$tmp73 ___450_rmd ___453_sum2 	%argrw{"wrr"}
	add		$tmp51 $tmp72 $tmp73 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:98
#     return sum / maxamp;
	div		$tmp51 ___450_sum ___450_maxamp 	%line{98} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:53
#   Color = color(value,
	color		Color ___512_value $tmp28 $tmp51 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{53} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:56
#   return value;
	assign		Fac ___512_value 	%line{56} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:131
#   else if (dimensions == "2D")
	eq		$tmp74 dimensions $const19 	%line{131} %argrw{"wrr"}
	if		$tmp74 467 1116 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:132
#     Fac = noise_texture(vector2(p[0], p[1]), Detail, Roughness, Distortion, Color);
	compref		$tmp75.x p $const13 	%line{132} %argrw{"wrr"}
	compref		$tmp75.y p $const18 	%argrw{"wrr"}
	functioncall	$const2 467 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:62
#   vector2 p = co;
	assign		___514_p.x $tmp75.x 	%line{62} %argrw{"wr"}
	assign		___514_p.y $tmp75.y 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:63
#   if (distortion != 0.0) {
	neq		$tmp76 Distortion $const3 	%line{63} %argrw{"wrr"}
	if		$tmp76 250 250 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	functioncall	$const20 218 	%line{64} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:26
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp81 $const6 $const3 $const3 	%line{26} %argrw{"wrrr"}
	mul		$tmp82 $tmp81 $const5 	%argrw{"wrr"}
	add		$tmp80.x $const5 $tmp82 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp83 $const6 $const3 $const10 	%line{27} %argrw{"wrrr"}
	mul		$tmp84 $tmp83 $const5 	%argrw{"wrr"}
	add		$tmp80.y $const5 $tmp84 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 221 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp79.x ___514_p.x $tmp80.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp79.y ___514_p.y $tmp80.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	functioncall	$const7 228 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{64} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const8 $tmp79.x $tmp79.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp85 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp85 227 227 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp78 $const3 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp78 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	mul		$tmp77.x $tmp78 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{64} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	functioncall	$const20 236 	%line{65} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:26
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp89 $const6 $const10 $const3 	%line{26} %argrw{"wrrr"}
	mul		$tmp90 $tmp89 $const5 	%argrw{"wrr"}
	add		$tmp88.x $const5 $tmp90 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp91 $const6 $const10 $const10 	%line{27} %argrw{"wrrr"}
	mul		$tmp92 $tmp91 $const5 	%argrw{"wrr"}
	add		$tmp88.y $const5 $tmp92 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 239 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp87.x ___514_p.x $tmp88.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp87.y ___514_p.y $tmp88.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	functioncall	$const7 246 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{65} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const8 $tmp87.x $tmp87.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp93 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp93 245 245 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp86 $const3 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp86 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	mul		$tmp77.y $tmp86 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{65} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 250 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___514_p.x ___514_p.x $tmp77.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___514_p.y ___514_p.y $tmp77.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:68
#   float value = fractal_noise(p, detail, roughness);
	functioncall	$const9 315 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{68} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:105
#   float fscale = 1.0;
	assign		___455_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{105} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:106
#   float amp = 1.0;
	assign		___455_amp $const10 	%line{106} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:107
#   float maxamp = 0.0;
	assign		___455_maxamp $const3 	%line{107} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:108
#   float sum = 0.0;
	assign		___455_sum $const3 	%line{108} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:109
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 258 	%line{109} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp94 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___455_octaves $tmp94 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:110
#   int n = (int)octaves;
	assign		___455_n ___455_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{110} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:111
#   for (int i = 0; i <= n; i++) {
	for		$tmp96 261 263 284 286 	%line{111} %argrw{"r"}
	assign		___456_i $const13 	%argrw{"wr"}
	le		$tmp95 ___456_i ___455_n 	%argrw{"wrr"}
	neq		$tmp96 $tmp95 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 269 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp98.x ___455_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp98.y ___455_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 269 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp97.x ___514_p.x $tmp98.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp97.y ___514_p.y $tmp98.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:112
#     float t = safe_noise(fscale * p);
	functioncall	$const14 276 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{112} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:19
#   float f = noise("noise", p.x, p.y);
	noise		___443_f $const15 $tmp97.x $tmp97.y 	%line{19} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:20
#   if (isinf(f))
	isinf		$tmp99 ___443_f 	%line{20} %argrw{"wr"}
	if		$tmp99 275 275 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:21
#     return 0.5;
	assign		___457_t $const16 	%line{21} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:22
#   return f;
	assign		___457_t ___443_f 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:113
#     sum += t * amp;
	mul		$tmp100 ___457_t ___455_amp 	%line{113} %argrw{"wrr"}
	add		___455_sum ___455_sum $tmp100 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:114
#     maxamp += amp;
	add		___455_maxamp ___455_maxamp ___455_amp 	%line{114} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:115
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 282 	%line{115} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp102 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp101 $tmp102 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:115
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___455_amp ___455_amp $tmp101 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{115} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:116
#     fscale *= 2.0;
	mul		___455_fscale ___455_fscale $const17 	%line{116} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:111
#   for (int i = 0; i <= n; i++) {
	assign		$tmp103 ___456_i 	%line{111} %argrw{"wr"}
	add		___456_i ___456_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:118
#   float rmd = octaves - floor(octaves);
	floor		$tmp104 ___455_octaves 	%line{118} %argrw{"wr"}
	sub		___455_rmd ___455_octaves $tmp104 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:119
#   if (rmd != 0.0) {
	neq		$tmp105 ___455_rmd $const3 	%line{119} %argrw{"wrr"}
	if		$tmp105 313 315 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 296 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp107.x ___455_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp107.y ___455_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 296 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp106.x ___514_p.x $tmp107.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp106.y ___514_p.y $tmp107.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:120
#     float t = safe_noise(fscale * p);
	functioncall	$const14 303 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{120} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:19
#   float f = noise("noise", p.x, p.y);
	noise		___443_f $const15 $tmp106.x $tmp106.y 	%line{19} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:20
#   if (isinf(f))
	isinf		$tmp108 ___443_f 	%line{20} %argrw{"wr"}
	if		$tmp108 302 302 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:21
#     return 0.5;
	assign		___458_t $const16 	%line{21} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:22
#   return f;
	assign		___458_t ___443_f 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:121
#     float sum2 = sum + t * amp;
	mul		$tmp109 ___458_t ___455_amp 	%line{121} %argrw{"wrr"}
	add		___458_sum2 ___455_sum $tmp109 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:122
#     sum /= maxamp;
	div		___455_sum ___455_sum ___455_maxamp 	%line{122} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:123
#     sum2 /= maxamp + amp;
	add		$tmp110 ___455_maxamp ___455_amp 	%line{123} %argrw{"wrr"}
	div		___458_sum2 ___458_sum2 $tmp110 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:124
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp111 $const10 ___455_rmd 	%line{124} %argrw{"wrr"}
	mul		$tmp112 $tmp111 ___455_sum 	%argrw{"wrr"}
	mul		$tmp113 ___455_rmd ___458_sum2 	%argrw{"wrr"}
	add		___514_value $tmp112 $tmp113 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:127
#     return sum / maxamp;
	div		___514_value ___455_sum ___455_maxamp 	%line{127} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:70
#                 fractal_noise(p + random_vector2_offset(2.0), detail, roughness),
	functioncall	$const20 322 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{70} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:26
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp117 $const6 $const17 $const3 	%line{26} %argrw{"wrrr"}
	mul		$tmp118 $tmp117 $const5 	%argrw{"wrr"}
	add		$tmp116.x $const5 $tmp118 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp119 $const6 $const17 $const10 	%line{27} %argrw{"wrrr"}
	mul		$tmp120 $tmp119 $const5 	%argrw{"wrr"}
	add		$tmp116.y $const5 $tmp120 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 325 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp115.x ___514_p.x $tmp116.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp115.y ___514_p.y $tmp116.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:70
#                 fractal_noise(p + random_vector2_offset(2.0), detail, roughness),
	functioncall	$const9 390 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{70} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:105
#   float fscale = 1.0;
	assign		___455_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{105} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:106
#   float amp = 1.0;
	assign		___455_amp $const10 	%line{106} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:107
#   float maxamp = 0.0;
	assign		___455_maxamp $const3 	%line{107} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:108
#   float sum = 0.0;
	assign		___455_sum $const3 	%line{108} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:109
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 333 	%line{109} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp121 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___455_octaves $tmp121 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:110
#   int n = (int)octaves;
	assign		___455_n ___455_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{110} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:111
#   for (int i = 0; i <= n; i++) {
	for		$tmp123 336 338 359 361 	%line{111} %argrw{"r"}
	assign		___456_i $const13 	%argrw{"wr"}
	le		$tmp122 ___456_i ___455_n 	%argrw{"wrr"}
	neq		$tmp123 $tmp122 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 344 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp125.x ___455_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp125.y ___455_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 344 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp124.x $tmp115.x $tmp125.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp124.y $tmp115.y $tmp125.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:112
#     float t = safe_noise(fscale * p);
	functioncall	$const14 351 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{112} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:19
#   float f = noise("noise", p.x, p.y);
	noise		___443_f $const15 $tmp124.x $tmp124.y 	%line{19} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:20
#   if (isinf(f))
	isinf		$tmp126 ___443_f 	%line{20} %argrw{"wr"}
	if		$tmp126 350 350 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:21
#     return 0.5;
	assign		___457_t $const16 	%line{21} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:22
#   return f;
	assign		___457_t ___443_f 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:113
#     sum += t * amp;
	mul		$tmp127 ___457_t ___455_amp 	%line{113} %argrw{"wrr"}
	add		___455_sum ___455_sum $tmp127 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:114
#     maxamp += amp;
	add		___455_maxamp ___455_maxamp ___455_amp 	%line{114} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:115
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 357 	%line{115} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp129 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp128 $tmp129 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:115
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___455_amp ___455_amp $tmp128 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{115} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:116
#     fscale *= 2.0;
	mul		___455_fscale ___455_fscale $const17 	%line{116} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:111
#   for (int i = 0; i <= n; i++) {
	assign		$tmp130 ___456_i 	%line{111} %argrw{"wr"}
	add		___456_i ___456_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:118
#   float rmd = octaves - floor(octaves);
	floor		$tmp131 ___455_octaves 	%line{118} %argrw{"wr"}
	sub		___455_rmd ___455_octaves $tmp131 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:119
#   if (rmd != 0.0) {
	neq		$tmp132 ___455_rmd $const3 	%line{119} %argrw{"wrr"}
	if		$tmp132 388 390 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 371 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp134.x ___455_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp134.y ___455_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 371 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp133.x $tmp115.x $tmp134.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp133.y $tmp115.y $tmp134.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:120
#     float t = safe_noise(fscale * p);
	functioncall	$const14 378 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{120} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:19
#   float f = noise("noise", p.x, p.y);
	noise		___443_f $const15 $tmp133.x $tmp133.y 	%line{19} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:20
#   if (isinf(f))
	isinf		$tmp135 ___443_f 	%line{20} %argrw{"wr"}
	if		$tmp135 377 377 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:21
#     return 0.5;
	assign		___458_t $const16 	%line{21} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:22
#   return f;
	assign		___458_t ___443_f 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:121
#     float sum2 = sum + t * amp;
	mul		$tmp136 ___458_t ___455_amp 	%line{121} %argrw{"wrr"}
	add		___458_sum2 ___455_sum $tmp136 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:122
#     sum /= maxamp;
	div		___455_sum ___455_sum ___455_maxamp 	%line{122} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:123
#     sum2 /= maxamp + amp;
	add		$tmp137 ___455_maxamp ___455_amp 	%line{123} %argrw{"wrr"}
	div		___458_sum2 ___458_sum2 $tmp137 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:124
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp138 $const10 ___455_rmd 	%line{124} %argrw{"wrr"}
	mul		$tmp139 $tmp138 ___455_sum 	%argrw{"wrr"}
	mul		$tmp140 ___455_rmd ___458_sum2 	%argrw{"wrr"}
	add		$tmp114 $tmp139 $tmp140 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:127
#     return sum / maxamp;
	div		$tmp114 ___455_sum ___455_maxamp 	%line{127} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#                 fractal_noise(p + random_vector2_offset(3.0), detail, roughness));
	functioncall	$const20 397 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{71} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:26
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp144 $const6 $const23 $const3 	%line{26} %argrw{"wrrr"}
	mul		$tmp145 $tmp144 $const5 	%argrw{"wrr"}
	add		$tmp143.x $const5 $tmp145 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:27
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp146 $const6 $const23 $const10 	%line{27} %argrw{"wrrr"}
	mul		$tmp147 $tmp146 $const5 	%argrw{"wrr"}
	add		$tmp143.y $const5 $tmp147 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 400 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp142.x ___514_p.x $tmp143.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp142.y ___514_p.y $tmp143.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#                 fractal_noise(p + random_vector2_offset(3.0), detail, roughness));
	functioncall	$const9 465 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{71} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:105
#   float fscale = 1.0;
	assign		___455_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{105} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:106
#   float amp = 1.0;
	assign		___455_amp $const10 	%line{106} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:107
#   float maxamp = 0.0;
	assign		___455_maxamp $const3 	%line{107} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:108
#   float sum = 0.0;
	assign		___455_sum $const3 	%line{108} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:109
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 408 	%line{109} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp148 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___455_octaves $tmp148 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:110
#   int n = (int)octaves;
	assign		___455_n ___455_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{110} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:111
#   for (int i = 0; i <= n; i++) {
	for		$tmp150 411 413 434 436 	%line{111} %argrw{"r"}
	assign		___456_i $const13 	%argrw{"wr"}
	le		$tmp149 ___456_i ___455_n 	%argrw{"wrr"}
	neq		$tmp150 $tmp149 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 419 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp152.x ___455_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp152.y ___455_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 419 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp151.x $tmp142.x $tmp152.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp151.y $tmp142.y $tmp152.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:112
#     float t = safe_noise(fscale * p);
	functioncall	$const14 426 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{112} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:19
#   float f = noise("noise", p.x, p.y);
	noise		___443_f $const15 $tmp151.x $tmp151.y 	%line{19} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:20
#   if (isinf(f))
	isinf		$tmp153 ___443_f 	%line{20} %argrw{"wr"}
	if		$tmp153 425 425 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:21
#     return 0.5;
	assign		___457_t $const16 	%line{21} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:22
#   return f;
	assign		___457_t ___443_f 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:113
#     sum += t * amp;
	mul		$tmp154 ___457_t ___455_amp 	%line{113} %argrw{"wrr"}
	add		___455_sum ___455_sum $tmp154 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:114
#     maxamp += amp;
	add		___455_maxamp ___455_maxamp ___455_amp 	%line{114} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:115
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 432 	%line{115} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp156 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp155 $tmp156 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:115
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___455_amp ___455_amp $tmp155 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{115} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:116
#     fscale *= 2.0;
	mul		___455_fscale ___455_fscale $const17 	%line{116} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:111
#   for (int i = 0; i <= n; i++) {
	assign		$tmp157 ___456_i 	%line{111} %argrw{"wr"}
	add		___456_i ___456_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:118
#   float rmd = octaves - floor(octaves);
	floor		$tmp158 ___455_octaves 	%line{118} %argrw{"wr"}
	sub		___455_rmd ___455_octaves $tmp158 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:119
#   if (rmd != 0.0) {
	neq		$tmp159 ___455_rmd $const3 	%line{119} %argrw{"wrr"}
	if		$tmp159 463 465 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 446 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp161.x ___455_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp161.y ___455_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 446 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp160.x $tmp142.x $tmp161.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp160.y $tmp142.y $tmp161.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:120
#     float t = safe_noise(fscale * p);
	functioncall	$const14 453 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{120} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:19
#   float f = noise("noise", p.x, p.y);
	noise		___443_f $const15 $tmp160.x $tmp160.y 	%line{19} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:20
#   if (isinf(f))
	isinf		$tmp162 ___443_f 	%line{20} %argrw{"wr"}
	if		$tmp162 452 452 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:21
#     return 0.5;
	assign		___458_t $const16 	%line{21} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:22
#   return f;
	assign		___458_t ___443_f 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:121
#     float sum2 = sum + t * amp;
	mul		$tmp163 ___458_t ___455_amp 	%line{121} %argrw{"wrr"}
	add		___458_sum2 ___455_sum $tmp163 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:122
#     sum /= maxamp;
	div		___455_sum ___455_sum ___455_maxamp 	%line{122} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:123
#     sum2 /= maxamp + amp;
	add		$tmp164 ___455_maxamp ___455_amp 	%line{123} %argrw{"wrr"}
	div		___458_sum2 ___458_sum2 $tmp164 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:124
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp165 $const10 ___455_rmd 	%line{124} %argrw{"wrr"}
	mul		$tmp166 $tmp165 ___455_sum 	%argrw{"wrr"}
	mul		$tmp167 ___455_rmd ___458_sum2 	%argrw{"wrr"}
	add		$tmp141 $tmp166 $tmp167 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:127
#     return sum / maxamp;
	div		$tmp141 ___455_sum ___455_maxamp 	%line{127} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:69
#   Color = color(value,
	color		Color ___514_value $tmp114 $tmp141 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{69} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#   return value;
	assign		Fac ___514_value 	%line{72} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:133
#   else if (dimensions == "3D")
	eq		$tmp168 dimensions $const24 	%line{133} %argrw{"wrr"}
	if		$tmp168 726 1116 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:134
#     Fac = noise_texture(p, Detail, Roughness, Distortion, Color);
	functioncall	$const2 726 	%line{134} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:78
#   vector3 p = co;
	assign		___516_p p 	%line{78} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
#   if (distortion != 0.0) {
	neq		$tmp169 Distortion $const3 	%line{79} %argrw{"wrr"}
	if		$tmp169 535 535 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	functioncall	$const25 484 	%line{80} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp173 $const6 $const3 $const3 	%line{32} %argrw{"wrrr"}
	mul		$tmp174 $tmp173 $const5 	%argrw{"wrr"}
	add		$tmp175 $const5 $tmp174 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp176 $const6 $const3 $const10 	%line{33} %argrw{"wrrr"}
	mul		$tmp177 $tmp176 $const5 	%argrw{"wrr"}
	add		$tmp178 $const5 $tmp177 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp179 $const6 $const3 $const17 	%line{34} %argrw{"wrrr"}
	mul		$tmp180 $tmp179 $const5 	%argrw{"wrr"}
	add		$tmp181 $const5 $tmp180 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp172 $tmp175 $tmp178 $tmp181 	%line{32} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	add		$tmp182 ___516_p $tmp172 	%line{80} %argrw{"wrr"}
	functioncall	$const7 492 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const8 $tmp182 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp183 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp183 491 491 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp171 $const3 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp171 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	mul		$tmp184 $tmp171 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	functioncall	$const25 504 	%line{81} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp187 $const6 $const10 $const3 	%line{32} %argrw{"wrrr"}
	mul		$tmp188 $tmp187 $const5 	%argrw{"wrr"}
	add		$tmp189 $const5 $tmp188 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp190 $const6 $const10 $const10 	%line{33} %argrw{"wrrr"}
	mul		$tmp191 $tmp190 $const5 	%argrw{"wrr"}
	add		$tmp192 $const5 $tmp191 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp193 $const6 $const10 $const17 	%line{34} %argrw{"wrrr"}
	mul		$tmp194 $tmp193 $const5 	%argrw{"wrr"}
	add		$tmp195 $const5 $tmp194 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp186 $tmp189 $tmp192 $tmp195 	%line{32} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	add		$tmp196 ___516_p $tmp186 	%line{81} %argrw{"wrr"}
	functioncall	$const7 512 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const8 $tmp196 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp197 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp197 511 511 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp185 $const3 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp185 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	mul		$tmp198 $tmp185 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	functioncall	$const25 524 	%line{82} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp201 $const6 $const17 $const3 	%line{32} %argrw{"wrrr"}
	mul		$tmp202 $tmp201 $const5 	%argrw{"wrr"}
	add		$tmp203 $const5 $tmp202 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp204 $const6 $const17 $const10 	%line{33} %argrw{"wrrr"}
	mul		$tmp205 $tmp204 $const5 	%argrw{"wrr"}
	add		$tmp206 $const5 $tmp205 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp207 $const6 $const17 $const17 	%line{34} %argrw{"wrrr"}
	mul		$tmp208 $tmp207 $const5 	%argrw{"wrr"}
	add		$tmp209 $const5 $tmp208 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp200 $tmp203 $tmp206 $tmp209 	%line{32} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	add		$tmp210 ___516_p $tmp200 	%line{82} %argrw{"wrr"}
	functioncall	$const7 532 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const8 $tmp210 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp211 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp211 531 531 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp199 $const3 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp199 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	mul		$tmp212 $tmp199 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	point		$tmp170 $tmp184 $tmp198 $tmp212 	%line{80} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	add		___516_p ___516_p $tmp170 	%line{82} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:85
#   float value = fractal_noise(p, detail, roughness);
	functioncall	$const9 590 	%line{85} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:134
#   float fscale = 1.0;
	assign		___460_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{134} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:135
#   float amp = 1.0;
	assign		___460_amp $const10 	%line{135} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:136
#   float maxamp = 0.0;
	assign		___460_maxamp $const3 	%line{136} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:137
#   float sum = 0.0;
	assign		___460_sum $const3 	%line{137} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:138
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 543 	%line{138} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp213 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___460_octaves $tmp213 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:139
#   int n = (int)octaves;
	assign		___460_n ___460_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{139} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:140
#   for (int i = 0; i <= n; i++) {
	for		$tmp215 546 548 564 566 	%line{140} %argrw{"r"}
	assign		___461_i $const13 	%argrw{"wr"}
	le		$tmp214 ___461_i ___460_n 	%argrw{"wrr"}
	neq		$tmp215 $tmp214 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:141
#     float t = safe_noise(fscale * p);
	mul		$tmp216 ___460_fscale ___516_p 	%line{141} %argrw{"wrr"}
	functioncall	$const14 556 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:27
#   float f = noise("noise", p);
	noise		___444_f $const15 $tmp216 	%line{27} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:28
#   if (isinf(f))
	isinf		$tmp217 ___444_f 	%line{28} %argrw{"wr"}
	if		$tmp217 555 555 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:29
#     return 0.5;
	assign		___462_t $const16 	%line{29} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:30
#   return f;
	assign		___462_t ___444_f 	%line{30} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:142
#     sum += t * amp;
	mul		$tmp218 ___462_t ___460_amp 	%line{142} %argrw{"wrr"}
	add		___460_sum ___460_sum $tmp218 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:143
#     maxamp += amp;
	add		___460_maxamp ___460_maxamp ___460_amp 	%line{143} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:144
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 562 	%line{144} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp220 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp219 $tmp220 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:144
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___460_amp ___460_amp $tmp219 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{144} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:145
#     fscale *= 2.0;
	mul		___460_fscale ___460_fscale $const17 	%line{145} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:140
#   for (int i = 0; i <= n; i++) {
	assign		$tmp221 ___461_i 	%line{140} %argrw{"wr"}
	add		___461_i ___461_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:147
#   float rmd = octaves - floor(octaves);
	floor		$tmp222 ___460_octaves 	%line{147} %argrw{"wr"}
	sub		___460_rmd ___460_octaves $tmp222 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:148
#   if (rmd != 0.0) {
	neq		$tmp223 ___460_rmd $const3 	%line{148} %argrw{"wrr"}
	if		$tmp223 588 590 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:149
#     float t = safe_noise(fscale * p);
	mul		$tmp224 ___460_fscale ___516_p 	%line{149} %argrw{"wrr"}
	functioncall	$const14 578 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:27
#   float f = noise("noise", p);
	noise		___444_f $const15 $tmp224 	%line{27} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:28
#   if (isinf(f))
	isinf		$tmp225 ___444_f 	%line{28} %argrw{"wr"}
	if		$tmp225 577 577 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:29
#     return 0.5;
	assign		___463_t $const16 	%line{29} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:30
#   return f;
	assign		___463_t ___444_f 	%line{30} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:150
#     float sum2 = sum + t * amp;
	mul		$tmp226 ___463_t ___460_amp 	%line{150} %argrw{"wrr"}
	add		___463_sum2 ___460_sum $tmp226 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:151
#     sum /= maxamp;
	div		___460_sum ___460_sum ___460_maxamp 	%line{151} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:152
#     sum2 /= maxamp + amp;
	add		$tmp227 ___460_maxamp ___460_amp 	%line{152} %argrw{"wrr"}
	div		___463_sum2 ___463_sum2 $tmp227 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:153
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp228 $const10 ___460_rmd 	%line{153} %argrw{"wrr"}
	mul		$tmp229 $tmp228 ___460_sum 	%argrw{"wrr"}
	mul		$tmp230 ___460_rmd ___463_sum2 	%argrw{"wrr"}
	add		___516_value $tmp229 $tmp230 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:156
#     return sum / maxamp;
	div		___516_value ___460_sum ___460_maxamp 	%line{156} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:87
#                 fractal_noise(p + random_vector3_offset(3.0), detail, roughness),
	functioncall	$const25 601 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{87} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp233 $const6 $const23 $const3 	%line{32} %argrw{"wrrr"}
	mul		$tmp234 $tmp233 $const5 	%argrw{"wrr"}
	add		$tmp235 $const5 $tmp234 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp236 $const6 $const23 $const10 	%line{33} %argrw{"wrrr"}
	mul		$tmp237 $tmp236 $const5 	%argrw{"wrr"}
	add		$tmp238 $const5 $tmp237 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp239 $const6 $const23 $const17 	%line{34} %argrw{"wrrr"}
	mul		$tmp240 $tmp239 $const5 	%argrw{"wrr"}
	add		$tmp241 $const5 $tmp240 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp232 $tmp235 $tmp238 $tmp241 	%line{32} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:87
#                 fractal_noise(p + random_vector3_offset(3.0), detail, roughness),
	add		$tmp242 ___516_p $tmp232 	%line{87} %argrw{"wrr"}
	functioncall	$const9 657 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:134
#   float fscale = 1.0;
	assign		___460_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{134} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:135
#   float amp = 1.0;
	assign		___460_amp $const10 	%line{135} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:136
#   float maxamp = 0.0;
	assign		___460_maxamp $const3 	%line{136} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:137
#   float sum = 0.0;
	assign		___460_sum $const3 	%line{137} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:138
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 610 	%line{138} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp243 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___460_octaves $tmp243 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:139
#   int n = (int)octaves;
	assign		___460_n ___460_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{139} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:140
#   for (int i = 0; i <= n; i++) {
	for		$tmp245 613 615 631 633 	%line{140} %argrw{"r"}
	assign		___461_i $const13 	%argrw{"wr"}
	le		$tmp244 ___461_i ___460_n 	%argrw{"wrr"}
	neq		$tmp245 $tmp244 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:141
#     float t = safe_noise(fscale * p);
	mul		$tmp246 ___460_fscale $tmp242 	%line{141} %argrw{"wrr"}
	functioncall	$const14 623 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:27
#   float f = noise("noise", p);
	noise		___444_f $const15 $tmp246 	%line{27} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:28
#   if (isinf(f))
	isinf		$tmp247 ___444_f 	%line{28} %argrw{"wr"}
	if		$tmp247 622 622 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:29
#     return 0.5;
	assign		___462_t $const16 	%line{29} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:30
#   return f;
	assign		___462_t ___444_f 	%line{30} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:142
#     sum += t * amp;
	mul		$tmp248 ___462_t ___460_amp 	%line{142} %argrw{"wrr"}
	add		___460_sum ___460_sum $tmp248 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:143
#     maxamp += amp;
	add		___460_maxamp ___460_maxamp ___460_amp 	%line{143} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:144
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 629 	%line{144} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp250 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp249 $tmp250 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:144
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___460_amp ___460_amp $tmp249 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{144} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:145
#     fscale *= 2.0;
	mul		___460_fscale ___460_fscale $const17 	%line{145} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:140
#   for (int i = 0; i <= n; i++) {
	assign		$tmp251 ___461_i 	%line{140} %argrw{"wr"}
	add		___461_i ___461_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:147
#   float rmd = octaves - floor(octaves);
	floor		$tmp252 ___460_octaves 	%line{147} %argrw{"wr"}
	sub		___460_rmd ___460_octaves $tmp252 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:148
#   if (rmd != 0.0) {
	neq		$tmp253 ___460_rmd $const3 	%line{148} %argrw{"wrr"}
	if		$tmp253 655 657 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:149
#     float t = safe_noise(fscale * p);
	mul		$tmp254 ___460_fscale $tmp242 	%line{149} %argrw{"wrr"}
	functioncall	$const14 645 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:27
#   float f = noise("noise", p);
	noise		___444_f $const15 $tmp254 	%line{27} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:28
#   if (isinf(f))
	isinf		$tmp255 ___444_f 	%line{28} %argrw{"wr"}
	if		$tmp255 644 644 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:29
#     return 0.5;
	assign		___463_t $const16 	%line{29} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:30
#   return f;
	assign		___463_t ___444_f 	%line{30} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:150
#     float sum2 = sum + t * amp;
	mul		$tmp256 ___463_t ___460_amp 	%line{150} %argrw{"wrr"}
	add		___463_sum2 ___460_sum $tmp256 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:151
#     sum /= maxamp;
	div		___460_sum ___460_sum ___460_maxamp 	%line{151} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:152
#     sum2 /= maxamp + amp;
	add		$tmp257 ___460_maxamp ___460_amp 	%line{152} %argrw{"wrr"}
	div		___463_sum2 ___463_sum2 $tmp257 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:153
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp258 $const10 ___460_rmd 	%line{153} %argrw{"wrr"}
	mul		$tmp259 $tmp258 ___460_sum 	%argrw{"wrr"}
	mul		$tmp260 ___460_rmd ___463_sum2 	%argrw{"wrr"}
	add		$tmp231 $tmp259 $tmp260 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:156
#     return sum / maxamp;
	div		$tmp231 ___460_sum ___460_maxamp 	%line{156} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:88
#                 fractal_noise(p + random_vector3_offset(4.0), detail, roughness));
	functioncall	$const25 668 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{88} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp263 $const6 $const26 $const3 	%line{32} %argrw{"wrrr"}
	mul		$tmp264 $tmp263 $const5 	%argrw{"wrr"}
	add		$tmp265 $const5 $tmp264 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:33
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp266 $const6 $const26 $const10 	%line{33} %argrw{"wrrr"}
	mul		$tmp267 $tmp266 $const5 	%argrw{"wrr"}
	add		$tmp268 $const5 $tmp267 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:34
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp269 $const6 $const26 $const17 	%line{34} %argrw{"wrrr"}
	mul		$tmp270 $tmp269 $const5 	%argrw{"wrr"}
	add		$tmp271 $const5 $tmp270 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:32
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp262 $tmp265 $tmp268 $tmp271 	%line{32} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:88
#                 fractal_noise(p + random_vector3_offset(4.0), detail, roughness));
	add		$tmp272 ___516_p $tmp262 	%line{88} %argrw{"wrr"}
	functioncall	$const9 724 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:134
#   float fscale = 1.0;
	assign		___460_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{134} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:135
#   float amp = 1.0;
	assign		___460_amp $const10 	%line{135} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:136
#   float maxamp = 0.0;
	assign		___460_maxamp $const3 	%line{136} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:137
#   float sum = 0.0;
	assign		___460_sum $const3 	%line{137} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:138
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 677 	%line{138} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp273 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___460_octaves $tmp273 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:139
#   int n = (int)octaves;
	assign		___460_n ___460_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{139} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:140
#   for (int i = 0; i <= n; i++) {
	for		$tmp275 680 682 698 700 	%line{140} %argrw{"r"}
	assign		___461_i $const13 	%argrw{"wr"}
	le		$tmp274 ___461_i ___460_n 	%argrw{"wrr"}
	neq		$tmp275 $tmp274 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:141
#     float t = safe_noise(fscale * p);
	mul		$tmp276 ___460_fscale $tmp272 	%line{141} %argrw{"wrr"}
	functioncall	$const14 690 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:27
#   float f = noise("noise", p);
	noise		___444_f $const15 $tmp276 	%line{27} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:28
#   if (isinf(f))
	isinf		$tmp277 ___444_f 	%line{28} %argrw{"wr"}
	if		$tmp277 689 689 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:29
#     return 0.5;
	assign		___462_t $const16 	%line{29} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:30
#   return f;
	assign		___462_t ___444_f 	%line{30} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:142
#     sum += t * amp;
	mul		$tmp278 ___462_t ___460_amp 	%line{142} %argrw{"wrr"}
	add		___460_sum ___460_sum $tmp278 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:143
#     maxamp += amp;
	add		___460_maxamp ___460_maxamp ___460_amp 	%line{143} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:144
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 696 	%line{144} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp280 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp279 $tmp280 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:144
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___460_amp ___460_amp $tmp279 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{144} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:145
#     fscale *= 2.0;
	mul		___460_fscale ___460_fscale $const17 	%line{145} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:140
#   for (int i = 0; i <= n; i++) {
	assign		$tmp281 ___461_i 	%line{140} %argrw{"wr"}
	add		___461_i ___461_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:147
#   float rmd = octaves - floor(octaves);
	floor		$tmp282 ___460_octaves 	%line{147} %argrw{"wr"}
	sub		___460_rmd ___460_octaves $tmp282 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:148
#   if (rmd != 0.0) {
	neq		$tmp283 ___460_rmd $const3 	%line{148} %argrw{"wrr"}
	if		$tmp283 722 724 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:149
#     float t = safe_noise(fscale * p);
	mul		$tmp284 ___460_fscale $tmp272 	%line{149} %argrw{"wrr"}
	functioncall	$const14 712 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:27
#   float f = noise("noise", p);
	noise		___444_f $const15 $tmp284 	%line{27} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:28
#   if (isinf(f))
	isinf		$tmp285 ___444_f 	%line{28} %argrw{"wr"}
	if		$tmp285 711 711 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:29
#     return 0.5;
	assign		___463_t $const16 	%line{29} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:30
#   return f;
	assign		___463_t ___444_f 	%line{30} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:150
#     float sum2 = sum + t * amp;
	mul		$tmp286 ___463_t ___460_amp 	%line{150} %argrw{"wrr"}
	add		___463_sum2 ___460_sum $tmp286 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:151
#     sum /= maxamp;
	div		___460_sum ___460_sum ___460_maxamp 	%line{151} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:152
#     sum2 /= maxamp + amp;
	add		$tmp287 ___460_maxamp ___460_amp 	%line{152} %argrw{"wrr"}
	div		___463_sum2 ___463_sum2 $tmp287 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:153
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp288 $const10 ___460_rmd 	%line{153} %argrw{"wrr"}
	mul		$tmp289 $tmp288 ___460_sum 	%argrw{"wrr"}
	mul		$tmp290 ___460_rmd ___463_sum2 	%argrw{"wrr"}
	add		$tmp261 $tmp289 $tmp290 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:156
#     return sum / maxamp;
	div		$tmp261 ___460_sum ___460_maxamp 	%line{156} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:86
#   Color = color(value,
	color		Color ___516_value $tmp231 $tmp261 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{86} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:89
#   return value;
	assign		Fac ___516_value 	%line{89} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:135
#   else if (dimensions == "4D")
	eq		$tmp291 dimensions $const27 	%line{135} %argrw{"wrr"}
	if		$tmp291 1115 1116 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:136
#     Fac = noise_texture(vector4(p[0], p[1], p[2], w), Detail, Roughness, Distortion, Color);
	compref		$tmp292.x p $const13 	%line{136} %argrw{"wrr"}
	compref		$tmp292.y p $const18 	%argrw{"wrr"}
	compref		$tmp292.z p $const28 	%argrw{"wrr"}
	assign		$tmp292.w w 	%argrw{"wr"}
	functioncall	$const2 1115 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:95
#   vector4 p = co;
	assign		___518_p.x $tmp292.x 	%line{95} %argrw{"wr"}
	assign		___518_p.y $tmp292.y 	%argrw{"wr"}
	assign		___518_p.z $tmp292.z 	%argrw{"wr"}
	assign		___518_p.w $tmp292.w 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:96
#   if (distortion != 0.0) {
	neq		$tmp293 Distortion $const3 	%line{96} %argrw{"wrr"}
	if		$tmp293 852 852 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	functioncall	$const29 752 	%line{97} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:39
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp298 $const6 $const3 $const3 	%line{39} %argrw{"wrrr"}
	mul		$tmp299 $tmp298 $const5 	%argrw{"wrr"}
	add		$tmp297.x $const5 $tmp299 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp300 $const6 $const3 $const10 	%line{40} %argrw{"wrrr"}
	mul		$tmp301 $tmp300 $const5 	%argrw{"wrr"}
	add		$tmp297.y $const5 $tmp301 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp302 $const6 $const3 $const17 	%line{41} %argrw{"wrrr"}
	mul		$tmp303 $tmp302 $const5 	%argrw{"wrr"}
	add		$tmp297.z $const5 $tmp303 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp304 $const6 $const3 $const23 	%line{42} %argrw{"wrrr"}
	mul		$tmp305 $tmp304 $const5 	%argrw{"wrr"}
	add		$tmp297.w $const5 $tmp305 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 757 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp296.x ___518_p.x $tmp297.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp296.y ___518_p.y $tmp297.y 	%argrw{"wrr"}
	add		$tmp296.z ___518_p.z $tmp297.z 	%argrw{"wrr"}
	add		$tmp296.w ___518_p.w $tmp297.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	functioncall	$const7 765 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{97} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp306 $tmp296.x $tmp296.y $tmp296.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const8 $tmp306 $tmp296.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp307 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp307 764 764 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp295 $const3 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp295 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	mul		$tmp294.x $tmp295 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{97} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:98
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	functioncall	$const29 779 	%line{98} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:39
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp311 $const6 $const10 $const3 	%line{39} %argrw{"wrrr"}
	mul		$tmp312 $tmp311 $const5 	%argrw{"wrr"}
	add		$tmp310.x $const5 $tmp312 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp313 $const6 $const10 $const10 	%line{40} %argrw{"wrrr"}
	mul		$tmp314 $tmp313 $const5 	%argrw{"wrr"}
	add		$tmp310.y $const5 $tmp314 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp315 $const6 $const10 $const17 	%line{41} %argrw{"wrrr"}
	mul		$tmp316 $tmp315 $const5 	%argrw{"wrr"}
	add		$tmp310.z $const5 $tmp316 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp317 $const6 $const10 $const23 	%line{42} %argrw{"wrrr"}
	mul		$tmp318 $tmp317 $const5 	%argrw{"wrr"}
	add		$tmp310.w $const5 $tmp318 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 784 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp309.x ___518_p.x $tmp310.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp309.y ___518_p.y $tmp310.y 	%argrw{"wrr"}
	add		$tmp309.z ___518_p.z $tmp310.z 	%argrw{"wrr"}
	add		$tmp309.w ___518_p.w $tmp310.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:98
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	functioncall	$const7 792 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{98} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp319 $tmp309.x $tmp309.y $tmp309.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const8 $tmp319 $tmp309.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp320 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp320 791 791 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp308 $const3 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp308 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:98
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	mul		$tmp294.y $tmp308 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{98} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	functioncall	$const29 806 	%line{99} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:39
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp324 $const6 $const17 $const3 	%line{39} %argrw{"wrrr"}
	mul		$tmp325 $tmp324 $const5 	%argrw{"wrr"}
	add		$tmp323.x $const5 $tmp325 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp326 $const6 $const17 $const10 	%line{40} %argrw{"wrrr"}
	mul		$tmp327 $tmp326 $const5 	%argrw{"wrr"}
	add		$tmp323.y $const5 $tmp327 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp328 $const6 $const17 $const17 	%line{41} %argrw{"wrrr"}
	mul		$tmp329 $tmp328 $const5 	%argrw{"wrr"}
	add		$tmp323.z $const5 $tmp329 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp330 $const6 $const17 $const23 	%line{42} %argrw{"wrrr"}
	mul		$tmp331 $tmp330 $const5 	%argrw{"wrr"}
	add		$tmp323.w $const5 $tmp331 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 811 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp322.x ___518_p.x $tmp323.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp322.y ___518_p.y $tmp323.y 	%argrw{"wrr"}
	add		$tmp322.z ___518_p.z $tmp323.z 	%argrw{"wrr"}
	add		$tmp322.w ___518_p.w $tmp323.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	functioncall	$const7 819 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{99} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp332 $tmp322.x $tmp322.y $tmp322.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const8 $tmp332 $tmp322.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp333 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp333 818 818 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp321 $const3 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp321 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:99
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	mul		$tmp294.z $tmp321 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{99} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	functioncall	$const29 833 	%line{100} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:39
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp337 $const6 $const23 $const3 	%line{39} %argrw{"wrrr"}
	mul		$tmp338 $tmp337 $const5 	%argrw{"wrr"}
	add		$tmp336.x $const5 $tmp338 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp339 $const6 $const23 $const10 	%line{40} %argrw{"wrrr"}
	mul		$tmp340 $tmp339 $const5 	%argrw{"wrr"}
	add		$tmp336.y $const5 $tmp340 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp341 $const6 $const23 $const17 	%line{41} %argrw{"wrrr"}
	mul		$tmp342 $tmp341 $const5 	%argrw{"wrr"}
	add		$tmp336.z $const5 $tmp342 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp343 $const6 $const23 $const23 	%line{42} %argrw{"wrrr"}
	mul		$tmp344 $tmp343 $const5 	%argrw{"wrr"}
	add		$tmp336.w $const5 $tmp344 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 838 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp335.x ___518_p.x $tmp336.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp335.y ___518_p.y $tmp336.y 	%argrw{"wrr"}
	add		$tmp335.z ___518_p.z $tmp336.z 	%argrw{"wrr"}
	add		$tmp335.w ___518_p.w $tmp336.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	functioncall	$const7 846 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{100} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp345 $tmp335.x $tmp335.y $tmp335.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const8 $tmp345 $tmp335.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp346 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp346 845 845 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp334 $const3 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp334 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	mul		$tmp294.w $tmp334 Distortion 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{100} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 852 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___518_p.x ___518_p.x $tmp294.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___518_p.y ___518_p.y $tmp294.y 	%argrw{"wrr"}
	add		___518_p.z ___518_p.z $tmp294.z 	%argrw{"wrr"}
	add		___518_p.w ___518_p.w $tmp294.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:103
#   float value = fractal_noise(p, detail, roughness);
	functioncall	$const9 927 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{103} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:163
#   float fscale = 1.0;
	assign		___465_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{163} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:164
#   float amp = 1.0;
	assign		___465_amp $const10 	%line{164} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:165
#   float maxamp = 0.0;
	assign		___465_maxamp $const3 	%line{165} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:166
#   float sum = 0.0;
	assign		___465_sum $const3 	%line{166} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:167
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 860 	%line{167} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp347 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___465_octaves $tmp347 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:168
#   int n = (int)octaves;
	assign		___465_n ___465_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{168} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:169
#   for (int i = 0; i <= n; i++) {
	for		$tmp349 863 865 891 893 	%line{169} %argrw{"r"}
	assign		___466_i $const13 	%argrw{"wr"}
	le		$tmp348 ___466_i ___465_n 	%argrw{"wrr"}
	neq		$tmp349 $tmp348 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 875 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp351.x ___465_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp351.y ___465_fscale 	%argrw{"wr"}
	assign		$tmp351.z ___465_fscale 	%argrw{"wr"}
	assign		$tmp351.w ___465_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 875 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp350.x $tmp351.x ___518_p.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp350.y $tmp351.y ___518_p.y 	%argrw{"wrr"}
	mul		$tmp350.z $tmp351.z ___518_p.z 	%argrw{"wrr"}
	mul		$tmp350.w $tmp351.w ___518_p.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:170
#     float t = safe_noise(fscale * p);
	functioncall	$const14 883 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{170} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:35
#   float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp352 $tmp350.x $tmp350.y $tmp350.z 	%line{35} %argrw{"wrrr"}
	noise		___445_f $const15 $tmp352 $tmp350.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:36
#   if (isinf(f))
	isinf		$tmp353 ___445_f 	%line{36} %argrw{"wr"}
	if		$tmp353 882 882 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:37
#     return 0.5;
	assign		___467_t $const16 	%line{37} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:38
#   return f;
	assign		___467_t ___445_f 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:171
#     sum += t * amp;
	mul		$tmp354 ___467_t ___465_amp 	%line{171} %argrw{"wrr"}
	add		___465_sum ___465_sum $tmp354 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:172
#     maxamp += amp;
	add		___465_maxamp ___465_maxamp ___465_amp 	%line{172} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:173
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 889 	%line{173} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp356 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp355 $tmp356 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:173
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___465_amp ___465_amp $tmp355 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{173} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:174
#     fscale *= 2.0;
	mul		___465_fscale ___465_fscale $const17 	%line{174} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:169
#   for (int i = 0; i <= n; i++) {
	assign		$tmp357 ___466_i 	%line{169} %argrw{"wr"}
	add		___466_i ___466_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:176
#   float rmd = octaves - floor(octaves);
	floor		$tmp358 ___465_octaves 	%line{176} %argrw{"wr"}
	sub		___465_rmd ___465_octaves $tmp358 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:177
#   if (rmd != 0.0) {
	neq		$tmp359 ___465_rmd $const3 	%line{177} %argrw{"wrr"}
	if		$tmp359 925 927 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 907 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp361.x ___465_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp361.y ___465_fscale 	%argrw{"wr"}
	assign		$tmp361.z ___465_fscale 	%argrw{"wr"}
	assign		$tmp361.w ___465_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 907 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp360.x $tmp361.x ___518_p.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp360.y $tmp361.y ___518_p.y 	%argrw{"wrr"}
	mul		$tmp360.z $tmp361.z ___518_p.z 	%argrw{"wrr"}
	mul		$tmp360.w $tmp361.w ___518_p.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:178
#     float t = safe_noise(fscale * p);
	functioncall	$const14 915 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{178} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:35
#   float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp362 $tmp360.x $tmp360.y $tmp360.z 	%line{35} %argrw{"wrrr"}
	noise		___445_f $const15 $tmp362 $tmp360.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:36
#   if (isinf(f))
	isinf		$tmp363 ___445_f 	%line{36} %argrw{"wr"}
	if		$tmp363 914 914 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:37
#     return 0.5;
	assign		___468_t $const16 	%line{37} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:38
#   return f;
	assign		___468_t ___445_f 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:179
#     float sum2 = sum + t * amp;
	mul		$tmp364 ___468_t ___465_amp 	%line{179} %argrw{"wrr"}
	add		___468_sum2 ___465_sum $tmp364 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:180
#     sum /= maxamp;
	div		___465_sum ___465_sum ___465_maxamp 	%line{180} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:181
#     sum2 /= maxamp + amp;
	add		$tmp365 ___465_maxamp ___465_amp 	%line{181} %argrw{"wrr"}
	div		___468_sum2 ___468_sum2 $tmp365 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:182
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp366 $const10 ___465_rmd 	%line{182} %argrw{"wrr"}
	mul		$tmp367 $tmp366 ___465_sum 	%argrw{"wrr"}
	mul		$tmp368 ___465_rmd ___468_sum2 	%argrw{"wrr"}
	add		___518_value $tmp367 $tmp368 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:185
#     return sum / maxamp;
	div		___518_value ___465_sum ___465_maxamp 	%line{185} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:105
#                 fractal_noise(p + random_vector4_offset(4.0), detail, roughness),
	functioncall	$const29 940 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{105} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:39
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp372 $const6 $const26 $const3 	%line{39} %argrw{"wrrr"}
	mul		$tmp373 $tmp372 $const5 	%argrw{"wrr"}
	add		$tmp371.x $const5 $tmp373 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp374 $const6 $const26 $const10 	%line{40} %argrw{"wrrr"}
	mul		$tmp375 $tmp374 $const5 	%argrw{"wrr"}
	add		$tmp371.y $const5 $tmp375 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp376 $const6 $const26 $const17 	%line{41} %argrw{"wrrr"}
	mul		$tmp377 $tmp376 $const5 	%argrw{"wrr"}
	add		$tmp371.z $const5 $tmp377 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp378 $const6 $const26 $const23 	%line{42} %argrw{"wrrr"}
	mul		$tmp379 $tmp378 $const5 	%argrw{"wrr"}
	add		$tmp371.w $const5 $tmp379 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 945 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp370.x ___518_p.x $tmp371.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp370.y ___518_p.y $tmp371.y 	%argrw{"wrr"}
	add		$tmp370.z ___518_p.z $tmp371.z 	%argrw{"wrr"}
	add		$tmp370.w ___518_p.w $tmp371.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:105
#                 fractal_noise(p + random_vector4_offset(4.0), detail, roughness),
	functioncall	$const9 1020 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{105} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:163
#   float fscale = 1.0;
	assign		___465_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{163} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:164
#   float amp = 1.0;
	assign		___465_amp $const10 	%line{164} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:165
#   float maxamp = 0.0;
	assign		___465_maxamp $const3 	%line{165} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:166
#   float sum = 0.0;
	assign		___465_sum $const3 	%line{166} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:167
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 953 	%line{167} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp380 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___465_octaves $tmp380 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:168
#   int n = (int)octaves;
	assign		___465_n ___465_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{168} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:169
#   for (int i = 0; i <= n; i++) {
	for		$tmp382 956 958 984 986 	%line{169} %argrw{"r"}
	assign		___466_i $const13 	%argrw{"wr"}
	le		$tmp381 ___466_i ___465_n 	%argrw{"wrr"}
	neq		$tmp382 $tmp381 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 968 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp384.x ___465_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp384.y ___465_fscale 	%argrw{"wr"}
	assign		$tmp384.z ___465_fscale 	%argrw{"wr"}
	assign		$tmp384.w ___465_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 968 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp383.x $tmp384.x $tmp370.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp383.y $tmp384.y $tmp370.y 	%argrw{"wrr"}
	mul		$tmp383.z $tmp384.z $tmp370.z 	%argrw{"wrr"}
	mul		$tmp383.w $tmp384.w $tmp370.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:170
#     float t = safe_noise(fscale * p);
	functioncall	$const14 976 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{170} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:35
#   float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp385 $tmp383.x $tmp383.y $tmp383.z 	%line{35} %argrw{"wrrr"}
	noise		___445_f $const15 $tmp385 $tmp383.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:36
#   if (isinf(f))
	isinf		$tmp386 ___445_f 	%line{36} %argrw{"wr"}
	if		$tmp386 975 975 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:37
#     return 0.5;
	assign		___467_t $const16 	%line{37} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:38
#   return f;
	assign		___467_t ___445_f 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:171
#     sum += t * amp;
	mul		$tmp387 ___467_t ___465_amp 	%line{171} %argrw{"wrr"}
	add		___465_sum ___465_sum $tmp387 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:172
#     maxamp += amp;
	add		___465_maxamp ___465_maxamp ___465_amp 	%line{172} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:173
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 982 	%line{173} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp389 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp388 $tmp389 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:173
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___465_amp ___465_amp $tmp388 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{173} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:174
#     fscale *= 2.0;
	mul		___465_fscale ___465_fscale $const17 	%line{174} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:169
#   for (int i = 0; i <= n; i++) {
	assign		$tmp390 ___466_i 	%line{169} %argrw{"wr"}
	add		___466_i ___466_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:176
#   float rmd = octaves - floor(octaves);
	floor		$tmp391 ___465_octaves 	%line{176} %argrw{"wr"}
	sub		___465_rmd ___465_octaves $tmp391 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:177
#   if (rmd != 0.0) {
	neq		$tmp392 ___465_rmd $const3 	%line{177} %argrw{"wrr"}
	if		$tmp392 1018 1020 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 1000 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp394.x ___465_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp394.y ___465_fscale 	%argrw{"wr"}
	assign		$tmp394.z ___465_fscale 	%argrw{"wr"}
	assign		$tmp394.w ___465_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 1000 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp393.x $tmp394.x $tmp370.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp393.y $tmp394.y $tmp370.y 	%argrw{"wrr"}
	mul		$tmp393.z $tmp394.z $tmp370.z 	%argrw{"wrr"}
	mul		$tmp393.w $tmp394.w $tmp370.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:178
#     float t = safe_noise(fscale * p);
	functioncall	$const14 1008 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{178} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:35
#   float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp395 $tmp393.x $tmp393.y $tmp393.z 	%line{35} %argrw{"wrrr"}
	noise		___445_f $const15 $tmp395 $tmp393.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:36
#   if (isinf(f))
	isinf		$tmp396 ___445_f 	%line{36} %argrw{"wr"}
	if		$tmp396 1007 1007 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:37
#     return 0.5;
	assign		___468_t $const16 	%line{37} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:38
#   return f;
	assign		___468_t ___445_f 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:179
#     float sum2 = sum + t * amp;
	mul		$tmp397 ___468_t ___465_amp 	%line{179} %argrw{"wrr"}
	add		___468_sum2 ___465_sum $tmp397 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:180
#     sum /= maxamp;
	div		___465_sum ___465_sum ___465_maxamp 	%line{180} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:181
#     sum2 /= maxamp + amp;
	add		$tmp398 ___465_maxamp ___465_amp 	%line{181} %argrw{"wrr"}
	div		___468_sum2 ___468_sum2 $tmp398 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:182
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp399 $const10 ___465_rmd 	%line{182} %argrw{"wrr"}
	mul		$tmp400 $tmp399 ___465_sum 	%argrw{"wrr"}
	mul		$tmp401 ___465_rmd ___468_sum2 	%argrw{"wrr"}
	add		$tmp369 $tmp400 $tmp401 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:185
#     return sum / maxamp;
	div		$tmp369 ___465_sum ___465_maxamp 	%line{185} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:106
#                 fractal_noise(p + random_vector4_offset(5.0), detail, roughness));
	functioncall	$const29 1033 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{106} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:39
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp405 $const6 $const30 $const3 	%line{39} %argrw{"wrrr"}
	mul		$tmp406 $tmp405 $const5 	%argrw{"wrr"}
	add		$tmp404.x $const5 $tmp406 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:40
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp407 $const6 $const30 $const10 	%line{40} %argrw{"wrrr"}
	mul		$tmp408 $tmp407 $const5 	%argrw{"wrr"}
	add		$tmp404.y $const5 $tmp408 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:41
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp409 $const6 $const30 $const17 	%line{41} %argrw{"wrrr"}
	mul		$tmp410 $tmp409 $const5 	%argrw{"wrr"}
	add		$tmp404.z $const5 $tmp410 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:42
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp411 $const6 $const30 $const23 	%line{42} %argrw{"wrrr"}
	mul		$tmp412 $tmp411 $const5 	%argrw{"wrr"}
	add		$tmp404.w $const5 $tmp412 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const21 1038 	%line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp403.x ___518_p.x $tmp404.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp403.y ___518_p.y $tmp404.y 	%argrw{"wrr"}
	add		$tmp403.z ___518_p.z $tmp404.z 	%argrw{"wrr"}
	add		$tmp403.w ___518_p.w $tmp404.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:106
#                 fractal_noise(p + random_vector4_offset(5.0), detail, roughness));
	functioncall	$const9 1113 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{106} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:163
#   float fscale = 1.0;
	assign		___465_fscale $const10 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{163} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:164
#   float amp = 1.0;
	assign		___465_amp $const10 	%line{164} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:165
#   float maxamp = 0.0;
	assign		___465_maxamp $const3 	%line{165} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:166
#   float sum = 0.0;
	assign		___465_sum $const3 	%line{166} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:167
#   float octaves = clamp(details, 0.0, 15.0);
	functioncall	$const12 1046 	%line{167} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp413 Detail $const11 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___465_octaves $tmp413 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:168
#   int n = (int)octaves;
	assign		___465_n ___465_octaves 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{168} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:169
#   for (int i = 0; i <= n; i++) {
	for		$tmp415 1049 1051 1077 1079 	%line{169} %argrw{"r"}
	assign		___466_i $const13 	%argrw{"wr"}
	le		$tmp414 ___466_i ___465_n 	%argrw{"wrr"}
	neq		$tmp415 $tmp414 $const13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 1061 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp417.x ___465_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp417.y ___465_fscale 	%argrw{"wr"}
	assign		$tmp417.z ___465_fscale 	%argrw{"wr"}
	assign		$tmp417.w ___465_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 1061 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp416.x $tmp417.x $tmp403.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp416.y $tmp417.y $tmp403.y 	%argrw{"wrr"}
	mul		$tmp416.z $tmp417.z $tmp403.z 	%argrw{"wrr"}
	mul		$tmp416.w $tmp417.w $tmp403.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:170
#     float t = safe_noise(fscale * p);
	functioncall	$const14 1069 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{170} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:35
#   float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp418 $tmp416.x $tmp416.y $tmp416.z 	%line{35} %argrw{"wrrr"}
	noise		___445_f $const15 $tmp418 $tmp416.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:36
#   if (isinf(f))
	isinf		$tmp419 ___445_f 	%line{36} %argrw{"wr"}
	if		$tmp419 1068 1068 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:37
#     return 0.5;
	assign		___467_t $const16 	%line{37} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:38
#   return f;
	assign		___467_t ___445_f 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:171
#     sum += t * amp;
	mul		$tmp420 ___467_t ___465_amp 	%line{171} %argrw{"wrr"}
	add		___465_sum ___465_sum $tmp420 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:172
#     maxamp += amp;
	add		___465_maxamp ___465_maxamp ___465_amp 	%line{172} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:173
#     amp *= clamp(roughness, 0.0, 1.0);
	functioncall	$const12 1075 	%line{173} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp422 Roughness $const10 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp421 $tmp422 $const3 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:173
#     amp *= clamp(roughness, 0.0, 1.0);
	mul		___465_amp ___465_amp $tmp421 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{173} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:174
#     fscale *= 2.0;
	mul		___465_fscale ___465_fscale $const17 	%line{174} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:169
#   for (int i = 0; i <= n; i++) {
	assign		$tmp423 ___466_i 	%line{169} %argrw{"wr"}
	add		___466_i ___466_i $const18 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:176
#   float rmd = octaves - floor(octaves);
	floor		$tmp424 ___465_octaves 	%line{176} %argrw{"wr"}
	sub		___465_rmd ___465_octaves $tmp424 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:177
#   if (rmd != 0.0) {
	neq		$tmp425 ___465_rmd $const3 	%line{177} %argrw{"wrr"}
	if		$tmp425 1111 1113 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 1093 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp427.x ___465_fscale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp427.y ___465_fscale 	%argrw{"wr"}
	assign		$tmp427.z ___465_fscale 	%argrw{"wr"}
	assign		$tmp427.w ___465_fscale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
# 
	functioncall	$const22 1093 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp426.x $tmp427.x $tmp403.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp426.y $tmp427.y $tmp403.y 	%argrw{"wrr"}
	mul		$tmp426.z $tmp427.z $tmp403.z 	%argrw{"wrr"}
	mul		$tmp426.w $tmp427.w $tmp403.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:178
#     float t = safe_noise(fscale * p);
	functioncall	$const14 1101 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{178} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:35
#   float f = noise("noise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp428 $tmp426.x $tmp426.y $tmp426.z 	%line{35} %argrw{"wrrr"}
	noise		___445_f $const15 $tmp428 $tmp426.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:36
#   if (isinf(f))
	isinf		$tmp429 ___445_f 	%line{36} %argrw{"wr"}
	if		$tmp429 1100 1100 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:37
#     return 0.5;
	assign		___468_t $const16 	%line{37} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:38
#   return f;
	assign		___468_t ___445_f 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:179
#     float sum2 = sum + t * amp;
	mul		$tmp430 ___468_t ___465_amp 	%line{179} %argrw{"wrr"}
	add		___468_sum2 ___465_sum $tmp430 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:180
#     sum /= maxamp;
	div		___465_sum ___465_sum ___465_maxamp 	%line{180} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:181
#     sum2 /= maxamp + amp;
	add		$tmp431 ___465_maxamp ___465_amp 	%line{181} %argrw{"wrr"}
	div		___468_sum2 ___468_sum2 $tmp431 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:182
#     return (1.0 - rmd) * sum + rmd * sum2;
	sub		$tmp432 $const10 ___465_rmd 	%line{182} %argrw{"wrr"}
	mul		$tmp433 $tmp432 ___465_sum 	%argrw{"wrr"}
	mul		$tmp434 ___465_rmd ___468_sum2 	%argrw{"wrr"}
	add		$tmp402 $tmp433 $tmp434 	%argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:185
#     return sum / maxamp;
	div		$tmp402 ___465_sum ___465_maxamp 	%line{185} %argrw{"wrr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:104
#   Color = color(value,
	color		Color ___518_value $tmp369 $tmp402 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{104} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:107
#   return value;
	assign		Fac ___518_value 	%line{107} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:138
#     error("Unknown dimension!");
	error		$const31 	%line{138} %argrw{"r"}
	end
