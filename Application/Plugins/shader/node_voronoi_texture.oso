OpenShadingLanguage 1.00
# Compiled by oslc 1.13.7.0
# options: -q -O2 -IF:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders -IF:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders -o F:/Repositories/cycles_repo/cycles/build/src/kernel/osl/shaders/node_voronoi_texture.oso
shader node_voronoi_texture
param	int	use_mapping	0		%read{27,27} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{28,28} %write{2147483647,-1}
param	string	dimensions	"3D"		%read{36,2998} %write{2147483647,-1}
param	string	feature	"f1"		%read{2,762} %write{2147483647,-1}
param	string	metric	"euclidean"		%read{3,3} %write{2147483647,-1}
param	int	use_normalize	0		%read{25,25} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{26,26} %write{0,0} %initexpr
param	float	WIn	0		%read{29,29} %write{2147483647,-1}
param	float	Scale	5		%read{4,30} %write{2147483647,-1}
param	float	Detail	0		%read{6,6} %write{2147483647,-1}
param	float	Roughness	0.5		%read{10,10} %write{2147483647,-1}
param	float	Lacunarity	2		%read{13,13} %write{2147483647,-1}
param	float	Smoothness	5		%read{14,14} %write{2147483647,-1}
param	float	Exponent	1		%read{19,19} %write{2147483647,-1}
param	float	Randomness	1		%read{21,21} %write{2147483647,-1}
oparam	float	Distance	0		%read{2147483647,-1} %write{108,3949}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{1677,3950}
oparam	point	Position	0 0 0		%read{2147483647,-1} %write{1,3951} %initexpr
oparam	float	WOut	0		%read{2147483647,-1} %write{1678,3952}
oparam	float	Radius	0		%read{2147483647,-1} %write{817,1341}
global	point	P	%read{0,1} %write{2147483647,-1}
local	float	___383_b_inv	%read{127,289} %write{127,289}
local	float	___438_b_inv	%read{470,3918} %write{470,3918}
local	float	___519_cellPosition	%read{1372,1645} %write{1372,1645}
local	float	___519_localPosition	%read{1372,1645} %write{1372,1645}
local	float	___519_minDistance	%read{1372,1645} %write{1372,1645}
local	float	___519_targetOffset	%read{1372,1645} %write{1372,1645}
local	float	___519_targetPosition	%read{1372,1645} %write{1372,1645}
local	int	___520_i	%read{1372,1645} %write{1372,1645}
local	float	___521_cellOffset	%read{1372,1645} %write{1372,1645}
local	float	___521_pointPosition	%read{1372,1645} %write{1372,1645}
local	float	___521_distanceToPoint	%read{1372,1645} %write{1372,1645}
local	float	___519_octave.Distance	%read{1372,1645} %write{1372,1645} %mystruct{___519_octave} %mystructfield{0}
local	color	___519_octave.Color	%read{1372,1645} %write{1372,1645} %mystruct{___519_octave} %mystructfield{1}
local	float	___519_octave.Position.x	%read{1372,1645} %write{1372,1645} %mystruct{___519_octave} %mystructfield{0}
local	float	___519_octave.Position.y	%read{1372,1645} %write{1372,1645} %mystruct{___519_octave} %mystructfield{1}
local	float	___519_octave.Position.z	%read{1372,1645} %write{1372,1645} %mystruct{___519_octave} %mystructfield{2}
local	float	___519_octave.Position.w	%read{1372,1645} %write{1372,1645} %mystruct{___519_octave} %mystructfield{3}
local	float	___523_cellPosition	%read{1372,1645} %write{1372,1645}
local	float	___523_localPosition	%read{1372,1645} %write{1372,1645}
local	float	___523_smoothDistance	%read{1372,1645} %write{1372,1645}
local	float	___523_smoothPosition	%read{1372,1645} %write{1372,1645}
local	point	___523_smoothColor	%read{1372,1645} %write{1372,1645}
local	float	___523_h	%read{1372,1645} %write{1372,1645}
local	int	___524_i	%read{1372,1645} %write{1372,1645}
local	float	___525_cellOffset	%read{1372,1645} %write{1372,1645}
local	float	___525_pointPosition	%read{1372,1645} %write{1372,1645}
local	float	___525_distanceToPoint	%read{1372,1645} %write{1372,1645}
local	float	___525_correctionFactor	%read{1372,1645} %write{1372,1645}
local	color	___525_cellColor	%read{1372,1645} %write{1372,1645}
local	float	___523_octave.Distance	%read{1372,1645} %write{1372,1645} %mystruct{___523_octave} %mystructfield{0}
local	color	___523_octave.Color	%read{1372,1645} %write{1372,1645} %mystruct{___523_octave} %mystructfield{1}
local	float	___523_octave.Position.x	%read{1372,1645} %write{1372,1645} %mystruct{___523_octave} %mystructfield{0}
local	float	___523_octave.Position.y	%read{1372,1645} %write{1372,1645} %mystruct{___523_octave} %mystructfield{1}
local	float	___523_octave.Position.z	%read{1372,1645} %write{1372,1645} %mystruct{___523_octave} %mystructfield{2}
local	float	___523_octave.Position.w	%read{1372,1645} %write{1372,1645} %mystruct{___523_octave} %mystructfield{3}
local	float	___526_cellPosition	%read{1372,1645} %write{1372,1645}
local	float	___526_localPosition	%read{1372,1645} %write{1372,1645}
local	float	___526_distanceF1	%read{1372,1645} %write{1372,1645}
local	float	___526_distanceF2	%read{1372,1645} %write{1372,1645}
local	float	___526_offsetF1	%read{1372,1645} %write{1372,1645}
local	float	___526_positionF1	%read{1372,1645} %write{1372,1645}
local	float	___526_offsetF2	%read{1372,1645} %write{1372,1645}
local	float	___526_positionF2	%read{1372,1645} %write{1372,1645}
local	int	___527_i	%read{1372,1645} %write{1372,1645}
local	float	___528_cellOffset	%read{1372,1645} %write{1372,1645}
local	float	___528_pointPosition	%read{1372,1645} %write{1372,1645}
local	float	___528_distanceToPoint	%read{1372,1645} %write{1372,1645}
local	float	___526_octave.Distance	%read{1372,1645} %write{1372,1645} %mystruct{___526_octave} %mystructfield{0}
local	color	___526_octave.Color	%read{1372,1645} %write{1372,1645} %mystruct{___526_octave} %mystructfield{1}
local	float	___526_octave.Position.x	%read{1372,1645} %write{1372,1645} %mystruct{___526_octave} %mystructfield{0}
local	float	___526_octave.Position.y	%read{1372,1645} %write{1372,1645} %mystruct{___526_octave} %mystructfield{1}
local	float	___526_octave.Position.z	%read{1372,1645} %write{1372,1645} %mystruct{___526_octave} %mystructfield{2}
local	float	___526_octave.Position.w	%read{1372,1645} %write{1372,1645} %mystruct{___526_octave} %mystructfield{3}
local	float	___531_cellPosition	%read{52,105} %write{52,105}
local	float	___531_localPosition	%read{52,105} %write{52,105}
local	float	___531_midPointPosition	%read{52,105} %write{52,105}
local	float	___531_leftPointPosition	%read{52,105} %write{52,105}
local	float	___531_rightPointPosition	%read{52,105} %write{52,105}
local	float	___531_distanceToMidLeft	%read{52,105} %write{52,105}
local	float	___531_distanceToMidRight	%read{52,105} %write{52,105}
local	float	___532_cellPosition	%read{768,814} %write{767,767}
local	float	___532_localPosition	%read{774,790} %write{768,768}
local	float	___532_closestPoint	%read{795,815} %write{769,790}
local	float	___532_closestPointOffset	%read{795,814} %write{770,790}
local	float	___532_minDistance	%read{774,814} %write{771,814}
local	int	___533_i	%read{774,790} %write{773,790}
local	float	___534_cellOffset	%read{774,790} %write{774,790}
local	float	___534_pointPosition	%read{774,790} %write{774,790}
local	float	___534_distanceToPoint	%read{774,790} %write{774,790}
local	float	___532_closestPointToClosestPoint	%read{815,815} %write{792,814}
local	int	___536_i	%read{795,814} %write{794,814}
local	float	___537_cellOffset	%read{795,814} %write{795,814}
local	float	___537_pointPosition	%read{795,814} %write{795,814}
local	float	___537_distanceToPoint	%read{795,814} %write{795,814}
local	float	___541_cellPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___541_cellPosition} %mystructfield{0}
local	float	___541_cellPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___541_cellPosition} %mystructfield{1}
local	float	___541_localPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___541_localPosition} %mystructfield{0}
local	float	___541_localPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___541_localPosition} %mystructfield{1}
local	float	___541_minDistance	%read{1758,2269} %write{1758,2269}
local	float	___541_targetOffset.x	%read{1758,2269} %write{1758,2269} %mystruct{___541_targetOffset} %mystructfield{0}
local	float	___541_targetOffset.y	%read{1758,2269} %write{1758,2269} %mystruct{___541_targetOffset} %mystructfield{1}
local	float	___541_targetPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___541_targetPosition} %mystructfield{0}
local	float	___541_targetPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___541_targetPosition} %mystructfield{1}
local	int	___542_j	%read{1758,2269} %write{1758,2269}
local	int	___544_i	%read{1758,2269} %write{1758,2269}
local	float	___545_cellOffset.x	%read{1758,2269} %write{1758,2269} %mystruct{___545_cellOffset} %mystructfield{0}
local	float	___545_cellOffset.y	%read{1758,2269} %write{1758,2269} %mystruct{___545_cellOffset} %mystructfield{1}
local	float	___545_pointPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___545_pointPosition} %mystructfield{0}
local	float	___545_pointPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___545_pointPosition} %mystructfield{1}
local	float	___545_distanceToPoint	%read{1758,2269} %write{1758,2269}
local	float	___541_octave.Distance	%read{1758,2269} %write{1758,2269} %mystruct{___541_octave} %mystructfield{0}
local	color	___541_octave.Color	%read{1758,2269} %write{1758,2269} %mystruct{___541_octave} %mystructfield{1}
local	float	___541_octave.Position.x	%read{1758,2269} %write{1758,2269} %mystruct{___541_octave} %mystructfield{0}
local	float	___541_octave.Position.y	%read{1758,2269} %write{1758,2269} %mystruct{___541_octave} %mystructfield{1}
local	float	___541_octave.Position.z	%read{1758,2269} %write{1758,2269} %mystruct{___541_octave} %mystructfield{2}
local	float	___541_octave.Position.w	%read{1758,2269} %write{1758,2269} %mystruct{___541_octave} %mystructfield{3}
local	float	___547_cellPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___547_cellPosition} %mystructfield{0}
local	float	___547_cellPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___547_cellPosition} %mystructfield{1}
local	float	___547_localPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___547_localPosition} %mystructfield{0}
local	float	___547_localPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___547_localPosition} %mystructfield{1}
local	float	___547_smoothDistance	%read{1758,2269} %write{1758,2269}
local	point	___547_smoothColor	%read{1758,2269} %write{1758,2269}
local	float	___547_smoothPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___547_smoothPosition} %mystructfield{0}
local	float	___547_smoothPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___547_smoothPosition} %mystructfield{1}
local	float	___547_h	%read{1758,2269} %write{1758,2269}
local	int	___548_j	%read{1758,2269} %write{1758,2269}
local	int	___550_i	%read{1758,2269} %write{1758,2269}
local	float	___551_cellOffset.x	%read{1758,2269} %write{1758,2269} %mystruct{___551_cellOffset} %mystructfield{0}
local	float	___551_cellOffset.y	%read{1758,2269} %write{1758,2269} %mystruct{___551_cellOffset} %mystructfield{1}
local	float	___551_pointPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___551_pointPosition} %mystructfield{0}
local	float	___551_pointPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___551_pointPosition} %mystructfield{1}
local	float	___551_distanceToPoint	%read{1758,2269} %write{1758,2269}
local	float	___551_correctionFactor	%read{1758,2269} %write{1758,2269}
local	color	___551_cellColor	%read{1758,2269} %write{1758,2269}
local	float	___547_octave.Distance	%read{1758,2269} %write{1758,2269} %mystruct{___547_octave} %mystructfield{0}
local	color	___547_octave.Color	%read{1758,2269} %write{1758,2269} %mystruct{___547_octave} %mystructfield{1}
local	float	___547_octave.Position.x	%read{1758,2269} %write{1758,2269} %mystruct{___547_octave} %mystructfield{0}
local	float	___547_octave.Position.y	%read{1758,2269} %write{1758,2269} %mystruct{___547_octave} %mystructfield{1}
local	float	___547_octave.Position.z	%read{1758,2269} %write{1758,2269} %mystruct{___547_octave} %mystructfield{2}
local	float	___547_octave.Position.w	%read{1758,2269} %write{1758,2269} %mystruct{___547_octave} %mystructfield{3}
local	float	___552_cellPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_cellPosition} %mystructfield{0}
local	float	___552_cellPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_cellPosition} %mystructfield{1}
local	float	___552_localPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_localPosition} %mystructfield{0}
local	float	___552_localPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_localPosition} %mystructfield{1}
local	float	___552_distanceF1	%read{1758,2269} %write{1758,2269}
local	float	___552_distanceF2	%read{1758,2269} %write{1758,2269}
local	float	___552_offsetF1.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_offsetF1} %mystructfield{0}
local	float	___552_offsetF1.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_offsetF1} %mystructfield{1}
local	float	___552_positionF1.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_positionF1} %mystructfield{0}
local	float	___552_positionF1.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_positionF1} %mystructfield{1}
local	float	___552_offsetF2.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_offsetF2} %mystructfield{0}
local	float	___552_offsetF2.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_offsetF2} %mystructfield{1}
local	float	___552_positionF2.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_positionF2} %mystructfield{0}
local	float	___552_positionF2.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_positionF2} %mystructfield{1}
local	int	___553_j	%read{1758,2269} %write{1758,2269}
local	int	___555_i	%read{1758,2269} %write{1758,2269}
local	float	___556_cellOffset.x	%read{1758,2269} %write{1758,2269} %mystruct{___556_cellOffset} %mystructfield{0}
local	float	___556_cellOffset.y	%read{1758,2269} %write{1758,2269} %mystruct{___556_cellOffset} %mystructfield{1}
local	float	___556_pointPosition.x	%read{1758,2269} %write{1758,2269} %mystruct{___556_pointPosition} %mystructfield{0}
local	float	___556_pointPosition.y	%read{1758,2269} %write{1758,2269} %mystruct{___556_pointPosition} %mystructfield{1}
local	float	___556_distanceToPoint	%read{1758,2269} %write{1758,2269}
local	float	___552_octave.Distance	%read{1758,2269} %write{1758,2269} %mystruct{___552_octave} %mystructfield{0}
local	color	___552_octave.Color	%read{1758,2269} %write{1758,2269} %mystruct{___552_octave} %mystructfield{1}
local	float	___552_octave.Position.x	%read{1758,2269} %write{1758,2269} %mystruct{___552_octave} %mystructfield{0}
local	float	___552_octave.Position.y	%read{1758,2269} %write{1758,2269} %mystruct{___552_octave} %mystructfield{1}
local	float	___552_octave.Position.z	%read{1758,2269} %write{1758,2269} %mystruct{___552_octave} %mystructfield{2}
local	float	___552_octave.Position.w	%read{1758,2269} %write{1758,2269} %mystruct{___552_octave} %mystructfield{3}
local	float	___559_cellPosition.x	%read{127,289} %write{127,289} %mystruct{___559_cellPosition} %mystructfield{0}
local	float	___559_cellPosition.y	%read{127,289} %write{127,289} %mystruct{___559_cellPosition} %mystructfield{1}
local	float	___559_localPosition.x	%read{127,289} %write{127,289} %mystruct{___559_localPosition} %mystructfield{0}
local	float	___559_localPosition.y	%read{127,289} %write{127,289} %mystruct{___559_localPosition} %mystructfield{1}
local	float	___559_vectorToClosest.x	%read{127,289} %write{127,289} %mystruct{___559_vectorToClosest} %mystructfield{0}
local	float	___559_vectorToClosest.y	%read{127,289} %write{127,289} %mystruct{___559_vectorToClosest} %mystructfield{1}
local	float	___559_minDistance	%read{127,289} %write{127,289}
local	int	___560_j	%read{127,289} %write{127,289}
local	int	___562_i	%read{127,289} %write{127,289}
local	float	___563_cellOffset.x	%read{127,289} %write{127,289} %mystruct{___563_cellOffset} %mystructfield{0}
local	float	___563_cellOffset.y	%read{127,289} %write{127,289} %mystruct{___563_cellOffset} %mystructfield{1}
local	float	___563_vectorToPoint.x	%read{127,289} %write{127,289} %mystruct{___563_vectorToPoint} %mystructfield{0}
local	float	___563_vectorToPoint.y	%read{127,289} %write{127,289} %mystruct{___563_vectorToPoint} %mystructfield{1}
local	float	___563_distanceToPoint	%read{127,289} %write{127,289}
local	int	___565_j	%read{127,289} %write{127,289}
local	int	___567_i	%read{127,289} %write{127,289}
local	float	___568_cellOffset.x	%read{127,289} %write{127,289} %mystruct{___568_cellOffset} %mystructfield{0}
local	float	___568_cellOffset.y	%read{127,289} %write{127,289} %mystruct{___568_cellOffset} %mystructfield{1}
local	float	___568_vectorToPoint.x	%read{127,289} %write{127,289} %mystruct{___568_vectorToPoint} %mystructfield{0}
local	float	___568_vectorToPoint.y	%read{127,289} %write{127,289} %mystruct{___568_vectorToPoint} %mystructfield{1}
local	float	___568_perpendicularToEdge.x	%read{127,289} %write{127,289} %mystruct{___568_perpendicularToEdge} %mystructfield{0}
local	float	___568_perpendicularToEdge.y	%read{127,289} %write{127,289} %mystruct{___568_perpendicularToEdge} %mystructfield{1}
local	float	___569_distanceToEdge	%read{127,289} %write{127,289}
local	float	___570_cellPosition.x	%read{827,943} %write{824,824} %mystruct{___570_cellPosition} %mystructfield{0}
local	float	___570_cellPosition.y	%read{828,943} %write{825,825} %mystruct{___570_cellPosition} %mystructfield{1}
local	float	___570_localPosition.x	%read{836,882} %write{827,827} %mystruct{___570_localPosition} %mystructfield{0}
local	float	___570_localPosition.y	%read{836,882} %write{828,828} %mystruct{___570_localPosition} %mystructfield{1}
local	float	___570_closestPoint.x	%read{888,946} %write{829,882} %mystruct{___570_closestPoint} %mystructfield{0}
local	float	___570_closestPoint.y	%read{888,947} %write{830,882} %mystruct{___570_closestPoint} %mystructfield{1}
local	float	___570_closestPointOffset.x	%read{888,943} %write{831,882} %mystruct{___570_closestPointOffset} %mystructfield{0}
local	float	___570_closestPointOffset.y	%read{888,943} %write{832,882} %mystruct{___570_closestPointOffset} %mystructfield{1}
local	float	___570_minDistance	%read{836,943} %write{833,943}
local	int	___571_j	%read{836,882} %write{835,882}
local	int	___573_i	%read{836,882} %write{836,882}
local	float	___574_cellOffset.x	%read{836,882} %write{836,882} %mystruct{___574_cellOffset} %mystructfield{0}
local	float	___574_cellOffset.y	%read{836,882} %write{836,882} %mystruct{___574_cellOffset} %mystructfield{1}
local	float	___574_pointPosition.x	%read{836,882} %write{836,882} %mystruct{___574_pointPosition} %mystructfield{0}
local	float	___574_pointPosition.y	%read{836,882} %write{836,882} %mystruct{___574_pointPosition} %mystructfield{1}
local	float	___574_distanceToPoint	%read{836,882} %write{836,882}
local	float	___570_closestPointToClosestPoint.x	%read{946,946} %write{884,943} %mystruct{___570_closestPointToClosestPoint} %mystructfield{0}
local	float	___570_closestPointToClosestPoint.y	%read{947,947} %write{885,943} %mystruct{___570_closestPointToClosestPoint} %mystructfield{1}
local	int	___576_j	%read{888,943} %write{887,943}
local	int	___578_i	%read{888,943} %write{888,943}
local	float	___579_cellOffset.x	%read{888,943} %write{888,943} %mystruct{___579_cellOffset} %mystructfield{0}
local	float	___579_cellOffset.y	%read{888,943} %write{888,943} %mystruct{___579_cellOffset} %mystructfield{1}
local	float	___579_pointPosition.x	%read{888,943} %write{888,943} %mystruct{___579_pointPosition} %mystructfield{0}
local	float	___579_pointPosition.y	%read{888,943} %write{888,943} %mystruct{___579_pointPosition} %mystructfield{1}
local	float	___579_distanceToPoint	%read{888,943} %write{888,943}
local	point	___583_cellPosition	%read{2400,2964} %write{2400,2964}
local	point	___583_localPosition	%read{2400,2964} %write{2400,2964}
local	float	___583_minDistance	%read{2400,2964} %write{2400,2964}
local	point	___583_targetOffset	%read{2400,2964} %write{2400,2964}
local	point	___583_targetPosition	%read{2400,2964} %write{2400,2964}
local	int	___584_k	%read{2400,2964} %write{2400,2964}
local	int	___586_j	%read{2400,2964} %write{2400,2964}
local	int	___588_i	%read{2400,2964} %write{2400,2964}
local	point	___589_cellOffset	%read{2400,2964} %write{2400,2964}
local	point	___589_pointPosition	%read{2400,2964} %write{2400,2964}
local	float	___589_distanceToPoint	%read{2400,2964} %write{2400,2964}
local	float	___583_octave.Distance	%read{2400,2964} %write{2400,2964} %mystruct{___583_octave} %mystructfield{0}
local	color	___583_octave.Color	%read{2400,2964} %write{2400,2964} %mystruct{___583_octave} %mystructfield{1}
local	float	___583_octave.Position.x	%read{2400,2964} %write{2400,2964} %mystruct{___583_octave} %mystructfield{0}
local	float	___583_octave.Position.y	%read{2400,2964} %write{2400,2964} %mystruct{___583_octave} %mystructfield{1}
local	float	___583_octave.Position.z	%read{2400,2964} %write{2400,2964} %mystruct{___583_octave} %mystructfield{2}
local	float	___583_octave.Position.w	%read{2400,2964} %write{2400,2964} %mystruct{___583_octave} %mystructfield{3}
local	point	___591_cellPosition	%read{2400,2964} %write{2400,2964}
local	point	___591_localPosition	%read{2400,2964} %write{2400,2964}
local	float	___591_smoothDistance	%read{2400,2964} %write{2400,2964}
local	point	___591_smoothColor	%read{2400,2964} %write{2400,2964}
local	point	___591_smoothPosition	%read{2400,2964} %write{2400,2964}
local	float	___591_h	%read{2400,2964} %write{2400,2964}
local	int	___592_k	%read{2400,2964} %write{2400,2964}
local	int	___594_j	%read{2400,2964} %write{2400,2964}
local	int	___596_i	%read{2400,2964} %write{2400,2964}
local	point	___597_cellOffset	%read{2400,2964} %write{2400,2964}
local	point	___597_pointPosition	%read{2400,2964} %write{2400,2964}
local	float	___597_distanceToPoint	%read{2400,2964} %write{2400,2964}
local	float	___597_correctionFactor	%read{2400,2964} %write{2400,2964}
local	color	___597_cellColor	%read{2400,2964} %write{2400,2964}
local	float	___591_octave.Distance	%read{2400,2964} %write{2400,2964} %mystruct{___591_octave} %mystructfield{0}
local	color	___591_octave.Color	%read{2400,2964} %write{2400,2964} %mystruct{___591_octave} %mystructfield{1}
local	float	___591_octave.Position.x	%read{2400,2964} %write{2400,2964} %mystruct{___591_octave} %mystructfield{0}
local	float	___591_octave.Position.y	%read{2400,2964} %write{2400,2964} %mystruct{___591_octave} %mystructfield{1}
local	float	___591_octave.Position.z	%read{2400,2964} %write{2400,2964} %mystruct{___591_octave} %mystructfield{2}
local	float	___591_octave.Position.w	%read{2400,2964} %write{2400,2964} %mystruct{___591_octave} %mystructfield{3}
local	point	___598_cellPosition	%read{2400,2964} %write{2400,2964}
local	point	___598_localPosition	%read{2400,2964} %write{2400,2964}
local	float	___598_distanceF1	%read{2400,2964} %write{2400,2964}
local	float	___598_distanceF2	%read{2400,2964} %write{2400,2964}
local	point	___598_offsetF1	%read{2400,2964} %write{2400,2964}
local	point	___598_positionF1	%read{2400,2964} %write{2400,2964}
local	point	___598_offsetF2	%read{2400,2964} %write{2400,2964}
local	point	___598_positionF2	%read{2400,2964} %write{2400,2964}
local	int	___599_k	%read{2400,2964} %write{2400,2964}
local	int	___601_j	%read{2400,2964} %write{2400,2964}
local	int	___603_i	%read{2400,2964} %write{2400,2964}
local	point	___604_cellOffset	%read{2400,2964} %write{2400,2964}
local	point	___604_pointPosition	%read{2400,2964} %write{2400,2964}
local	float	___604_distanceToPoint	%read{2400,2964} %write{2400,2964}
local	float	___598_octave.Distance	%read{2400,2964} %write{2400,2964} %mystruct{___598_octave} %mystructfield{0}
local	color	___598_octave.Color	%read{2400,2964} %write{2400,2964} %mystruct{___598_octave} %mystructfield{1}
local	float	___598_octave.Position.x	%read{2400,2964} %write{2400,2964} %mystruct{___598_octave} %mystructfield{0}
local	float	___598_octave.Position.y	%read{2400,2964} %write{2400,2964} %mystruct{___598_octave} %mystructfield{1}
local	float	___598_octave.Position.z	%read{2400,2964} %write{2400,2964} %mystruct{___598_octave} %mystructfield{2}
local	float	___598_octave.Position.w	%read{2400,2964} %write{2400,2964} %mystruct{___598_octave} %mystructfield{3}
local	point	___607_cellPosition	%read{309,446} %write{309,446}
local	point	___607_localPosition	%read{309,446} %write{309,446}
local	point	___607_vectorToClosest	%read{309,446} %write{309,446}
local	float	___607_minDistance	%read{309,446} %write{309,446}
local	int	___608_k	%read{309,446} %write{309,446}
local	int	___610_j	%read{309,446} %write{309,446}
local	int	___612_i	%read{309,446} %write{309,446}
local	point	___613_cellOffset	%read{309,446} %write{309,446}
local	point	___613_vectorToPoint	%read{309,446} %write{309,446}
local	float	___613_distanceToPoint	%read{309,446} %write{309,446}
local	int	___615_k	%read{309,446} %write{309,446}
local	int	___617_j	%read{309,446} %write{309,446}
local	int	___619_i	%read{309,446} %write{309,446}
local	point	___620_cellOffset	%read{309,446} %write{309,446}
local	point	___620_vectorToPoint	%read{309,446} %write{309,446}
local	point	___620_perpendicularToEdge	%read{309,446} %write{309,446}
local	float	___621_distanceToEdge	%read{309,446} %write{309,446}
local	point	___622_cellPosition	%read{959,1075} %write{958,958}
local	point	___622_localPosition	%read{965,1011} %write{959,959}
local	point	___622_closestPoint	%read{1016,1076} %write{960,1011}
local	point	___622_closestPointOffset	%read{1016,1075} %write{961,1011}
local	float	___622_minDistance	%read{965,1075} %write{962,1075}
local	int	___623_k	%read{965,1011} %write{964,1011}
local	int	___625_j	%read{965,1011} %write{965,1011}
local	int	___627_i	%read{965,1011} %write{965,1011}
local	point	___628_cellOffset	%read{965,1011} %write{965,1011}
local	point	___628_pointPosition	%read{965,1011} %write{965,1011}
local	float	___628_distanceToPoint	%read{965,1011} %write{965,1011}
local	point	___622_closestPointToClosestPoint	%read{1076,1076} %write{1013,1075}
local	int	___630_k	%read{1016,1075} %write{1015,1075}
local	int	___632_j	%read{1016,1075} %write{1016,1075}
local	int	___634_i	%read{1016,1075} %write{1016,1075}
local	point	___635_cellOffset	%read{1016,1075} %write{1016,1075}
local	point	___635_pointPosition	%read{1016,1075} %write{1016,1075}
local	float	___635_distanceToPoint	%read{1016,1075} %write{1016,1075}
local	float	___639_cellPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___639_cellPosition} %mystructfield{0}
local	float	___639_cellPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___639_cellPosition} %mystructfield{1}
local	float	___639_cellPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___639_cellPosition} %mystructfield{2}
local	float	___639_cellPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___639_cellPosition} %mystructfield{3}
local	float	___639_localPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___639_localPosition} %mystructfield{0}
local	float	___639_localPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___639_localPosition} %mystructfield{1}
local	float	___639_localPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___639_localPosition} %mystructfield{2}
local	float	___639_localPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___639_localPosition} %mystructfield{3}
local	float	___639_minDistance	%read{3110,3918} %write{3110,3918}
local	float	___639_targetOffset.x	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetOffset} %mystructfield{0}
local	float	___639_targetOffset.y	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetOffset} %mystructfield{1}
local	float	___639_targetOffset.z	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetOffset} %mystructfield{2}
local	float	___639_targetOffset.w	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetOffset} %mystructfield{3}
local	float	___639_targetPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetPosition} %mystructfield{0}
local	float	___639_targetPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetPosition} %mystructfield{1}
local	float	___639_targetPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetPosition} %mystructfield{2}
local	float	___639_targetPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___639_targetPosition} %mystructfield{3}
local	int	___640_u	%read{3110,3918} %write{3110,3918}
local	int	___642_k	%read{3110,3918} %write{3110,3918}
local	int	___644_j	%read{3110,3918} %write{3110,3918}
local	int	___646_i	%read{3110,3918} %write{3110,3918}
local	float	___647_cellOffset.x	%read{3110,3918} %write{3110,3918} %mystruct{___647_cellOffset} %mystructfield{0}
local	float	___647_cellOffset.y	%read{3110,3918} %write{3110,3918} %mystruct{___647_cellOffset} %mystructfield{1}
local	float	___647_cellOffset.z	%read{3110,3918} %write{3110,3918} %mystruct{___647_cellOffset} %mystructfield{2}
local	float	___647_cellOffset.w	%read{3110,3918} %write{3110,3918} %mystruct{___647_cellOffset} %mystructfield{3}
local	float	___647_pointPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___647_pointPosition} %mystructfield{0}
local	float	___647_pointPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___647_pointPosition} %mystructfield{1}
local	float	___647_pointPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___647_pointPosition} %mystructfield{2}
local	float	___647_pointPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___647_pointPosition} %mystructfield{3}
local	float	___647_distanceToPoint	%read{3110,3918} %write{3110,3918}
local	float	___639_octave.Distance	%read{3110,3918} %write{3110,3918} %mystruct{___639_octave} %mystructfield{0}
local	color	___639_octave.Color	%read{3110,3918} %write{3110,3918} %mystruct{___639_octave} %mystructfield{1}
local	float	___639_octave.Position.x	%read{3110,3918} %write{3110,3918} %mystruct{___639_octave} %mystructfield{0}
local	float	___639_octave.Position.y	%read{3110,3918} %write{3110,3918} %mystruct{___639_octave} %mystructfield{1}
local	float	___639_octave.Position.z	%read{3110,3918} %write{3110,3918} %mystruct{___639_octave} %mystructfield{2}
local	float	___639_octave.Position.w	%read{3110,3918} %write{3110,3918} %mystruct{___639_octave} %mystructfield{3}
local	float	___649_cellPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___649_cellPosition} %mystructfield{0}
local	float	___649_cellPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___649_cellPosition} %mystructfield{1}
local	float	___649_cellPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___649_cellPosition} %mystructfield{2}
local	float	___649_cellPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___649_cellPosition} %mystructfield{3}
local	float	___649_localPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___649_localPosition} %mystructfield{0}
local	float	___649_localPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___649_localPosition} %mystructfield{1}
local	float	___649_localPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___649_localPosition} %mystructfield{2}
local	float	___649_localPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___649_localPosition} %mystructfield{3}
local	float	___649_smoothDistance	%read{3110,3918} %write{3110,3918}
local	point	___649_smoothColor	%read{3110,3918} %write{3110,3918}
local	float	___649_smoothPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___649_smoothPosition} %mystructfield{0}
local	float	___649_smoothPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___649_smoothPosition} %mystructfield{1}
local	float	___649_smoothPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___649_smoothPosition} %mystructfield{2}
local	float	___649_smoothPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___649_smoothPosition} %mystructfield{3}
local	float	___649_h	%read{3110,3918} %write{3110,3918}
local	int	___650_u	%read{3110,3918} %write{3110,3918}
local	int	___652_k	%read{3110,3918} %write{3110,3918}
local	int	___654_j	%read{3110,3918} %write{3110,3918}
local	int	___656_i	%read{3110,3918} %write{3110,3918}
local	float	___657_cellOffset.x	%read{3110,3918} %write{3110,3918} %mystruct{___657_cellOffset} %mystructfield{0}
local	float	___657_cellOffset.y	%read{3110,3918} %write{3110,3918} %mystruct{___657_cellOffset} %mystructfield{1}
local	float	___657_cellOffset.z	%read{3110,3918} %write{3110,3918} %mystruct{___657_cellOffset} %mystructfield{2}
local	float	___657_cellOffset.w	%read{3110,3918} %write{3110,3918} %mystruct{___657_cellOffset} %mystructfield{3}
local	float	___657_pointPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___657_pointPosition} %mystructfield{0}
local	float	___657_pointPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___657_pointPosition} %mystructfield{1}
local	float	___657_pointPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___657_pointPosition} %mystructfield{2}
local	float	___657_pointPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___657_pointPosition} %mystructfield{3}
local	float	___657_distanceToPoint	%read{3110,3918} %write{3110,3918}
local	float	___657_correctionFactor	%read{3110,3918} %write{3110,3918}
local	color	___657_cellColor	%read{3110,3918} %write{3110,3918}
local	float	___649_octave.Distance	%read{3110,3918} %write{3110,3918} %mystruct{___649_octave} %mystructfield{0}
local	color	___649_octave.Color	%read{3110,3918} %write{3110,3918} %mystruct{___649_octave} %mystructfield{1}
local	float	___649_octave.Position.x	%read{3110,3918} %write{3110,3918} %mystruct{___649_octave} %mystructfield{0}
local	float	___649_octave.Position.y	%read{3110,3918} %write{3110,3918} %mystruct{___649_octave} %mystructfield{1}
local	float	___649_octave.Position.z	%read{3110,3918} %write{3110,3918} %mystruct{___649_octave} %mystructfield{2}
local	float	___649_octave.Position.w	%read{3110,3918} %write{3110,3918} %mystruct{___649_octave} %mystructfield{3}
local	float	___658_cellPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_cellPosition} %mystructfield{0}
local	float	___658_cellPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_cellPosition} %mystructfield{1}
local	float	___658_cellPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_cellPosition} %mystructfield{2}
local	float	___658_cellPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_cellPosition} %mystructfield{3}
local	float	___658_localPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_localPosition} %mystructfield{0}
local	float	___658_localPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_localPosition} %mystructfield{1}
local	float	___658_localPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_localPosition} %mystructfield{2}
local	float	___658_localPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_localPosition} %mystructfield{3}
local	float	___658_distanceF1	%read{3110,3918} %write{3110,3918}
local	float	___658_distanceF2	%read{3110,3918} %write{3110,3918}
local	float	___658_offsetF1.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF1} %mystructfield{0}
local	float	___658_offsetF1.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF1} %mystructfield{1}
local	float	___658_offsetF1.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF1} %mystructfield{2}
local	float	___658_offsetF1.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF1} %mystructfield{3}
local	float	___658_positionF1.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF1} %mystructfield{0}
local	float	___658_positionF1.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF1} %mystructfield{1}
local	float	___658_positionF1.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF1} %mystructfield{2}
local	float	___658_positionF1.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF1} %mystructfield{3}
local	float	___658_offsetF2.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF2} %mystructfield{0}
local	float	___658_offsetF2.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF2} %mystructfield{1}
local	float	___658_offsetF2.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF2} %mystructfield{2}
local	float	___658_offsetF2.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_offsetF2} %mystructfield{3}
local	float	___658_positionF2.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF2} %mystructfield{0}
local	float	___658_positionF2.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF2} %mystructfield{1}
local	float	___658_positionF2.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF2} %mystructfield{2}
local	float	___658_positionF2.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_positionF2} %mystructfield{3}
local	int	___659_u	%read{3110,3918} %write{3110,3918}
local	int	___661_k	%read{3110,3918} %write{3110,3918}
local	int	___663_j	%read{3110,3918} %write{3110,3918}
local	int	___665_i	%read{3110,3918} %write{3110,3918}
local	float	___666_cellOffset.x	%read{3110,3918} %write{3110,3918} %mystruct{___666_cellOffset} %mystructfield{0}
local	float	___666_cellOffset.y	%read{3110,3918} %write{3110,3918} %mystruct{___666_cellOffset} %mystructfield{1}
local	float	___666_cellOffset.z	%read{3110,3918} %write{3110,3918} %mystruct{___666_cellOffset} %mystructfield{2}
local	float	___666_cellOffset.w	%read{3110,3918} %write{3110,3918} %mystruct{___666_cellOffset} %mystructfield{3}
local	float	___666_pointPosition.x	%read{3110,3918} %write{3110,3918} %mystruct{___666_pointPosition} %mystructfield{0}
local	float	___666_pointPosition.y	%read{3110,3918} %write{3110,3918} %mystruct{___666_pointPosition} %mystructfield{1}
local	float	___666_pointPosition.z	%read{3110,3918} %write{3110,3918} %mystruct{___666_pointPosition} %mystructfield{2}
local	float	___666_pointPosition.w	%read{3110,3918} %write{3110,3918} %mystruct{___666_pointPosition} %mystructfield{3}
local	float	___666_distanceToPoint	%read{3110,3918} %write{3110,3918}
local	float	___658_octave.Distance	%read{3110,3918} %write{3110,3918} %mystruct{___658_octave} %mystructfield{0}
local	color	___658_octave.Color	%read{3110,3918} %write{3110,3918} %mystruct{___658_octave} %mystructfield{1}
local	float	___658_octave.Position.x	%read{3110,3918} %write{3110,3918} %mystruct{___658_octave} %mystructfield{0}
local	float	___658_octave.Position.y	%read{3110,3918} %write{3110,3918} %mystruct{___658_octave} %mystructfield{1}
local	float	___658_octave.Position.z	%read{3110,3918} %write{3110,3918} %mystruct{___658_octave} %mystructfield{2}
local	float	___658_octave.Position.w	%read{3110,3918} %write{3110,3918} %mystruct{___658_octave} %mystructfield{3}
local	float	___669_cellPosition.x	%read{470,757} %write{470,757} %mystruct{___669_cellPosition} %mystructfield{0}
local	float	___669_cellPosition.y	%read{470,757} %write{470,757} %mystruct{___669_cellPosition} %mystructfield{1}
local	float	___669_cellPosition.z	%read{470,757} %write{470,757} %mystruct{___669_cellPosition} %mystructfield{2}
local	float	___669_cellPosition.w	%read{470,757} %write{470,757} %mystruct{___669_cellPosition} %mystructfield{3}
local	float	___669_localPosition.x	%read{470,757} %write{470,757} %mystruct{___669_localPosition} %mystructfield{0}
local	float	___669_localPosition.y	%read{470,757} %write{470,757} %mystruct{___669_localPosition} %mystructfield{1}
local	float	___669_localPosition.z	%read{470,757} %write{470,757} %mystruct{___669_localPosition} %mystructfield{2}
local	float	___669_localPosition.w	%read{470,757} %write{470,757} %mystruct{___669_localPosition} %mystructfield{3}
local	float	___669_vectorToClosest.x	%read{470,757} %write{470,757} %mystruct{___669_vectorToClosest} %mystructfield{0}
local	float	___669_vectorToClosest.y	%read{470,757} %write{470,757} %mystruct{___669_vectorToClosest} %mystructfield{1}
local	float	___669_vectorToClosest.z	%read{470,757} %write{470,757} %mystruct{___669_vectorToClosest} %mystructfield{2}
local	float	___669_vectorToClosest.w	%read{470,757} %write{470,757} %mystruct{___669_vectorToClosest} %mystructfield{3}
local	float	___669_minDistance	%read{470,757} %write{470,757}
local	int	___670_u	%read{470,757} %write{470,757}
local	int	___672_k	%read{470,757} %write{470,757}
local	int	___674_j	%read{470,757} %write{470,757}
local	int	___676_i	%read{470,757} %write{470,757}
local	float	___677_cellOffset.x	%read{470,757} %write{470,757} %mystruct{___677_cellOffset} %mystructfield{0}
local	float	___677_cellOffset.y	%read{470,757} %write{470,757} %mystruct{___677_cellOffset} %mystructfield{1}
local	float	___677_cellOffset.z	%read{470,757} %write{470,757} %mystruct{___677_cellOffset} %mystructfield{2}
local	float	___677_cellOffset.w	%read{470,757} %write{470,757} %mystruct{___677_cellOffset} %mystructfield{3}
local	float	___677_vectorToPoint.x	%read{470,757} %write{470,757} %mystruct{___677_vectorToPoint} %mystructfield{0}
local	float	___677_vectorToPoint.y	%read{470,757} %write{470,757} %mystruct{___677_vectorToPoint} %mystructfield{1}
local	float	___677_vectorToPoint.z	%read{470,757} %write{470,757} %mystruct{___677_vectorToPoint} %mystructfield{2}
local	float	___677_vectorToPoint.w	%read{470,757} %write{470,757} %mystruct{___677_vectorToPoint} %mystructfield{3}
local	float	___677_distanceToPoint	%read{470,757} %write{470,757}
local	int	___679_u	%read{470,757} %write{470,757}
local	int	___681_k	%read{470,757} %write{470,757}
local	int	___683_j	%read{470,757} %write{470,757}
local	int	___685_i	%read{470,757} %write{470,757}
local	float	___686_cellOffset.x	%read{470,757} %write{470,757} %mystruct{___686_cellOffset} %mystructfield{0}
local	float	___686_cellOffset.y	%read{470,757} %write{470,757} %mystruct{___686_cellOffset} %mystructfield{1}
local	float	___686_cellOffset.z	%read{470,757} %write{470,757} %mystruct{___686_cellOffset} %mystructfield{2}
local	float	___686_cellOffset.w	%read{470,757} %write{470,757} %mystruct{___686_cellOffset} %mystructfield{3}
local	float	___686_vectorToPoint.x	%read{470,757} %write{470,757} %mystruct{___686_vectorToPoint} %mystructfield{0}
local	float	___686_vectorToPoint.y	%read{470,757} %write{470,757} %mystruct{___686_vectorToPoint} %mystructfield{1}
local	float	___686_vectorToPoint.z	%read{470,757} %write{470,757} %mystruct{___686_vectorToPoint} %mystructfield{2}
local	float	___686_vectorToPoint.w	%read{470,757} %write{470,757} %mystruct{___686_vectorToPoint} %mystructfield{3}
local	float	___686_perpendicularToEdge.x	%read{470,757} %write{470,757} %mystruct{___686_perpendicularToEdge} %mystructfield{0}
local	float	___686_perpendicularToEdge.y	%read{470,757} %write{470,757} %mystruct{___686_perpendicularToEdge} %mystructfield{1}
local	float	___686_perpendicularToEdge.z	%read{470,757} %write{470,757} %mystruct{___686_perpendicularToEdge} %mystructfield{2}
local	float	___686_perpendicularToEdge.w	%read{470,757} %write{470,757} %mystruct{___686_perpendicularToEdge} %mystructfield{3}
local	float	___687_distanceToEdge	%read{470,757} %write{470,757}
local	float	___688_cellPosition.x	%read{1091,1325} %write{1086,1086} %mystruct{___688_cellPosition} %mystructfield{0}
local	float	___688_cellPosition.y	%read{1092,1325} %write{1087,1087} %mystruct{___688_cellPosition} %mystructfield{1}
local	float	___688_cellPosition.z	%read{1093,1325} %write{1088,1088} %mystruct{___688_cellPosition} %mystructfield{2}
local	float	___688_cellPosition.w	%read{1094,1325} %write{1089,1089} %mystruct{___688_cellPosition} %mystructfield{3}
local	float	___688_localPosition.x	%read{1106,1202} %write{1091,1091} %mystruct{___688_localPosition} %mystructfield{0}
local	float	___688_localPosition.y	%read{1106,1202} %write{1092,1092} %mystruct{___688_localPosition} %mystructfield{1}
local	float	___688_localPosition.z	%read{1106,1202} %write{1093,1093} %mystruct{___688_localPosition} %mystructfield{2}
local	float	___688_localPosition.w	%read{1106,1202} %write{1094,1094} %mystruct{___688_localPosition} %mystructfield{3}
local	float	___688_closestPoint.x	%read{1210,1328} %write{1095,1202} %mystruct{___688_closestPoint} %mystructfield{0}
local	float	___688_closestPoint.y	%read{1210,1329} %write{1096,1202} %mystruct{___688_closestPoint} %mystructfield{1}
local	float	___688_closestPoint.z	%read{1210,1330} %write{1097,1202} %mystruct{___688_closestPoint} %mystructfield{2}
local	float	___688_closestPoint.w	%read{1210,1331} %write{1098,1202} %mystruct{___688_closestPoint} %mystructfield{3}
local	float	___688_closestPointOffset.x	%read{1210,1325} %write{1099,1202} %mystruct{___688_closestPointOffset} %mystructfield{0}
local	float	___688_closestPointOffset.y	%read{1210,1325} %write{1100,1202} %mystruct{___688_closestPointOffset} %mystructfield{1}
local	float	___688_closestPointOffset.z	%read{1210,1325} %write{1101,1202} %mystruct{___688_closestPointOffset} %mystructfield{2}
local	float	___688_closestPointOffset.w	%read{1210,1325} %write{1102,1202} %mystruct{___688_closestPointOffset} %mystructfield{3}
local	float	___688_minDistance	%read{1106,1325} %write{1103,1325}
local	int	___689_u	%read{1106,1202} %write{1105,1202}
local	int	___691_k	%read{1106,1202} %write{1106,1202}
local	int	___693_j	%read{1106,1202} %write{1106,1202}
local	int	___695_i	%read{1106,1202} %write{1106,1202}
local	float	___696_cellOffset.x	%read{1106,1202} %write{1106,1202} %mystruct{___696_cellOffset} %mystructfield{0}
local	float	___696_cellOffset.y	%read{1106,1202} %write{1106,1202} %mystruct{___696_cellOffset} %mystructfield{1}
local	float	___696_cellOffset.z	%read{1106,1202} %write{1106,1202} %mystruct{___696_cellOffset} %mystructfield{2}
local	float	___696_cellOffset.w	%read{1106,1202} %write{1106,1202} %mystruct{___696_cellOffset} %mystructfield{3}
local	float	___696_pointPosition.x	%read{1106,1202} %write{1106,1202} %mystruct{___696_pointPosition} %mystructfield{0}
local	float	___696_pointPosition.y	%read{1106,1202} %write{1106,1202} %mystruct{___696_pointPosition} %mystructfield{1}
local	float	___696_pointPosition.z	%read{1106,1202} %write{1106,1202} %mystruct{___696_pointPosition} %mystructfield{2}
local	float	___696_pointPosition.w	%read{1106,1202} %write{1106,1202} %mystruct{___696_pointPosition} %mystructfield{3}
local	float	___696_distanceToPoint	%read{1106,1202} %write{1106,1202}
local	float	___688_closestPointToClosestPoint.x	%read{1328,1328} %write{1204,1325} %mystruct{___688_closestPointToClosestPoint} %mystructfield{0}
local	float	___688_closestPointToClosestPoint.y	%read{1329,1329} %write{1205,1325} %mystruct{___688_closestPointToClosestPoint} %mystructfield{1}
local	float	___688_closestPointToClosestPoint.z	%read{1330,1330} %write{1206,1325} %mystruct{___688_closestPointToClosestPoint} %mystructfield{2}
local	float	___688_closestPointToClosestPoint.w	%read{1331,1331} %write{1207,1325} %mystruct{___688_closestPointToClosestPoint} %mystructfield{3}
local	int	___698_u	%read{1210,1325} %write{1209,1325}
local	int	___700_k	%read{1210,1325} %write{1210,1325}
local	int	___702_j	%read{1210,1325} %write{1210,1325}
local	int	___704_i	%read{1210,1325} %write{1210,1325}
local	float	___705_cellOffset.x	%read{1210,1325} %write{1210,1325} %mystruct{___705_cellOffset} %mystructfield{0}
local	float	___705_cellOffset.y	%read{1210,1325} %write{1210,1325} %mystruct{___705_cellOffset} %mystructfield{1}
local	float	___705_cellOffset.z	%read{1210,1325} %write{1210,1325} %mystruct{___705_cellOffset} %mystructfield{2}
local	float	___705_cellOffset.w	%read{1210,1325} %write{1210,1325} %mystruct{___705_cellOffset} %mystructfield{3}
local	float	___705_pointPosition.x	%read{1210,1325} %write{1210,1325} %mystruct{___705_pointPosition} %mystructfield{0}
local	float	___705_pointPosition.y	%read{1210,1325} %write{1210,1325} %mystruct{___705_pointPosition} %mystructfield{1}
local	float	___705_pointPosition.z	%read{1210,1325} %write{1210,1325} %mystruct{___705_pointPosition} %mystructfield{2}
local	float	___705_pointPosition.w	%read{1210,1325} %write{1210,1325} %mystruct{___705_pointPosition} %mystructfield{3}
local	float	___705_distanceToPoint	%read{1210,1325} %write{1210,1325}
local	float	___708_amplitude	%read{1372,1645} %write{1354,1645}
local	float	___708_max_amplitude	%read{1372,1650} %write{1355,1645}
local	float	___708_scale	%read{1372,1645} %write{1356,1645}
local	float	___708_Output.Distance	%read{1372,1670} %write{1357,1649} %mystruct{___708_Output} %mystructfield{0}
local	color	___708_Output.Color	%read{1372,1671} %write{1358,1651} %mystruct{___708_Output} %mystructfield{1}
local	float	___708_Output.Position.x	%read{1372,1672} %write{1359,1656} %mystruct{___708_Output} %mystructfield{0}
local	float	___708_Output.Position.y	%read{1372,1673} %write{1360,1660} %mystruct{___708_Output} %mystructfield{1}
local	float	___708_Output.Position.z	%read{1372,1674} %write{1361,1664} %mystruct{___708_Output} %mystructfield{2}
local	float	___708_Output.Position.w	%read{1372,1675} %write{1362,1668} %mystruct{___708_Output} %mystructfield{3}
local	int	___708_zero_input	%read{1372,1645} %write{1369,1369}
local	int	___709_i	%read{1372,1645} %write{1371,1645}
local	float	___710_octave.Distance	%read{1372,1645} %write{1372,1645} %mystruct{___710_octave} %mystructfield{0}
local	color	___710_octave.Color	%read{1372,1645} %write{1372,1645} %mystruct{___710_octave} %mystructfield{1}
local	float	___710_octave.Position.x	%read{1372,1645} %write{1372,1645} %mystruct{___710_octave} %mystructfield{0}
local	float	___710_octave.Position.y	%read{1372,1645} %write{1372,1645} %mystruct{___710_octave} %mystructfield{1}
local	float	___710_octave.Position.z	%read{1372,1645} %write{1372,1645} %mystruct{___710_octave} %mystructfield{2}
local	float	___710_octave.Position.w	%read{1372,1645} %write{1372,1645} %mystruct{___710_octave} %mystructfield{3}
local	float	___716_remainder	%read{1372,1645} %write{1372,1645}
local	float	___719_amplitude	%read{52,105} %write{39,105}
local	float	___719_max_amplitude	%read{52,107} %write{40,105}
local	float	___719_scale	%read{52,105} %write{41,105}
local	float	___719_distance	%read{52,108} %write{42,107}
local	int	___719_zero_input	%read{52,105} %write{49,49}
local	int	___720_i	%read{52,105} %write{51,105}
local	float	___721_octave_distance	%read{52,105} %write{52,105}
local	float	___724_remainder	%read{52,105} %write{52,105}
local	float	___725_lerp_amplitude	%read{52,105} %write{52,105}
local	float	___725_lerp_distance	%read{52,105} %write{52,105}
local	float	___727_amplitude	%read{1758,2269} %write{1740,2269}
local	float	___727_max_amplitude	%read{1758,2274} %write{1741,2269}
local	float	___727_scale	%read{1758,2269} %write{1742,2269}
local	float	___727_Output.Distance	%read{1758,2294} %write{1743,2273} %mystruct{___727_Output} %mystructfield{0}
local	color	___727_Output.Color	%read{1758,2295} %write{1744,2275} %mystruct{___727_Output} %mystructfield{1}
local	float	___727_Output.Position.x	%read{1758,2296} %write{1745,2280} %mystruct{___727_Output} %mystructfield{0}
local	float	___727_Output.Position.y	%read{1758,2297} %write{1746,2284} %mystruct{___727_Output} %mystructfield{1}
local	float	___727_Output.Position.z	%read{1758,2298} %write{1747,2288} %mystruct{___727_Output} %mystructfield{2}
local	float	___727_Output.Position.w	%read{1758,2299} %write{1748,2292} %mystruct{___727_Output} %mystructfield{3}
local	int	___727_zero_input	%read{1758,2269} %write{1755,1755}
local	int	___728_i	%read{1758,2269} %write{1757,2269}
local	float	___729_octave.Distance	%read{1758,2269} %write{1758,2269} %mystruct{___729_octave} %mystructfield{0}
local	color	___729_octave.Color	%read{1758,2269} %write{1758,2269} %mystruct{___729_octave} %mystructfield{1}
local	float	___729_octave.Position.x	%read{1758,2269} %write{1758,2269} %mystruct{___729_octave} %mystructfield{0}
local	float	___729_octave.Position.y	%read{1758,2269} %write{1758,2269} %mystruct{___729_octave} %mystructfield{1}
local	float	___729_octave.Position.z	%read{1758,2269} %write{1758,2269} %mystruct{___729_octave} %mystructfield{2}
local	float	___729_octave.Position.w	%read{1758,2269} %write{1758,2269} %mystruct{___729_octave} %mystructfield{3}
local	float	___735_remainder	%read{1758,2269} %write{1758,2269}
local	float	___738_amplitude	%read{127,289} %write{114,289}
local	float	___738_max_amplitude	%read{127,291} %write{115,289}
local	float	___738_scale	%read{127,289} %write{116,289}
local	float	___738_distance	%read{127,292} %write{117,291}
local	int	___738_zero_input	%read{127,289} %write{124,124}
local	int	___739_i	%read{127,289} %write{126,289}
local	float	___740_octave_distance	%read{127,289} %write{127,289}
local	float	___743_remainder	%read{127,289} %write{127,289}
local	float	___744_lerp_amplitude	%read{127,289} %write{127,289}
local	float	___744_lerp_distance	%read{127,289} %write{127,289}
local	float	___746_amplitude	%read{2400,2964} %write{2382,2964}
local	float	___746_max_amplitude	%read{2400,2969} %write{2383,2964}
local	float	___746_scale	%read{2400,2964} %write{2384,2964}
local	float	___746_Output.Distance	%read{2400,2989} %write{2385,2968} %mystruct{___746_Output} %mystructfield{0}
local	color	___746_Output.Color	%read{2400,2990} %write{2386,2970} %mystruct{___746_Output} %mystructfield{1}
local	float	___746_Output.Position.x	%read{2400,2991} %write{2387,2975} %mystruct{___746_Output} %mystructfield{0}
local	float	___746_Output.Position.y	%read{2400,2992} %write{2388,2979} %mystruct{___746_Output} %mystructfield{1}
local	float	___746_Output.Position.z	%read{2400,2993} %write{2389,2983} %mystruct{___746_Output} %mystructfield{2}
local	float	___746_Output.Position.w	%read{2400,2994} %write{2390,2987} %mystruct{___746_Output} %mystructfield{3}
local	int	___746_zero_input	%read{2400,2964} %write{2397,2397}
local	int	___747_i	%read{2400,2964} %write{2399,2964}
local	float	___748_octave.Distance	%read{2400,2964} %write{2400,2964} %mystruct{___748_octave} %mystructfield{0}
local	color	___748_octave.Color	%read{2400,2964} %write{2400,2964} %mystruct{___748_octave} %mystructfield{1}
local	float	___748_octave.Position.x	%read{2400,2964} %write{2400,2964} %mystruct{___748_octave} %mystructfield{0}
local	float	___748_octave.Position.y	%read{2400,2964} %write{2400,2964} %mystruct{___748_octave} %mystructfield{1}
local	float	___748_octave.Position.z	%read{2400,2964} %write{2400,2964} %mystruct{___748_octave} %mystructfield{2}
local	float	___748_octave.Position.w	%read{2400,2964} %write{2400,2964} %mystruct{___748_octave} %mystructfield{3}
local	float	___754_remainder	%read{2400,2964} %write{2400,2964}
local	float	___757_amplitude	%read{309,446} %write{296,446}
local	float	___757_max_amplitude	%read{309,448} %write{297,446}
local	float	___757_scale	%read{309,446} %write{298,446}
local	float	___757_distance	%read{309,449} %write{299,448}
local	int	___757_zero_input	%read{309,446} %write{306,306}
local	int	___758_i	%read{309,446} %write{308,446}
local	float	___759_octave_distance	%read{309,446} %write{309,446}
local	float	___762_remainder	%read{309,446} %write{309,446}
local	float	___763_lerp_amplitude	%read{309,446} %write{309,446}
local	float	___763_lerp_distance	%read{309,446} %write{309,446}
local	float	___765_amplitude	%read{3110,3918} %write{3092,3918}
local	float	___765_max_amplitude	%read{3110,3923} %write{3093,3918}
local	float	___765_scale	%read{3110,3918} %write{3094,3918}
local	float	___765_Output.Distance	%read{3110,3943} %write{3095,3922} %mystruct{___765_Output} %mystructfield{0}
local	color	___765_Output.Color	%read{3110,3944} %write{3096,3924} %mystruct{___765_Output} %mystructfield{1}
local	float	___765_Output.Position.x	%read{3110,3945} %write{3097,3929} %mystruct{___765_Output} %mystructfield{0}
local	float	___765_Output.Position.y	%read{3110,3946} %write{3098,3933} %mystruct{___765_Output} %mystructfield{1}
local	float	___765_Output.Position.z	%read{3110,3947} %write{3099,3937} %mystruct{___765_Output} %mystructfield{2}
local	float	___765_Output.Position.w	%read{3110,3948} %write{3100,3941} %mystruct{___765_Output} %mystructfield{3}
local	int	___765_zero_input	%read{3110,3918} %write{3107,3107}
local	int	___766_i	%read{3110,3918} %write{3109,3918}
local	float	___767_octave.Distance	%read{3110,3918} %write{3110,3918} %mystruct{___767_octave} %mystructfield{0}
local	color	___767_octave.Color	%read{3110,3918} %write{3110,3918} %mystruct{___767_octave} %mystructfield{1}
local	float	___767_octave.Position.x	%read{3110,3918} %write{3110,3918} %mystruct{___767_octave} %mystructfield{0}
local	float	___767_octave.Position.y	%read{3110,3918} %write{3110,3918} %mystruct{___767_octave} %mystructfield{1}
local	float	___767_octave.Position.z	%read{3110,3918} %write{3110,3918} %mystruct{___767_octave} %mystructfield{2}
local	float	___767_octave.Position.w	%read{3110,3918} %write{3110,3918} %mystruct{___767_octave} %mystructfield{3}
local	float	___773_remainder	%read{3110,3918} %write{3110,3918}
local	float	___776_amplitude	%read{470,757} %write{457,757}
local	float	___776_max_amplitude	%read{470,759} %write{458,757}
local	float	___776_scale	%read{470,757} %write{459,757}
local	float	___776_distance	%read{470,760} %write{460,759}
local	int	___776_zero_input	%read{470,757} %write{467,467}
local	int	___777_i	%read{470,757} %write{469,757}
local	float	___778_octave_distance	%read{470,757} %write{470,757}
local	float	___781_remainder	%read{470,757} %write{470,757}
local	float	___782_lerp_amplitude	%read{470,757} %write{470,757}
local	float	___782_lerp_distance	%read{470,757} %write{470,757}
local	float	params.scale	%read{1653,3940} %write{4,4} %mystruct{params} %mystructfield{0}
local	float	params.detail	%read{8,3918} %write{7,8} %mystruct{params} %mystructfield{1}
local	float	params.roughness	%read{12,3918} %write{11,12} %mystruct{params} %mystructfield{2}
local	float	params.lacunarity	%read{52,3918} %write{13,13} %mystruct{params} %mystructfield{3}
local	float	params.smoothness	%read{18,3918} %write{17,18} %mystruct{params} %mystructfield{4}
local	float	params.exponent	%read{1721,3918} %write{19,19} %mystruct{params} %mystructfield{5}
local	float	params.randomness	%read{23,3918} %write{22,23} %mystruct{params} %mystructfield{6}
local	float	params.max_distance	%read{35,3920} %write{24,3086} %mystruct{params} %mystructfield{7}
local	int	params.normalize	%read{106,3919} %write{25,25} %mystruct{params} %mystructfield{8}
local	string	params.feature	%read{1347,3918} %write{2,2} %mystruct{params} %mystructfield{9}
local	string	params.metric	%read{1688,3918} %write{3,3} %mystruct{params} %mystructfield{10}
local	point	coord	%read{28,3089} %write{26,30}
local	float	w	%read{52,3090} %write{29,29}
local	float	___797_Output.Distance	%read{1676,3949} %write{1670,3943} %mystruct{___797_Output} %mystructfield{0}
local	color	___797_Output.Color	%read{1677,3950} %write{1671,3944} %mystruct{___797_Output} %mystructfield{1}
local	float	___797_Output.Position.x	%read{2302,3951} %write{1672,3945} %mystruct{___797_Output} %mystructfield{0}
local	float	___797_Output.Position.y	%read{2302,3951} %write{1673,3946} %mystruct{___797_Output} %mystructfield{1}
local	float	___797_Output.Position.z	%read{2997,3951} %write{1674,3947} %mystruct{___797_Output} %mystructfield{2}
local	float	___797_Output.Position.w	%read{1678,3952} %write{1675,3948} %mystruct{___797_Output} %mystructfield{3}
const	float	$const1	0		%read{7,3941} %write{2147483647,-1}
const	float	$const2	15		%read{6,6} %write{2147483647,-1}
const	string	$const3	"clamp"		%read{5,20} %write{2147483647,-1}
temp	float	$tmp1	%read{7,7} %write{6,6}
const	float	$const4	1		%read{10,3898} %write{2147483647,-1}
temp	float	$tmp2	%read{11,11} %write{10,10}
const	float	$const5	2		%read{14,3083} %write{2147483647,-1}
temp	float	$tmp3	%read{16,16} %write{14,14}
const	float	$const6	0.5		%read{16,3544} %write{2147483647,-1}
temp	float	$tmp4	%read{17,17} %write{16,16}
temp	float	$tmp5	%read{22,22} %write{21,21}
const	string	$const7	"distance_to_edge"		%read{31,31} %write{2147483647,-1}
temp	int	$tmp6	%read{32,32} %write{31,31}
temp	float	$tmp7	%read{34,34} %write{33,33}
const	string	$const8	"1D"		%read{36,1343} %write{2147483647,-1}
temp	int	$tmp8	%read{37,37} %write{36,36}
const	string	$const9	"fractal_voronoi_distance_to_edge"		%read{38,456} %write{2147483647,-1}
const	float	$const10	8		%read{42,460} %write{2147483647,-1}
temp	int	$tmp9	%read{44,44} %write{43,43}
temp	int	$tmp10	%read{45,49} %write{44,48}
const	int	$const11	0		%read{44,3667} %write{2147483647,-1}
temp	int	$tmp11	%read{47,47} %write{46,46}
temp	int	$tmp12	%read{48,48} %write{47,47}
temp	float	$tmp13	%read{52,105} %write{52,105}
temp	int	$tmp14	%read{52,105} %write{52,105}
temp	int	$tmp15	%read{50,105} %write{51,105}
temp	float	$tmp16	%read{52,105} %write{52,105}
const	string	$const12	"voronoi_distance_to_edge"		%read{56,483} %write{2147483647,-1}
temp	float	$tmp17	%read{52,105} %write{52,105}
const	string	$const13	"hash_float_to_float"		%read{59,1550} %write{2147483647,-1}
const	float	$const14	-1		%read{66,3538} %write{2147483647,-1}
temp	float	$tmp18	%read{52,105} %write{52,105}
temp	float	$tmp19	%read{52,105} %write{52,105}
temp	float	$tmp20	%read{52,105} %write{52,105}
temp	float	$tmp21	%read{52,105} %write{52,105}
temp	float	$tmp22	%read{52,105} %write{52,105}
temp	float	$tmp23	%read{52,105} %write{52,105}
temp	float	$tmp24	%read{52,105} %write{52,105}
temp	float	$tmp25	%read{52,105} %write{52,105}
temp	float	$tmp26	%read{52,105} %write{52,105}
temp	float	$tmp27	%read{52,105} %write{52,105}
temp	float	$tmp28	%read{52,105} %write{52,105}
temp	float	$tmp29	%read{52,105} %write{52,105}
temp	int	$tmp30	%read{52,105} %write{52,105}
temp	float	$tmp31	%read{52,105} %write{52,105}
temp	float	$tmp32	%read{52,105} %write{52,105}
temp	float	$tmp33	%read{52,105} %write{52,105}
temp	float	$tmp34	%read{52,105} %write{52,105}
temp	int	$tmp35	%read{52,105} %write{52,105}
temp	float	$tmp36	%read{52,105} %write{52,105}
temp	float	$tmp37	%read{52,105} %write{52,105}
temp	float	$tmp38	%read{52,105} %write{52,105}
temp	float	$tmp39	%read{52,105} %write{52,105}
const	int	$const15	1		%read{105,3918} %write{2147483647,-1}
const	string	$const16	"2D"		%read{109,1679} %write{2147483647,-1}
temp	int	$tmp40	%read{110,110} %write{109,109}
temp	float	$tmp41.x	%read{127,289} %write{111,111}
temp	float	$tmp41.y	%read{127,289} %write{112,112}
temp	int	$tmp42	%read{119,119} %write{118,118}
temp	int	$tmp43	%read{120,124} %write{119,123}
temp	int	$tmp44	%read{122,122} %write{121,121}
temp	int	$tmp45	%read{123,123} %write{122,122}
temp	float	$tmp46	%read{127,289} %write{127,289}
temp	int	$tmp47	%read{127,289} %write{127,289}
temp	int	$tmp48	%read{125,289} %write{126,289}
temp	float	$tmp49.x	%read{127,289} %write{127,289}
temp	float	$tmp49.y	%read{127,289} %write{127,289}
const	string	$const17	"__operator__mul__"		%read{130,3903} %write{2147483647,-1}
temp	float	$tmp50.x	%read{127,289} %write{127,289}
temp	float	$tmp50.y	%read{127,289} %write{127,289}
const	string	$const18	"floor"		%read{137,3633} %write{2147483647,-1}
const	string	$const19	"__operator__sub__"		%read{140,3721} %write{2147483647,-1}
const	float	$const20	3.40282347e+38		%read{145,3643} %write{2147483647,-1}
const	int	$const21	-1		%read{147,3665} %write{2147483647,-1}
temp	int	$tmp51	%read{127,289} %write{127,289}
temp	int	$tmp52	%read{127,289} %write{127,289}
temp	int	$tmp53	%read{127,289} %write{127,289}
temp	int	$tmp54	%read{127,289} %write{127,289}
temp	float	$tmp55.x	%read{127,289} %write{127,289}
temp	float	$tmp55.y	%read{127,289} %write{127,289}
temp	float	$tmp56.x	%read{127,289} %write{127,289}
temp	float	$tmp56.y	%read{127,289} %write{127,289}
temp	float	$tmp57.x	%read{127,289} %write{127,289}
temp	float	$tmp57.y	%read{127,289} %write{127,289}
temp	float	$tmp58.x	%read{127,289} %write{127,289}
temp	float	$tmp58.y	%read{127,289} %write{127,289}
const	string	$const22	"__operator__add__"		%read{156,3831} %write{2147483647,-1}
const	string	$const23	"hash_vector2_to_vector2"		%read{159,2099} %write{2147483647,-1}
const	string	$const24	"hash_vector2_to_float"		%read{160,2174} %write{2147483647,-1}
temp	point	$tmp59	%read{127,289} %write{127,289}
const	string	$const25	"hash_vector3_to_float"		%read{163,2863} %write{2147483647,-1}
temp	float	$tmp60.x	%read{127,289} %write{127,289}
temp	float	$tmp60.y	%read{127,289} %write{127,289}
const	string	$const26	"dot"		%read{177,715} %write{2147483647,-1}
temp	float	$tmp61	%read{127,289} %write{127,289}
temp	float	$tmp62	%read{127,289} %write{127,289}
temp	int	$tmp63	%read{127,289} %write{127,289}
temp	int	$tmp64	%read{2147483647,-1} %write{127,289}
temp	int	$tmp65	%read{2147483647,-1} %write{127,289}
temp	int	$tmp66	%read{127,289} %write{127,289}
temp	int	$tmp67	%read{127,289} %write{127,289}
temp	int	$tmp68	%read{127,289} %write{127,289}
temp	int	$tmp69	%read{127,289} %write{127,289}
temp	float	$tmp70.x	%read{127,289} %write{127,289}
temp	float	$tmp70.y	%read{127,289} %write{127,289}
temp	float	$tmp71.x	%read{127,289} %write{127,289}
temp	float	$tmp71.y	%read{127,289} %write{127,289}
temp	float	$tmp72.x	%read{127,289} %write{127,289}
temp	float	$tmp72.y	%read{127,289} %write{127,289}
temp	float	$tmp73.x	%read{127,289} %write{127,289}
temp	float	$tmp73.y	%read{127,289} %write{127,289}
temp	point	$tmp74	%read{127,289} %write{127,289}
temp	float	$tmp75.x	%read{127,289} %write{127,289}
temp	float	$tmp75.y	%read{127,289} %write{127,289}
temp	float	$tmp76	%read{127,289} %write{127,289}
temp	float	$tmp77	%read{127,289} %write{127,289}
temp	float	$tmp78	%read{127,289} %write{127,289}
const	float	$const27	9.99999975e-05		%read{229,676} %write{2147483647,-1}
temp	int	$tmp79	%read{127,289} %write{127,289}
temp	float	$tmp80.x	%read{127,289} %write{127,289}
temp	float	$tmp80.y	%read{127,289} %write{127,289}
temp	float	$tmp81.x	%read{127,289} %write{127,289}
temp	float	$tmp81.y	%read{127,289} %write{127,289}
const	string	$const28	"__operator__div__"		%read{234,3897} %write{2147483647,-1}
temp	float	$tmp82.x	%read{127,289} %write{127,289}
temp	float	$tmp82.y	%read{127,289} %write{127,289}
temp	float	$tmp83.x	%read{127,289} %write{127,289}
temp	float	$tmp83.y	%read{127,289} %write{127,289}
const	string	$const29	"normalize"		%read{241,694} %write{2147483647,-1}
temp	float	$tmp84	%read{127,289} %write{127,289}
const	string	$const30	"length"		%read{242,3726} %write{2147483647,-1}
const	string	$const31	"hypot"		%read{243,2122} %write{2147483647,-1}
temp	float	$tmp85	%read{127,289} %write{127,289}
temp	float	$tmp86	%read{127,289} %write{127,289}
temp	float	$tmp87	%read{127,289} %write{127,289}
temp	float	$tmp88.x	%read{127,289} %write{127,289}
temp	float	$tmp88.y	%read{127,289} %write{127,289}
temp	float	$tmp89	%read{127,289} %write{127,289}
temp	float	$tmp90	%read{127,289} %write{127,289}
temp	int	$tmp91	%read{2147483647,-1} %write{127,289}
temp	int	$tmp92	%read{2147483647,-1} %write{127,289}
temp	int	$tmp93	%read{127,289} %write{127,289}
temp	float	$tmp94	%read{127,289} %write{127,289}
temp	float	$tmp95	%read{127,289} %write{127,289}
temp	float	$tmp96	%read{127,289} %write{127,289}
temp	float	$tmp97	%read{127,289} %write{127,289}
temp	int	$tmp98	%read{127,289} %write{127,289}
temp	float	$tmp99	%read{127,289} %write{127,289}
temp	float	$tmp100	%read{127,289} %write{127,289}
temp	float	$tmp101	%read{127,289} %write{127,289}
temp	float	$tmp102	%read{127,289} %write{127,289}
const	string	$const32	"3D"		%read{293,2303} %write{2147483647,-1}
temp	int	$tmp103	%read{294,294} %write{293,293}
temp	int	$tmp104	%read{301,301} %write{300,300}
temp	int	$tmp105	%read{302,306} %write{301,305}
temp	int	$tmp106	%read{304,304} %write{303,303}
temp	int	$tmp107	%read{305,305} %write{304,304}
temp	float	$tmp108	%read{309,446} %write{309,446}
temp	int	$tmp109	%read{309,446} %write{309,446}
temp	int	$tmp110	%read{307,446} %write{308,446}
temp	point	$tmp111	%read{309,446} %write{309,446}
const	point	$const33	0 0 0		%read{316,3398} %write{2147483647,-1}
temp	int	$tmp112	%read{309,446} %write{309,446}
temp	int	$tmp113	%read{309,446} %write{309,446}
temp	int	$tmp114	%read{309,446} %write{309,446}
temp	int	$tmp115	%read{309,446} %write{309,446}
temp	int	$tmp116	%read{309,446} %write{309,446}
temp	int	$tmp117	%read{309,446} %write{309,446}
temp	float	$tmp118	%read{309,446} %write{309,446}
temp	float	$tmp119	%read{309,446} %write{309,446}
temp	float	$tmp120	%read{309,446} %write{309,446}
temp	point	$tmp121	%read{309,446} %write{309,446}
temp	point	$tmp122	%read{309,446} %write{309,446}
const	string	$const34	"hash_vector3_to_vector3"		%read{335,2766} %write{2147483647,-1}
temp	float	$tmp123	%read{309,446} %write{309,446}
temp	float	$tmp124	%read{309,446} %write{309,446}
temp	float	$tmp125.x	%read{309,446} %write{309,446}
temp	float	$tmp125.y	%read{309,446} %write{309,446}
temp	float	$tmp125.z	%read{309,446} %write{309,446}
temp	float	$tmp125.w	%read{309,446} %write{309,446}
const	int	$const35	2		%read{340,3418} %write{2147483647,-1}
const	string	$const36	"hash_vector4_to_float"		%read{342,3826} %write{2147483647,-1}
temp	point	$tmp126	%read{309,446} %write{309,446}
temp	float	$tmp127	%read{309,446} %write{309,446}
temp	float	$tmp128.x	%read{309,446} %write{309,446}
temp	float	$tmp128.y	%read{309,446} %write{309,446}
temp	float	$tmp128.z	%read{309,446} %write{309,446}
temp	float	$tmp128.w	%read{309,446} %write{309,446}
temp	point	$tmp129	%read{309,446} %write{309,446}
temp	point	$tmp130	%read{309,446} %write{309,446}
temp	point	$tmp131	%read{309,446} %write{309,446}
temp	int	$tmp132	%read{309,446} %write{309,446}
temp	int	$tmp133	%read{2147483647,-1} %write{309,446}
temp	int	$tmp134	%read{2147483647,-1} %write{309,446}
temp	int	$tmp135	%read{2147483647,-1} %write{309,446}
temp	int	$tmp136	%read{309,446} %write{309,446}
temp	int	$tmp137	%read{309,446} %write{309,446}
temp	int	$tmp138	%read{309,446} %write{309,446}
temp	int	$tmp139	%read{309,446} %write{309,446}
temp	int	$tmp140	%read{309,446} %write{309,446}
temp	int	$tmp141	%read{309,446} %write{309,446}
temp	float	$tmp142	%read{309,446} %write{309,446}
temp	float	$tmp143	%read{309,446} %write{309,446}
temp	float	$tmp144	%read{309,446} %write{309,446}
temp	point	$tmp145	%read{309,446} %write{309,446}
temp	point	$tmp146	%read{309,446} %write{309,446}
temp	float	$tmp147	%read{309,446} %write{309,446}
temp	float	$tmp148	%read{309,446} %write{309,446}
temp	float	$tmp149.x	%read{309,446} %write{309,446}
temp	float	$tmp149.y	%read{309,446} %write{309,446}
temp	float	$tmp149.z	%read{309,446} %write{309,446}
temp	float	$tmp149.w	%read{309,446} %write{309,446}
temp	point	$tmp150	%read{309,446} %write{309,446}
temp	float	$tmp151	%read{309,446} %write{309,446}
temp	float	$tmp152.x	%read{309,446} %write{309,446}
temp	float	$tmp152.y	%read{309,446} %write{309,446}
temp	float	$tmp152.z	%read{309,446} %write{309,446}
temp	float	$tmp152.w	%read{309,446} %write{309,446}
temp	point	$tmp153	%read{309,446} %write{309,446}
temp	point	$tmp154	%read{309,446} %write{309,446}
temp	point	$tmp155	%read{309,446} %write{309,446}
temp	float	$tmp156	%read{309,446} %write{309,446}
temp	int	$tmp157	%read{309,446} %write{309,446}
temp	point	$tmp158	%read{309,446} %write{309,446}
temp	point	$tmp159	%read{309,446} %write{309,446}
temp	vector	$tmp160	%read{309,446} %write{309,446}
temp	int	$tmp161	%read{2147483647,-1} %write{309,446}
temp	int	$tmp162	%read{2147483647,-1} %write{309,446}
temp	int	$tmp163	%read{2147483647,-1} %write{309,446}
temp	int	$tmp164	%read{309,446} %write{309,446}
temp	float	$tmp165	%read{309,446} %write{309,446}
temp	float	$tmp166	%read{309,446} %write{309,446}
temp	float	$tmp167	%read{309,446} %write{309,446}
temp	float	$tmp168	%read{309,446} %write{309,446}
temp	int	$tmp169	%read{309,446} %write{309,446}
temp	float	$tmp170	%read{309,446} %write{309,446}
temp	float	$tmp171	%read{309,446} %write{309,446}
temp	float	$tmp172	%read{309,446} %write{309,446}
temp	float	$tmp173	%read{309,446} %write{309,446}
const	string	$const37	"4D"		%read{450,2998} %write{2147483647,-1}
temp	int	$tmp174	%read{451,451} %write{450,450}
temp	float	$tmp175.x	%read{470,757} %write{452,452}
temp	float	$tmp175.y	%read{470,757} %write{453,453}
temp	float	$tmp175.z	%read{470,757} %write{454,454}
temp	float	$tmp175.w	%read{470,757} %write{455,455}
temp	int	$tmp176	%read{462,462} %write{461,461}
temp	int	$tmp177	%read{463,467} %write{462,466}
temp	int	$tmp178	%read{465,465} %write{464,464}
temp	int	$tmp179	%read{466,466} %write{465,465}
temp	float	$tmp180	%read{470,757} %write{470,757}
temp	int	$tmp181	%read{470,757} %write{470,757}
temp	int	$tmp182	%read{468,757} %write{469,757}
temp	float	$tmp183.x	%read{470,757} %write{470,757}
temp	float	$tmp183.y	%read{470,757} %write{470,757}
temp	float	$tmp183.z	%read{470,757} %write{470,757}
temp	float	$tmp183.w	%read{470,757} %write{470,757}
temp	float	$tmp184.x	%read{470,757} %write{470,757}
temp	float	$tmp184.y	%read{470,757} %write{470,757}
temp	float	$tmp184.z	%read{470,757} %write{470,757}
temp	float	$tmp184.w	%read{470,757} %write{470,757}
temp	int	$tmp185	%read{470,757} %write{470,757}
temp	int	$tmp186	%read{470,757} %write{470,757}
temp	int	$tmp187	%read{470,757} %write{470,757}
temp	int	$tmp188	%read{470,757} %write{470,757}
temp	int	$tmp189	%read{470,757} %write{470,757}
temp	int	$tmp190	%read{470,757} %write{470,757}
temp	int	$tmp191	%read{470,757} %write{470,757}
temp	int	$tmp192	%read{470,757} %write{470,757}
temp	float	$tmp193.x	%read{470,757} %write{470,757}
temp	float	$tmp193.y	%read{470,757} %write{470,757}
temp	float	$tmp193.z	%read{470,757} %write{470,757}
temp	float	$tmp193.w	%read{470,757} %write{470,757}
temp	float	$tmp194.x	%read{470,757} %write{470,757}
temp	float	$tmp194.y	%read{470,757} %write{470,757}
temp	float	$tmp194.z	%read{470,757} %write{470,757}
temp	float	$tmp194.w	%read{470,757} %write{470,757}
temp	float	$tmp195.x	%read{470,757} %write{470,757}
temp	float	$tmp195.y	%read{470,757} %write{470,757}
temp	float	$tmp195.z	%read{470,757} %write{470,757}
temp	float	$tmp195.w	%read{470,757} %write{470,757}
temp	float	$tmp196.x	%read{470,757} %write{470,757}
temp	float	$tmp196.y	%read{470,757} %write{470,757}
temp	float	$tmp196.z	%read{470,757} %write{470,757}
temp	float	$tmp196.w	%read{470,757} %write{470,757}
const	string	$const38	"hash_vector4_to_vector4"		%read{524,3677} %write{2147483647,-1}
temp	point	$tmp197	%read{470,757} %write{470,757}
temp	float	$tmp198.x	%read{470,757} %write{470,757}
temp	float	$tmp198.y	%read{470,757} %write{470,757}
temp	float	$tmp198.z	%read{470,757} %write{470,757}
temp	float	$tmp198.w	%read{470,757} %write{470,757}
temp	point	$tmp199	%read{470,757} %write{470,757}
temp	float	$tmp200.x	%read{470,757} %write{470,757}
temp	float	$tmp200.y	%read{470,757} %write{470,757}
temp	float	$tmp200.z	%read{470,757} %write{470,757}
temp	float	$tmp200.w	%read{470,757} %write{470,757}
temp	point	$tmp201	%read{470,757} %write{470,757}
temp	float	$tmp202.x	%read{470,757} %write{470,757}
temp	float	$tmp202.y	%read{470,757} %write{470,757}
temp	float	$tmp202.z	%read{470,757} %write{470,757}
temp	float	$tmp202.w	%read{470,757} %write{470,757}
temp	point	$tmp203	%read{470,757} %write{470,757}
temp	float	$tmp204.x	%read{470,757} %write{470,757}
temp	float	$tmp204.y	%read{470,757} %write{470,757}
temp	float	$tmp204.z	%read{470,757} %write{470,757}
temp	float	$tmp204.w	%read{470,757} %write{470,757}
temp	float	$tmp205	%read{470,757} %write{470,757}
temp	float	$tmp206	%read{470,757} %write{470,757}
temp	float	$tmp207	%read{470,757} %write{470,757}
temp	float	$tmp208	%read{470,757} %write{470,757}
temp	float	$tmp209	%read{470,757} %write{470,757}
temp	float	$tmp210	%read{470,757} %write{470,757}
temp	int	$tmp211	%read{470,757} %write{470,757}
temp	int	$tmp212	%read{2147483647,-1} %write{470,757}
temp	int	$tmp213	%read{2147483647,-1} %write{470,757}
temp	int	$tmp214	%read{2147483647,-1} %write{470,757}
temp	int	$tmp215	%read{2147483647,-1} %write{470,757}
temp	int	$tmp216	%read{470,757} %write{470,757}
temp	int	$tmp217	%read{470,757} %write{470,757}
temp	int	$tmp218	%read{470,757} %write{470,757}
temp	int	$tmp219	%read{470,757} %write{470,757}
temp	int	$tmp220	%read{470,757} %write{470,757}
temp	int	$tmp221	%read{470,757} %write{470,757}
temp	int	$tmp222	%read{470,757} %write{470,757}
temp	int	$tmp223	%read{470,757} %write{470,757}
temp	float	$tmp224.x	%read{470,757} %write{470,757}
temp	float	$tmp224.y	%read{470,757} %write{470,757}
temp	float	$tmp224.z	%read{470,757} %write{470,757}
temp	float	$tmp224.w	%read{470,757} %write{470,757}
temp	float	$tmp225.x	%read{470,757} %write{470,757}
temp	float	$tmp225.y	%read{470,757} %write{470,757}
temp	float	$tmp225.z	%read{470,757} %write{470,757}
temp	float	$tmp225.w	%read{470,757} %write{470,757}
temp	float	$tmp226.x	%read{470,757} %write{470,757}
temp	float	$tmp226.y	%read{470,757} %write{470,757}
temp	float	$tmp226.z	%read{470,757} %write{470,757}
temp	float	$tmp226.w	%read{470,757} %write{470,757}
temp	float	$tmp227.x	%read{470,757} %write{470,757}
temp	float	$tmp227.y	%read{470,757} %write{470,757}
temp	float	$tmp227.z	%read{470,757} %write{470,757}
temp	float	$tmp227.w	%read{470,757} %write{470,757}
temp	point	$tmp228	%read{470,757} %write{470,757}
temp	float	$tmp229.x	%read{470,757} %write{470,757}
temp	float	$tmp229.y	%read{470,757} %write{470,757}
temp	float	$tmp229.z	%read{470,757} %write{470,757}
temp	float	$tmp229.w	%read{470,757} %write{470,757}
temp	point	$tmp230	%read{470,757} %write{470,757}
temp	float	$tmp231.x	%read{470,757} %write{470,757}
temp	float	$tmp231.y	%read{470,757} %write{470,757}
temp	float	$tmp231.z	%read{470,757} %write{470,757}
temp	float	$tmp231.w	%read{470,757} %write{470,757}
temp	point	$tmp232	%read{470,757} %write{470,757}
temp	float	$tmp233.x	%read{470,757} %write{470,757}
temp	float	$tmp233.y	%read{470,757} %write{470,757}
temp	float	$tmp233.z	%read{470,757} %write{470,757}
temp	float	$tmp233.w	%read{470,757} %write{470,757}
temp	point	$tmp234	%read{470,757} %write{470,757}
temp	float	$tmp235.x	%read{470,757} %write{470,757}
temp	float	$tmp235.y	%read{470,757} %write{470,757}
temp	float	$tmp235.z	%read{470,757} %write{470,757}
temp	float	$tmp235.w	%read{470,757} %write{470,757}
temp	float	$tmp236	%read{470,757} %write{470,757}
temp	float	$tmp237	%read{470,757} %write{470,757}
temp	float	$tmp238	%read{470,757} %write{470,757}
temp	float	$tmp239	%read{470,757} %write{470,757}
temp	float	$tmp240	%read{470,757} %write{470,757}
temp	float	$tmp241	%read{470,757} %write{470,757}
temp	float	$tmp242	%read{470,757} %write{470,757}
temp	int	$tmp243	%read{470,757} %write{470,757}
temp	float	$tmp244.x	%read{470,757} %write{470,757}
temp	float	$tmp244.y	%read{470,757} %write{470,757}
temp	float	$tmp244.z	%read{470,757} %write{470,757}
temp	float	$tmp244.w	%read{470,757} %write{470,757}
temp	float	$tmp245.x	%read{470,757} %write{470,757}
temp	float	$tmp245.y	%read{470,757} %write{470,757}
temp	float	$tmp245.z	%read{470,757} %write{470,757}
temp	float	$tmp245.w	%read{470,757} %write{470,757}
temp	float	$tmp246.x	%read{470,757} %write{470,757}
temp	float	$tmp246.y	%read{470,757} %write{470,757}
temp	float	$tmp246.z	%read{470,757} %write{470,757}
temp	float	$tmp246.w	%read{470,757} %write{470,757}
temp	float	$tmp247.x	%read{470,757} %write{470,757}
temp	float	$tmp247.y	%read{470,757} %write{470,757}
temp	float	$tmp247.z	%read{470,757} %write{470,757}
temp	float	$tmp247.w	%read{470,757} %write{470,757}
temp	float	$tmp248	%read{470,757} %write{470,757}
temp	float	$tmp249	%read{470,757} %write{470,757}
temp	float	$tmp250	%read{470,757} %write{470,757}
temp	float	$tmp251	%read{470,757} %write{470,757}
temp	float	$tmp252	%read{470,757} %write{470,757}
temp	float	$tmp253	%read{470,757} %write{470,757}
temp	float	$tmp254	%read{470,757} %write{470,757}
temp	float	$tmp255	%read{470,757} %write{470,757}
temp	float	$tmp256.x	%read{470,757} %write{470,757}
temp	float	$tmp256.y	%read{470,757} %write{470,757}
temp	float	$tmp256.z	%read{470,757} %write{470,757}
temp	float	$tmp256.w	%read{470,757} %write{470,757}
temp	float	$tmp257	%read{470,757} %write{470,757}
temp	float	$tmp258	%read{470,757} %write{470,757}
temp	float	$tmp259	%read{470,757} %write{470,757}
temp	float	$tmp260	%read{470,757} %write{470,757}
temp	float	$tmp261	%read{470,757} %write{470,757}
temp	float	$tmp262	%read{470,757} %write{470,757}
temp	int	$tmp263	%read{2147483647,-1} %write{470,757}
temp	int	$tmp264	%read{2147483647,-1} %write{470,757}
temp	int	$tmp265	%read{2147483647,-1} %write{470,757}
temp	int	$tmp266	%read{2147483647,-1} %write{470,757}
temp	int	$tmp267	%read{470,757} %write{470,757}
temp	float	$tmp268	%read{470,757} %write{470,757}
temp	float	$tmp269	%read{470,757} %write{470,757}
temp	float	$tmp270	%read{470,757} %write{470,757}
temp	float	$tmp271	%read{470,757} %write{470,757}
temp	int	$tmp272	%read{470,757} %write{470,757}
temp	float	$tmp273	%read{470,757} %write{470,757}
temp	float	$tmp274	%read{470,757} %write{470,757}
temp	float	$tmp275	%read{470,757} %write{470,757}
temp	float	$tmp276	%read{470,757} %write{470,757}
const	string	$const39	"Unknown dimension!"		%read{761,3953} %write{2147483647,-1}
const	string	$const40	"n_sphere_radius"		%read{762,762} %write{2147483647,-1}
temp	int	$tmp277	%read{763,763} %write{762,762}
temp	int	$tmp278	%read{765,765} %write{764,764}
const	string	$const41	"voronoi_n_sphere_radius"		%read{766,1084} %write{2147483647,-1}
temp	int	$tmp279	%read{774,790} %write{774,790}
temp	int	$tmp280	%read{772,790} %write{773,790}
temp	float	$tmp281	%read{774,790} %write{774,790}
temp	float	$tmp282	%read{774,790} %write{774,790}
temp	float	$tmp283	%read{774,790} %write{774,790}
temp	float	$tmp284	%read{774,790} %write{774,790}
temp	int	$tmp285	%read{774,790} %write{774,790}
temp	int	$tmp286	%read{2147483647,-1} %write{774,790}
temp	int	$tmp287	%read{795,814} %write{795,814}
temp	int	$tmp288	%read{793,814} %write{794,814}
temp	int	$tmp289	%read{795,814} %write{795,814}
temp	float	$tmp290	%read{795,814} %write{795,814}
temp	float	$tmp291	%read{795,814} %write{795,814}
temp	float	$tmp292	%read{795,814} %write{795,814}
temp	float	$tmp293	%read{795,814} %write{795,814}
temp	float	$tmp294	%read{795,814} %write{795,814}
temp	int	$tmp295	%read{795,814} %write{795,814}
temp	int	$tmp296	%read{2147483647,-1} %write{795,814}
temp	float	$tmp297	%read{817,817} %write{816,816}
temp	float	$tmp298	%read{816,816} %write{815,815}
temp	int	$tmp299	%read{819,819} %write{818,818}
temp	float	$tmp300.x	%read{824,827} %write{820,820}
temp	float	$tmp300.y	%read{825,828} %write{821,821}
temp	int	$tmp301	%read{836,882} %write{836,882}
temp	int	$tmp302	%read{834,882} %write{835,882}
temp	int	$tmp303	%read{836,882} %write{836,882}
temp	int	$tmp304	%read{836,882} %write{836,882}
temp	float	$tmp305.x	%read{836,882} %write{836,882}
temp	float	$tmp305.y	%read{836,882} %write{836,882}
temp	float	$tmp306.x	%read{836,882} %write{836,882}
temp	float	$tmp306.y	%read{836,882} %write{836,882}
temp	float	$tmp307.x	%read{836,882} %write{836,882}
temp	float	$tmp307.y	%read{836,882} %write{836,882}
temp	point	$tmp308	%read{836,882} %write{836,882}
temp	float	$tmp309.x	%read{836,882} %write{836,882}
temp	float	$tmp309.y	%read{836,882} %write{836,882}
const	string	$const42	"distance"		%read{862,3720} %write{2147483647,-1}
temp	float	$tmp310.x	%read{836,882} %write{836,882}
temp	float	$tmp310.y	%read{836,882} %write{836,882}
temp	float	$tmp311	%read{836,882} %write{836,882}
temp	float	$tmp312	%read{836,882} %write{836,882}
temp	float	$tmp313	%read{836,882} %write{836,882}
temp	int	$tmp314	%read{836,882} %write{836,882}
temp	int	$tmp315	%read{2147483647,-1} %write{836,882}
temp	int	$tmp316	%read{2147483647,-1} %write{836,882}
temp	int	$tmp317	%read{888,943} %write{888,943}
temp	int	$tmp318	%read{886,943} %write{887,943}
temp	int	$tmp319	%read{888,943} %write{888,943}
temp	int	$tmp320	%read{888,943} %write{888,943}
temp	int	$tmp321	%read{888,943} %write{888,943}
temp	int	$tmp322	%read{888,943} %write{888,943}
temp	int	$tmp323	%read{888,943} %write{888,943}
temp	int	$tmp324	%read{888,943} %write{888,943}
temp	float	$tmp325.x	%read{888,943} %write{888,943}
temp	float	$tmp325.y	%read{888,943} %write{888,943}
temp	float	$tmp326.x	%read{888,943} %write{888,943}
temp	float	$tmp326.y	%read{888,943} %write{888,943}
temp	float	$tmp327.x	%read{888,943} %write{888,943}
temp	float	$tmp327.y	%read{888,943} %write{888,943}
temp	float	$tmp328.x	%read{888,943} %write{888,943}
temp	float	$tmp328.y	%read{888,943} %write{888,943}
temp	point	$tmp329	%read{888,943} %write{888,943}
temp	float	$tmp330.x	%read{888,943} %write{888,943}
temp	float	$tmp330.y	%read{888,943} %write{888,943}
temp	float	$tmp331.x	%read{888,943} %write{888,943}
temp	float	$tmp331.y	%read{888,943} %write{888,943}
temp	float	$tmp332	%read{888,943} %write{888,943}
temp	float	$tmp333	%read{888,943} %write{888,943}
temp	float	$tmp334	%read{888,943} %write{888,943}
temp	int	$tmp335	%read{888,943} %write{888,943}
temp	int	$tmp336	%read{2147483647,-1} %write{888,943}
temp	int	$tmp337	%read{2147483647,-1} %write{888,943}
temp	float	$tmp338	%read{954,954} %write{953,953}
temp	float	$tmp339.x	%read{950,950} %write{946,946}
temp	float	$tmp339.y	%read{951,951} %write{947,947}
temp	float	$tmp340	%read{952,952} %write{950,950}
temp	float	$tmp341	%read{952,952} %write{951,951}
temp	float	$tmp342	%read{953,953} %write{952,952}
temp	int	$tmp343	%read{956,956} %write{955,955}
temp	int	$tmp344	%read{965,1011} %write{965,1011}
temp	int	$tmp345	%read{963,1011} %write{964,1011}
temp	int	$tmp346	%read{965,1011} %write{965,1011}
temp	int	$tmp347	%read{965,1011} %write{965,1011}
temp	int	$tmp348	%read{965,1011} %write{965,1011}
temp	int	$tmp349	%read{965,1011} %write{965,1011}
temp	float	$tmp350	%read{965,1011} %write{965,1011}
temp	float	$tmp351	%read{965,1011} %write{965,1011}
temp	float	$tmp352	%read{965,1011} %write{965,1011}
temp	point	$tmp353	%read{965,1011} %write{965,1011}
temp	point	$tmp354	%read{965,1011} %write{965,1011}
temp	float	$tmp355	%read{965,1011} %write{965,1011}
temp	float	$tmp356	%read{965,1011} %write{965,1011}
temp	float	$tmp357.x	%read{965,1011} %write{965,1011}
temp	float	$tmp357.y	%read{965,1011} %write{965,1011}
temp	float	$tmp357.z	%read{965,1011} %write{965,1011}
temp	float	$tmp357.w	%read{965,1011} %write{965,1011}
temp	point	$tmp358	%read{965,1011} %write{965,1011}
temp	float	$tmp359	%read{965,1011} %write{965,1011}
temp	float	$tmp360.x	%read{965,1011} %write{965,1011}
temp	float	$tmp360.y	%read{965,1011} %write{965,1011}
temp	float	$tmp360.z	%read{965,1011} %write{965,1011}
temp	float	$tmp360.w	%read{965,1011} %write{965,1011}
temp	point	$tmp361	%read{965,1011} %write{965,1011}
temp	point	$tmp362	%read{965,1011} %write{965,1011}
temp	int	$tmp363	%read{965,1011} %write{965,1011}
temp	int	$tmp364	%read{2147483647,-1} %write{965,1011}
temp	int	$tmp365	%read{2147483647,-1} %write{965,1011}
temp	int	$tmp366	%read{2147483647,-1} %write{965,1011}
temp	int	$tmp367	%read{1016,1075} %write{1016,1075}
temp	int	$tmp368	%read{1014,1075} %write{1015,1075}
temp	int	$tmp369	%read{1016,1075} %write{1016,1075}
temp	int	$tmp370	%read{1016,1075} %write{1016,1075}
temp	int	$tmp371	%read{1016,1075} %write{1016,1075}
temp	int	$tmp372	%read{1016,1075} %write{1016,1075}
temp	int	$tmp373	%read{1016,1075} %write{1016,1075}
temp	int	$tmp374	%read{1016,1075} %write{1016,1075}
temp	int	$tmp375	%read{1016,1075} %write{1016,1075}
temp	int	$tmp376	%read{1016,1075} %write{1016,1075}
temp	int	$tmp377	%read{1016,1075} %write{1016,1075}
temp	int	$tmp378	%read{1016,1075} %write{1016,1075}
temp	int	$tmp379	%read{1016,1075} %write{1016,1075}
temp	point	$tmp380	%read{1016,1075} %write{1016,1075}
temp	float	$tmp381	%read{1016,1075} %write{1016,1075}
temp	float	$tmp382	%read{1016,1075} %write{1016,1075}
temp	float	$tmp383	%read{1016,1075} %write{1016,1075}
temp	point	$tmp384	%read{1016,1075} %write{1016,1075}
temp	point	$tmp385	%read{1016,1075} %write{1016,1075}
temp	float	$tmp386	%read{1016,1075} %write{1016,1075}
temp	float	$tmp387	%read{1016,1075} %write{1016,1075}
temp	float	$tmp388.x	%read{1016,1075} %write{1016,1075}
temp	float	$tmp388.y	%read{1016,1075} %write{1016,1075}
temp	float	$tmp388.z	%read{1016,1075} %write{1016,1075}
temp	float	$tmp388.w	%read{1016,1075} %write{1016,1075}
temp	point	$tmp389	%read{1016,1075} %write{1016,1075}
temp	float	$tmp390	%read{1016,1075} %write{1016,1075}
temp	float	$tmp391.x	%read{1016,1075} %write{1016,1075}
temp	float	$tmp391.y	%read{1016,1075} %write{1016,1075}
temp	float	$tmp391.z	%read{1016,1075} %write{1016,1075}
temp	float	$tmp391.w	%read{1016,1075} %write{1016,1075}
temp	point	$tmp392	%read{1016,1075} %write{1016,1075}
temp	point	$tmp393	%read{1016,1075} %write{1016,1075}
temp	int	$tmp394	%read{1016,1075} %write{1016,1075}
temp	int	$tmp395	%read{2147483647,-1} %write{1016,1075}
temp	int	$tmp396	%read{2147483647,-1} %write{1016,1075}
temp	int	$tmp397	%read{2147483647,-1} %write{1016,1075}
temp	float	$tmp398	%read{1077,1077} %write{1076,1076}
temp	int	$tmp399	%read{1079,1079} %write{1078,1078}
temp	float	$tmp400.x	%read{1086,1091} %write{1080,1080}
temp	float	$tmp400.y	%read{1087,1092} %write{1081,1081}
temp	float	$tmp400.z	%read{1088,1093} %write{1082,1082}
temp	float	$tmp400.w	%read{1089,1094} %write{1083,1083}
temp	int	$tmp401	%read{1106,1202} %write{1106,1202}
temp	int	$tmp402	%read{1104,1202} %write{1105,1202}
temp	int	$tmp403	%read{1106,1202} %write{1106,1202}
temp	int	$tmp404	%read{1106,1202} %write{1106,1202}
temp	int	$tmp405	%read{1106,1202} %write{1106,1202}
temp	int	$tmp406	%read{1106,1202} %write{1106,1202}
temp	int	$tmp407	%read{1106,1202} %write{1106,1202}
temp	int	$tmp408	%read{1106,1202} %write{1106,1202}
temp	float	$tmp409.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp409.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp409.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp409.w	%read{1106,1202} %write{1106,1202}
temp	float	$tmp410.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp410.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp410.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp410.w	%read{1106,1202} %write{1106,1202}
temp	float	$tmp411.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp411.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp411.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp411.w	%read{1106,1202} %write{1106,1202}
temp	point	$tmp412	%read{1106,1202} %write{1106,1202}
temp	float	$tmp413.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp413.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp413.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp413.w	%read{1106,1202} %write{1106,1202}
temp	point	$tmp414	%read{1106,1202} %write{1106,1202}
temp	float	$tmp415.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp415.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp415.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp415.w	%read{1106,1202} %write{1106,1202}
temp	point	$tmp416	%read{1106,1202} %write{1106,1202}
temp	float	$tmp417.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp417.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp417.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp417.w	%read{1106,1202} %write{1106,1202}
temp	point	$tmp418	%read{1106,1202} %write{1106,1202}
temp	float	$tmp419.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp419.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp419.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp419.w	%read{1106,1202} %write{1106,1202}
temp	float	$tmp420.x	%read{1106,1202} %write{1106,1202}
temp	float	$tmp420.y	%read{1106,1202} %write{1106,1202}
temp	float	$tmp420.z	%read{1106,1202} %write{1106,1202}
temp	float	$tmp420.w	%read{1106,1202} %write{1106,1202}
temp	float	$tmp421	%read{1106,1202} %write{1106,1202}
temp	float	$tmp422	%read{1106,1202} %write{1106,1202}
temp	float	$tmp423	%read{1106,1202} %write{1106,1202}
temp	float	$tmp424	%read{1106,1202} %write{1106,1202}
temp	float	$tmp425	%read{1106,1202} %write{1106,1202}
temp	float	$tmp426	%read{1106,1202} %write{1106,1202}
temp	float	$tmp427	%read{1106,1202} %write{1106,1202}
temp	int	$tmp428	%read{1106,1202} %write{1106,1202}
temp	int	$tmp429	%read{2147483647,-1} %write{1106,1202}
temp	int	$tmp430	%read{2147483647,-1} %write{1106,1202}
temp	int	$tmp431	%read{2147483647,-1} %write{1106,1202}
temp	int	$tmp432	%read{2147483647,-1} %write{1106,1202}
temp	int	$tmp433	%read{1210,1325} %write{1210,1325}
temp	int	$tmp434	%read{1208,1325} %write{1209,1325}
temp	int	$tmp435	%read{1210,1325} %write{1210,1325}
temp	int	$tmp436	%read{1210,1325} %write{1210,1325}
temp	int	$tmp437	%read{1210,1325} %write{1210,1325}
temp	int	$tmp438	%read{1210,1325} %write{1210,1325}
temp	int	$tmp439	%read{1210,1325} %write{1210,1325}
temp	int	$tmp440	%read{1210,1325} %write{1210,1325}
temp	int	$tmp441	%read{1210,1325} %write{1210,1325}
temp	int	$tmp442	%read{1210,1325} %write{1210,1325}
temp	int	$tmp443	%read{1210,1325} %write{1210,1325}
temp	int	$tmp444	%read{1210,1325} %write{1210,1325}
temp	int	$tmp445	%read{1210,1325} %write{1210,1325}
temp	int	$tmp446	%read{1210,1325} %write{1210,1325}
temp	int	$tmp447	%read{1210,1325} %write{1210,1325}
temp	int	$tmp448	%read{1210,1325} %write{1210,1325}
temp	int	$tmp449	%read{1210,1325} %write{1210,1325}
temp	int	$tmp450	%read{1210,1325} %write{1210,1325}
temp	float	$tmp451.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp451.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp451.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp451.w	%read{1210,1325} %write{1210,1325}
temp	float	$tmp452.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp452.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp452.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp452.w	%read{1210,1325} %write{1210,1325}
temp	float	$tmp453.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp453.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp453.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp453.w	%read{1210,1325} %write{1210,1325}
temp	float	$tmp454.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp454.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp454.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp454.w	%read{1210,1325} %write{1210,1325}
temp	point	$tmp455	%read{1210,1325} %write{1210,1325}
temp	float	$tmp456.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp456.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp456.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp456.w	%read{1210,1325} %write{1210,1325}
temp	point	$tmp457	%read{1210,1325} %write{1210,1325}
temp	float	$tmp458.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp458.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp458.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp458.w	%read{1210,1325} %write{1210,1325}
temp	point	$tmp459	%read{1210,1325} %write{1210,1325}
temp	float	$tmp460.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp460.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp460.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp460.w	%read{1210,1325} %write{1210,1325}
temp	point	$tmp461	%read{1210,1325} %write{1210,1325}
temp	float	$tmp462.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp462.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp462.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp462.w	%read{1210,1325} %write{1210,1325}
temp	float	$tmp463.x	%read{1210,1325} %write{1210,1325}
temp	float	$tmp463.y	%read{1210,1325} %write{1210,1325}
temp	float	$tmp463.z	%read{1210,1325} %write{1210,1325}
temp	float	$tmp463.w	%read{1210,1325} %write{1210,1325}
temp	float	$tmp464	%read{1210,1325} %write{1210,1325}
temp	float	$tmp465	%read{1210,1325} %write{1210,1325}
temp	float	$tmp466	%read{1210,1325} %write{1210,1325}
temp	float	$tmp467	%read{1210,1325} %write{1210,1325}
temp	float	$tmp468	%read{1210,1325} %write{1210,1325}
temp	float	$tmp469	%read{1210,1325} %write{1210,1325}
temp	float	$tmp470	%read{1210,1325} %write{1210,1325}
temp	int	$tmp471	%read{1210,1325} %write{1210,1325}
temp	int	$tmp472	%read{2147483647,-1} %write{1210,1325}
temp	int	$tmp473	%read{2147483647,-1} %write{1210,1325}
temp	int	$tmp474	%read{2147483647,-1} %write{1210,1325}
temp	int	$tmp475	%read{2147483647,-1} %write{1210,1325}
temp	float	$tmp476	%read{1341,1341} %write{1340,1340}
temp	float	$tmp477.x	%read{1333,1333} %write{1328,1328}
temp	float	$tmp477.y	%read{1334,1334} %write{1329,1329}
temp	float	$tmp477.z	%read{1336,1336} %write{1330,1330}
temp	float	$tmp477.w	%read{1338,1338} %write{1331,1331}
temp	float	$tmp478	%read{1335,1335} %write{1333,1333}
temp	float	$tmp479	%read{1335,1335} %write{1334,1334}
temp	float	$tmp480	%read{1337,1337} %write{1335,1335}
temp	float	$tmp481	%read{1337,1337} %write{1336,1336}
temp	float	$tmp482	%read{1339,1339} %write{1337,1337}
temp	float	$tmp483	%read{1339,1339} %write{1338,1338}
temp	float	$tmp484	%read{1340,1340} %write{1339,1339}
temp	int	$tmp485	%read{1344,1344} %write{1343,1343}
temp	float	$tmp486	%read{1346,1346} %write{1345,1345}
temp	float	$tmp487	%read{1351,1351} %write{1346,1346}
temp	float	$tmp488	%read{1351,1351} %write{1349,1350}
const	string	$const43	"f2"		%read{1347,3113} %write{2147483647,-1}
temp	int	$tmp489	%read{1348,1348} %write{1347,1347}
const	string	$const44	"fractal_voronoi_x_fx"		%read{1353,3091} %write{2147483647,-1}
const	color	$const45	0 0 0		%read{1358,3096} %write{2147483647,-1}
temp	int	$tmp490	%read{1364,1364} %write{1363,1363}
temp	int	$tmp491	%read{1365,1369} %write{1364,1368}
temp	int	$tmp492	%read{1367,1367} %write{1366,1366}
temp	int	$tmp493	%read{1368,1368} %write{1367,1367}
temp	float	$tmp494	%read{1372,1645} %write{1372,1645}
temp	int	$tmp495	%read{1372,1645} %write{1372,1645}
temp	int	$tmp496	%read{1370,1645} %write{1371,1645}
temp	int	$tmp497	%read{1372,1645} %write{1372,1645}
temp	float	$tmp498	%read{1372,1645} %write{1372,1645}
const	string	$const46	"voronoi_f2"		%read{1378,3125} %write{2147483647,-1}
temp	int	$tmp499	%read{1372,1645} %write{1372,1645}
temp	int	$tmp500	%read{1372,1645} %write{1372,1645}
temp	float	$tmp501	%read{1372,1645} %write{1372,1645}
temp	float	$tmp502	%read{1372,1645} %write{1372,1645}
temp	float	$tmp503	%read{1372,1645} %write{1372,1645}
const	string	$const47	"voronoi_distance"		%read{1397,3717} %write{2147483647,-1}
temp	float	$tmp504	%read{1372,1645} %write{1372,1645}
temp	int	$tmp505	%read{1372,1645} %write{1372,1645}
temp	int	$tmp506	%read{1372,1645} %write{1372,1645}
temp	int	$tmp507	%read{2147483647,-1} %write{1372,1645}
temp	float	$tmp508	%read{1372,1645} %write{1372,1645}
const	string	$const48	"hash_float_to_color"		%read{1417,1549} %write{2147483647,-1}
temp	float	$tmp509	%read{1372,1645} %write{1372,1645}
temp	float	$tmp510	%read{1372,1645} %write{1372,1645}
temp	float	$tmp511.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp511.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp512	%read{1372,1645} %write{1372,1645}
temp	float	$tmp513.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp513.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp514	%read{1372,1645} %write{1372,1645}
const	string	$const49	"voronoi_position"		%read{1431,3836} %write{2147483647,-1}
const	string	$const50	"smooth_f1"		%read{1442,3369} %write{2147483647,-1}
temp	int	$tmp515	%read{1372,1645} %write{1372,1645}
temp	int	$tmp516	%read{1372,1645} %write{1372,1645}
temp	int	$tmp517	%read{1372,1645} %write{1372,1645}
temp	int	$tmp518	%read{1372,1645} %write{1372,1645}
temp	float	$tmp519	%read{1372,1645} %write{1372,1645}
const	string	$const51	"voronoi_smooth_f1"		%read{1450,3386} %write{2147483647,-1}
const	int	$const52	-2		%read{1458,3417} %write{2147483647,-1}
temp	int	$tmp520	%read{1372,1645} %write{1372,1645}
temp	int	$tmp521	%read{1372,1645} %write{1372,1645}
temp	float	$tmp522	%read{1372,1645} %write{1372,1645}
temp	float	$tmp523	%read{1372,1645} %write{1372,1645}
temp	float	$tmp524	%read{1372,1645} %write{1372,1645}
temp	float	$tmp525	%read{1372,1645} %write{1372,1645}
temp	int	$tmp526	%read{1372,1645} %write{1372,1645}
temp	float	$tmp527	%read{1372,1645} %write{1372,1645}
temp	float	$tmp528	%read{1372,1645} %write{1372,1645}
temp	float	$tmp529	%read{1372,1645} %write{1372,1645}
temp	float	$tmp530	%read{1372,1645} %write{1372,1645}
temp	float	$tmp531	%read{1372,1645} %write{1372,1645}
temp	float	$tmp532	%read{1372,1645} %write{1372,1645}
temp	float	$tmp533	%read{1372,1645} %write{1372,1645}
const	float	$const53	3		%read{1483,3551} %write{2147483647,-1}
temp	float	$tmp534	%read{1372,1645} %write{1372,1645}
temp	float	$tmp535	%read{1372,1645} %write{1372,1645}
temp	float	$tmp536	%read{1372,1645} %write{1372,1645}
temp	float	$tmp537	%read{1372,1645} %write{1372,1645}
temp	float	$tmp538	%read{1372,1645} %write{1372,1645}
temp	float	$tmp539.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp539.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp540	%read{1372,1645} %write{1372,1645}
temp	float	$tmp541.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp541.y	%read{1372,1645} %write{1372,1645}
temp	point	$tmp542	%read{1372,1645} %write{1372,1645}
temp	float	$tmp543	%read{1372,1645} %write{1372,1645}
temp	int	$tmp544	%read{2147483647,-1} %write{1372,1645}
temp	float	$tmp545	%read{1372,1645} %write{1372,1645}
temp	float	$tmp546	%read{1372,1645} %write{1372,1645}
const	string	$const54	"voronoi_f1"		%read{1521,3632} %write{2147483647,-1}
temp	int	$tmp547	%read{1372,1645} %write{1372,1645}
temp	int	$tmp548	%read{1372,1645} %write{1372,1645}
temp	float	$tmp549	%read{1372,1645} %write{1372,1645}
temp	float	$tmp550	%read{1372,1645} %write{1372,1645}
temp	float	$tmp551	%read{1372,1645} %write{1372,1645}
temp	float	$tmp552	%read{1372,1645} %write{1372,1645}
temp	int	$tmp553	%read{1372,1645} %write{1372,1645}
temp	int	$tmp554	%read{2147483647,-1} %write{1372,1645}
temp	float	$tmp555	%read{1372,1645} %write{1372,1645}
temp	float	$tmp556	%read{1372,1645} %write{1372,1645}
temp	float	$tmp557	%read{1372,1645} %write{1372,1645}
temp	float	$tmp558.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp558.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp559	%read{1372,1645} %write{1372,1645}
temp	float	$tmp560.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp560.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp561	%read{1372,1645} %write{1372,1645}
temp	int	$tmp562	%read{1372,1645} %write{1372,1645}
temp	float	$tmp563	%read{1372,1645} %write{1372,1645}
temp	color	$tmp564	%read{1372,1645} %write{1372,1645}
temp	float	$tmp565.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp565.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp565.z	%read{1372,1645} %write{1372,1645}
temp	float	$tmp565.w	%read{1372,1645} %write{1372,1645}
temp	float	$tmp566.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp566.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp566.z	%read{1372,1645} %write{1372,1645}
temp	float	$tmp566.w	%read{1372,1645} %write{1372,1645}
const	string	$const55	"mix"		%read{1603,3913} %write{2147483647,-1}
temp	float	$tmp567	%read{1372,1645} %write{1372,1645}
temp	int	$tmp568	%read{1372,1645} %write{1372,1645}
temp	float	$tmp569	%read{1372,1645} %write{1372,1645}
temp	float	$tmp570	%read{1372,1645} %write{1372,1645}
temp	float	$tmp571	%read{1372,1645} %write{1372,1645}
temp	color	$tmp572	%read{1372,1645} %write{1372,1645}
temp	color	$tmp573	%read{1372,1645} %write{1372,1645}
temp	float	$tmp574.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp574.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp574.z	%read{1372,1645} %write{1372,1645}
temp	float	$tmp574.w	%read{1372,1645} %write{1372,1645}
temp	float	$tmp575.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp575.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp575.z	%read{1372,1645} %write{1372,1645}
temp	float	$tmp575.w	%read{1372,1645} %write{1372,1645}
temp	float	$tmp576.x	%read{1372,1645} %write{1372,1645}
temp	float	$tmp576.y	%read{1372,1645} %write{1372,1645}
temp	float	$tmp576.z	%read{1372,1645} %write{1372,1645}
temp	float	$tmp576.w	%read{1372,1645} %write{1372,1645}
temp	float	$tmp577	%read{1648,1648} %write{1647,1647}
const	string	$const56	"safe_divide"		%read{1652,3925} %write{2147483647,-1}
temp	int	$tmp578	%read{1654,1654} %write{1653,1653}
temp	int	$tmp579	%read{1658,1658} %write{1657,1657}
temp	int	$tmp580	%read{1662,1662} %write{1661,1661}
temp	int	$tmp581	%read{1666,1666} %write{1665,1665}
temp	int	$tmp582	%read{1680,1680} %write{1679,1679}
temp	float	$tmp583	%read{1735,1735} %write{1699,1729}
temp	float	$tmp584.x	%read{1692,1719} %write{1681,1681}
temp	float	$tmp584.y	%read{1693,1722} %write{1682,1682}
temp	float	$tmp585.x	%read{1692,1719} %write{1684,1684}
temp	float	$tmp585.y	%read{1693,1722} %write{1686,1686}
temp	float	$tmp586	%read{1684,1684} %write{1683,1683}
temp	float	$tmp587	%read{1686,1686} %write{1685,1685}
const	string	$const57	"euclidean"		%read{1688,3718} %write{2147483647,-1}
temp	int	$tmp588	%read{1689,1689} %write{1688,1688}
temp	float	$tmp589.x	%read{1696,1696} %write{1692,1692}
temp	float	$tmp589.y	%read{1697,1697} %write{1693,1693}
temp	float	$tmp590	%read{1698,1698} %write{1696,1696}
temp	float	$tmp591	%read{1698,1698} %write{1697,1697}
temp	float	$tmp592	%read{1699,1699} %write{1698,1698}
const	string	$const58	"manhattan"		%read{1701,3736} %write{2147483647,-1}
temp	int	$tmp593	%read{1702,1702} %write{1701,1701}
temp	float	$tmp594	%read{1707,1707} %write{1704,1704}
temp	float	$tmp595	%read{1704,1704} %write{1703,1703}
temp	float	$tmp596	%read{1707,1707} %write{1706,1706}
temp	float	$tmp597	%read{1706,1706} %write{1705,1705}
const	string	$const59	"chebychev"		%read{1709,3750} %write{2147483647,-1}
temp	int	$tmp598	%read{1710,1710} %write{1709,1709}
temp	float	$tmp599	%read{1715,1715} %write{1712,1712}
temp	float	$tmp600	%read{1712,1712} %write{1711,1711}
temp	float	$tmp601	%read{1715,1715} %write{1714,1714}
temp	float	$tmp602	%read{1714,1714} %write{1713,1713}
const	string	$const60	"minkowski"		%read{1717,3764} %write{2147483647,-1}
temp	int	$tmp603	%read{1718,1718} %write{1717,1717}
temp	float	$tmp604	%read{1725,1725} %write{1721,1721}
temp	float	$tmp605	%read{1721,1721} %write{1720,1720}
temp	float	$tmp606	%read{1720,1720} %write{1719,1719}
temp	float	$tmp607	%read{1725,1725} %write{1724,1724}
temp	float	$tmp608	%read{1724,1724} %write{1723,1723}
temp	float	$tmp609	%read{1723,1723} %write{1722,1722}
temp	float	$tmp610	%read{1727,1727} %write{1725,1725}
temp	float	$tmp611	%read{1727,1727} %write{1726,1726}
temp	float	$tmp612	%read{1735,1735} %write{1733,1734}
temp	int	$tmp613	%read{1732,1732} %write{1731,1731}
temp	float	$tmp614.x	%read{1758,2269} %write{1737,1737}
temp	float	$tmp614.y	%read{1758,2269} %write{1738,1738}
temp	int	$tmp615	%read{1750,1750} %write{1749,1749}
temp	int	$tmp616	%read{1751,1755} %write{1750,1754}
temp	int	$tmp617	%read{1753,1753} %write{1752,1752}
temp	int	$tmp618	%read{1754,1754} %write{1753,1753}
temp	float	$tmp619	%read{1758,2269} %write{1758,2269}
temp	int	$tmp620	%read{1758,2269} %write{1758,2269}
temp	int	$tmp621	%read{1756,2269} %write{1757,2269}
temp	int	$tmp622	%read{1758,2269} %write{1758,2269}
temp	float	$tmp623.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp623.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp624.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp624.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp625	%read{1758,2269} %write{1758,2269}
temp	int	$tmp626	%read{1758,2269} %write{1758,2269}
temp	int	$tmp627	%read{1758,2269} %write{1758,2269}
temp	int	$tmp628	%read{1758,2269} %write{1758,2269}
temp	float	$tmp629.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp629.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp630.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp630.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp631.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp631.y	%read{1758,2269} %write{1758,2269}
temp	point	$tmp632	%read{1758,2269} %write{1758,2269}
temp	float	$tmp633.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp633.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp634	%read{1758,2269} %write{1758,2269}
temp	float	$tmp635.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp635.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp636	%read{1758,2269} %write{1758,2269}
temp	float	$tmp637	%read{1758,2269} %write{1758,2269}
temp	float	$tmp638	%read{1758,2269} %write{1758,2269}
temp	int	$tmp639	%read{1758,2269} %write{1758,2269}
temp	float	$tmp640	%read{1758,2269} %write{1758,2269}
temp	float	$tmp641	%read{1758,2269} %write{1758,2269}
temp	float	$tmp642	%read{1758,2269} %write{1758,2269}
temp	float	$tmp643	%read{1758,2269} %write{1758,2269}
temp	int	$tmp644	%read{1758,2269} %write{1758,2269}
temp	float	$tmp645	%read{1758,2269} %write{1758,2269}
temp	float	$tmp646	%read{1758,2269} %write{1758,2269}
temp	float	$tmp647	%read{1758,2269} %write{1758,2269}
temp	float	$tmp648	%read{1758,2269} %write{1758,2269}
temp	int	$tmp649	%read{1758,2269} %write{1758,2269}
temp	float	$tmp650	%read{1758,2269} %write{1758,2269}
temp	float	$tmp651	%read{1758,2269} %write{1758,2269}
temp	float	$tmp652	%read{1758,2269} %write{1758,2269}
temp	float	$tmp653	%read{1758,2269} %write{1758,2269}
temp	float	$tmp654	%read{1758,2269} %write{1758,2269}
temp	float	$tmp655	%read{1758,2269} %write{1758,2269}
temp	float	$tmp656	%read{1758,2269} %write{1758,2269}
temp	float	$tmp657	%read{1758,2269} %write{1758,2269}
temp	int	$tmp658	%read{1758,2269} %write{1758,2269}
temp	int	$tmp659	%read{1758,2269} %write{1758,2269}
temp	int	$tmp660	%read{2147483647,-1} %write{1758,2269}
temp	int	$tmp661	%read{2147483647,-1} %write{1758,2269}
temp	float	$tmp662.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp662.y	%read{1758,2269} %write{1758,2269}
const	string	$const61	"hash_vector2_to_color"		%read{1885,2173} %write{2147483647,-1}
temp	float	$tmp663	%read{1758,2269} %write{1758,2269}
temp	float	$tmp664	%read{1758,2269} %write{1758,2269}
temp	point	$tmp665	%read{1758,2269} %write{1758,2269}
temp	float	$tmp666	%read{1758,2269} %write{1758,2269}
temp	point	$tmp667	%read{1758,2269} %write{1758,2269}
temp	float	$tmp668.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp668.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp669	%read{1758,2269} %write{1758,2269}
temp	int	$tmp670	%read{1758,2269} %write{1758,2269}
temp	int	$tmp671	%read{1758,2269} %write{1758,2269}
temp	int	$tmp672	%read{1758,2269} %write{1758,2269}
temp	float	$tmp673.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp673.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp674.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp674.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp675	%read{1758,2269} %write{1758,2269}
temp	int	$tmp676	%read{1758,2269} %write{1758,2269}
temp	int	$tmp677	%read{1758,2269} %write{1758,2269}
temp	int	$tmp678	%read{1758,2269} %write{1758,2269}
temp	float	$tmp679.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp679.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp680.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp680.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp681.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp681.y	%read{1758,2269} %write{1758,2269}
temp	point	$tmp682	%read{1758,2269} %write{1758,2269}
temp	float	$tmp683.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp683.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp684	%read{1758,2269} %write{1758,2269}
temp	float	$tmp685.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp685.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp686	%read{1758,2269} %write{1758,2269}
temp	float	$tmp687	%read{1758,2269} %write{1758,2269}
temp	float	$tmp688	%read{1758,2269} %write{1758,2269}
temp	int	$tmp689	%read{1758,2269} %write{1758,2269}
temp	float	$tmp690	%read{1758,2269} %write{1758,2269}
temp	float	$tmp691	%read{1758,2269} %write{1758,2269}
temp	float	$tmp692	%read{1758,2269} %write{1758,2269}
temp	float	$tmp693	%read{1758,2269} %write{1758,2269}
temp	int	$tmp694	%read{1758,2269} %write{1758,2269}
temp	float	$tmp695	%read{1758,2269} %write{1758,2269}
temp	float	$tmp696	%read{1758,2269} %write{1758,2269}
temp	float	$tmp697	%read{1758,2269} %write{1758,2269}
temp	float	$tmp698	%read{1758,2269} %write{1758,2269}
temp	int	$tmp699	%read{1758,2269} %write{1758,2269}
temp	float	$tmp700	%read{1758,2269} %write{1758,2269}
temp	float	$tmp701	%read{1758,2269} %write{1758,2269}
temp	float	$tmp702	%read{1758,2269} %write{1758,2269}
temp	float	$tmp703	%read{1758,2269} %write{1758,2269}
temp	float	$tmp704	%read{1758,2269} %write{1758,2269}
temp	float	$tmp705	%read{1758,2269} %write{1758,2269}
temp	float	$tmp706	%read{1758,2269} %write{1758,2269}
temp	float	$tmp707	%read{1758,2269} %write{1758,2269}
temp	int	$tmp708	%read{1758,2269} %write{1758,2269}
temp	float	$tmp709	%read{1758,2269} %write{1758,2269}
temp	float	$tmp710	%read{1758,2269} %write{1758,2269}
temp	float	$tmp711	%read{1758,2269} %write{1758,2269}
temp	float	$tmp712	%read{1758,2269} %write{1758,2269}
temp	float	$tmp713	%read{1758,2269} %write{1758,2269}
temp	float	$tmp714	%read{1758,2269} %write{1758,2269}
temp	float	$tmp715	%read{1758,2269} %write{1758,2269}
temp	float	$tmp716	%read{1758,2269} %write{1758,2269}
temp	float	$tmp717	%read{1758,2269} %write{1758,2269}
temp	float	$tmp718.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp718.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp719	%read{1758,2269} %write{1758,2269}
temp	float	$tmp720	%read{1758,2269} %write{1758,2269}
temp	point	$tmp721	%read{1758,2269} %write{1758,2269}
temp	float	$tmp722	%read{1758,2269} %write{1758,2269}
temp	point	$tmp723	%read{1758,2269} %write{1758,2269}
temp	point	$tmp724	%read{1758,2269} %write{1758,2269}
temp	float	$tmp725.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp725.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp726.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp726.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp727	%read{2147483647,-1} %write{1758,2269}
temp	int	$tmp728	%read{2147483647,-1} %write{1758,2269}
temp	float	$tmp729.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp729.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp730.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp730.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp731.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp731.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp732	%read{1758,2269} %write{1758,2269}
temp	int	$tmp733	%read{1758,2269} %write{1758,2269}
temp	int	$tmp734	%read{1758,2269} %write{1758,2269}
temp	int	$tmp735	%read{1758,2269} %write{1758,2269}
temp	float	$tmp736.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp736.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp737.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp737.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp738.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp738.y	%read{1758,2269} %write{1758,2269}
temp	point	$tmp739	%read{1758,2269} %write{1758,2269}
temp	float	$tmp740.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp740.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp741	%read{1758,2269} %write{1758,2269}
temp	float	$tmp742.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp742.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp743	%read{1758,2269} %write{1758,2269}
temp	float	$tmp744	%read{1758,2269} %write{1758,2269}
temp	float	$tmp745	%read{1758,2269} %write{1758,2269}
temp	int	$tmp746	%read{1758,2269} %write{1758,2269}
temp	float	$tmp747	%read{1758,2269} %write{1758,2269}
temp	float	$tmp748	%read{1758,2269} %write{1758,2269}
temp	float	$tmp749	%read{1758,2269} %write{1758,2269}
temp	float	$tmp750	%read{1758,2269} %write{1758,2269}
temp	int	$tmp751	%read{1758,2269} %write{1758,2269}
temp	float	$tmp752	%read{1758,2269} %write{1758,2269}
temp	float	$tmp753	%read{1758,2269} %write{1758,2269}
temp	float	$tmp754	%read{1758,2269} %write{1758,2269}
temp	float	$tmp755	%read{1758,2269} %write{1758,2269}
temp	int	$tmp756	%read{1758,2269} %write{1758,2269}
temp	float	$tmp757	%read{1758,2269} %write{1758,2269}
temp	float	$tmp758	%read{1758,2269} %write{1758,2269}
temp	float	$tmp759	%read{1758,2269} %write{1758,2269}
temp	float	$tmp760	%read{1758,2269} %write{1758,2269}
temp	float	$tmp761	%read{1758,2269} %write{1758,2269}
temp	float	$tmp762	%read{1758,2269} %write{1758,2269}
temp	float	$tmp763	%read{1758,2269} %write{1758,2269}
temp	float	$tmp764	%read{1758,2269} %write{1758,2269}
temp	int	$tmp765	%read{1758,2269} %write{1758,2269}
temp	int	$tmp766	%read{2147483647,-1} %write{1758,2269}
temp	int	$tmp767	%read{2147483647,-1} %write{1758,2269}
temp	float	$tmp768.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp768.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp769	%read{1758,2269} %write{1758,2269}
temp	float	$tmp770	%read{1758,2269} %write{1758,2269}
temp	point	$tmp771	%read{1758,2269} %write{1758,2269}
temp	float	$tmp772	%read{1758,2269} %write{1758,2269}
temp	point	$tmp773	%read{1758,2269} %write{1758,2269}
temp	float	$tmp774.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp774.y	%read{1758,2269} %write{1758,2269}
temp	int	$tmp775	%read{1758,2269} %write{1758,2269}
temp	float	$tmp776	%read{1758,2269} %write{1758,2269}
temp	color	$tmp777	%read{1758,2269} %write{1758,2269}
temp	float	$tmp778.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp778.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp778.z	%read{1758,2269} %write{1758,2269}
temp	float	$tmp778.w	%read{1758,2269} %write{1758,2269}
temp	float	$tmp779.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp779.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp779.z	%read{1758,2269} %write{1758,2269}
temp	float	$tmp779.w	%read{1758,2269} %write{1758,2269}
temp	float	$tmp780	%read{1758,2269} %write{1758,2269}
temp	int	$tmp781	%read{1758,2269} %write{1758,2269}
temp	float	$tmp782	%read{1758,2269} %write{1758,2269}
temp	float	$tmp783	%read{1758,2269} %write{1758,2269}
temp	float	$tmp784	%read{1758,2269} %write{1758,2269}
temp	color	$tmp785	%read{1758,2269} %write{1758,2269}
temp	color	$tmp786	%read{1758,2269} %write{1758,2269}
temp	float	$tmp787.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp787.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp787.z	%read{1758,2269} %write{1758,2269}
temp	float	$tmp787.w	%read{1758,2269} %write{1758,2269}
temp	float	$tmp788.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp788.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp788.z	%read{1758,2269} %write{1758,2269}
temp	float	$tmp788.w	%read{1758,2269} %write{1758,2269}
temp	float	$tmp789.x	%read{1758,2269} %write{1758,2269}
temp	float	$tmp789.y	%read{1758,2269} %write{1758,2269}
temp	float	$tmp789.z	%read{1758,2269} %write{1758,2269}
temp	float	$tmp789.w	%read{1758,2269} %write{1758,2269}
temp	float	$tmp790	%read{2272,2272} %write{2271,2271}
temp	int	$tmp791	%read{2278,2278} %write{2277,2277}
temp	int	$tmp792	%read{2282,2282} %write{2281,2281}
temp	int	$tmp793	%read{2286,2286} %write{2285,2285}
temp	int	$tmp794	%read{2290,2290} %write{2289,2289}
temp	int	$tmp795	%read{2304,2304} %write{2303,2303}
temp	float	$tmp796	%read{2379,2379} %write{2315,2373}
temp	point	$tmp798	%read{2315,2365} %write{2311,2311}
temp	float	$tmp799	%read{2306,2306} %write{2305,2305}
temp	float	$tmp800	%read{2311,2311} %write{2306,2306}
temp	float	$tmp801	%read{2308,2308} %write{2307,2307}
temp	float	$tmp802	%read{2311,2311} %write{2308,2308}
temp	float	$tmp803	%read{2310,2310} %write{2309,2309}
temp	float	$tmp804	%read{2311,2311} %write{2310,2310}
temp	int	$tmp805	%read{2314,2314} %write{2313,2313}
temp	int	$tmp806	%read{2318,2318} %write{2317,2317}
temp	float	$tmp807	%read{2327,2327} %write{2322,2322}
temp	float	$tmp808	%read{2321,2321} %write{2319,2319}
temp	float	$tmp809	%read{2321,2321} %write{2320,2320}
temp	float	$tmp810	%read{2322,2322} %write{2321,2321}
temp	float	$tmp811	%read{2327,2327} %write{2326,2326}
temp	float	$tmp812	%read{2325,2325} %write{2323,2323}
temp	float	$tmp813	%read{2325,2325} %write{2324,2324}
temp	float	$tmp814	%read{2326,2326} %write{2325,2325}
temp	float	$tmp815	%read{2332,2332} %write{2327,2327}
temp	float	$tmp816	%read{2332,2332} %write{2331,2331}
temp	float	$tmp817	%read{2330,2330} %write{2328,2328}
temp	float	$tmp818	%read{2330,2330} %write{2329,2329}
temp	float	$tmp819	%read{2331,2331} %write{2330,2330}
temp	int	$tmp820	%read{2335,2335} %write{2334,2334}
temp	float	$tmp821	%read{2349,2349} %write{2339,2339}
temp	float	$tmp822	%read{2338,2338} %write{2336,2336}
temp	float	$tmp823	%read{2338,2338} %write{2337,2337}
temp	float	$tmp824	%read{2339,2339} %write{2338,2338}
temp	float	$tmp825	%read{2349,2349} %write{2348,2348}
temp	float	$tmp826	%read{2348,2348} %write{2343,2343}
temp	float	$tmp827	%read{2342,2342} %write{2340,2340}
temp	float	$tmp828	%read{2342,2342} %write{2341,2341}
temp	float	$tmp829	%read{2343,2343} %write{2342,2342}
temp	float	$tmp830	%read{2348,2348} %write{2347,2347}
temp	float	$tmp831	%read{2346,2346} %write{2344,2344}
temp	float	$tmp832	%read{2346,2346} %write{2345,2345}
temp	float	$tmp833	%read{2347,2347} %write{2346,2346}
temp	int	$tmp834	%read{2352,2352} %write{2351,2351}
temp	float	$tmp835	%read{2363,2363} %write{2357,2357}
temp	float	$tmp836	%read{2357,2357} %write{2356,2356}
temp	float	$tmp837	%read{2355,2355} %write{2353,2353}
temp	float	$tmp838	%read{2355,2355} %write{2354,2354}
temp	float	$tmp839	%read{2356,2356} %write{2355,2355}
temp	float	$tmp840	%read{2363,2363} %write{2362,2362}
temp	float	$tmp841	%read{2362,2362} %write{2361,2361}
temp	float	$tmp842	%read{2360,2360} %write{2358,2358}
temp	float	$tmp843	%read{2360,2360} %write{2359,2359}
temp	float	$tmp844	%read{2361,2361} %write{2360,2360}
temp	float	$tmp845	%read{2369,2369} %write{2363,2363}
temp	float	$tmp846	%read{2369,2369} %write{2368,2368}
temp	float	$tmp847	%read{2368,2368} %write{2367,2367}
temp	float	$tmp848	%read{2366,2366} %write{2364,2364}
temp	float	$tmp849	%read{2366,2366} %write{2365,2365}
temp	float	$tmp850	%read{2367,2367} %write{2366,2366}
temp	float	$tmp851	%read{2371,2371} %write{2369,2369}
temp	float	$tmp852	%read{2371,2371} %write{2370,2370}
temp	float	$tmp853	%read{2379,2379} %write{2377,2378}
temp	int	$tmp854	%read{2376,2376} %write{2375,2375}
temp	int	$tmp855	%read{2392,2392} %write{2391,2391}
temp	int	$tmp856	%read{2393,2397} %write{2392,2396}
temp	int	$tmp857	%read{2395,2395} %write{2394,2394}
temp	int	$tmp858	%read{2396,2396} %write{2395,2395}
temp	float	$tmp859	%read{2400,2964} %write{2400,2964}
temp	int	$tmp860	%read{2400,2964} %write{2400,2964}
temp	int	$tmp861	%read{2398,2964} %write{2399,2964}
temp	int	$tmp862	%read{2400,2964} %write{2400,2964}
temp	point	$tmp863	%read{2400,2964} %write{2400,2964}
temp	int	$tmp864	%read{2400,2964} %write{2400,2964}
temp	int	$tmp865	%read{2400,2964} %write{2400,2964}
temp	int	$tmp866	%read{2400,2964} %write{2400,2964}
temp	int	$tmp867	%read{2400,2964} %write{2400,2964}
temp	int	$tmp868	%read{2400,2964} %write{2400,2964}
temp	int	$tmp869	%read{2400,2964} %write{2400,2964}
temp	float	$tmp870	%read{2400,2964} %write{2400,2964}
temp	float	$tmp871	%read{2400,2964} %write{2400,2964}
temp	float	$tmp872	%read{2400,2964} %write{2400,2964}
temp	point	$tmp873	%read{2400,2964} %write{2400,2964}
temp	point	$tmp874	%read{2400,2964} %write{2400,2964}
temp	float	$tmp875	%read{2400,2964} %write{2400,2964}
temp	float	$tmp876	%read{2400,2964} %write{2400,2964}
temp	float	$tmp877.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp877.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp877.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp877.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp878	%read{2400,2964} %write{2400,2964}
temp	float	$tmp879	%read{2400,2964} %write{2400,2964}
temp	float	$tmp880.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp880.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp880.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp880.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp881	%read{2400,2964} %write{2400,2964}
temp	point	$tmp882	%read{2400,2964} %write{2400,2964}
temp	int	$tmp883	%read{2400,2964} %write{2400,2964}
temp	int	$tmp884	%read{2400,2964} %write{2400,2964}
temp	float	$tmp885	%read{2400,2964} %write{2400,2964}
temp	float	$tmp886	%read{2400,2964} %write{2400,2964}
temp	float	$tmp887	%read{2400,2964} %write{2400,2964}
temp	float	$tmp888	%read{2400,2964} %write{2400,2964}
temp	float	$tmp889	%read{2400,2964} %write{2400,2964}
temp	float	$tmp890	%read{2400,2964} %write{2400,2964}
temp	float	$tmp891	%read{2400,2964} %write{2400,2964}
temp	float	$tmp892	%read{2400,2964} %write{2400,2964}
temp	float	$tmp893	%read{2400,2964} %write{2400,2964}
temp	float	$tmp894	%read{2400,2964} %write{2400,2964}
temp	float	$tmp895	%read{2400,2964} %write{2400,2964}
temp	float	$tmp896	%read{2400,2964} %write{2400,2964}
temp	float	$tmp897	%read{2400,2964} %write{2400,2964}
temp	int	$tmp898	%read{2400,2964} %write{2400,2964}
temp	float	$tmp899	%read{2400,2964} %write{2400,2964}
temp	float	$tmp900	%read{2400,2964} %write{2400,2964}
temp	float	$tmp901	%read{2400,2964} %write{2400,2964}
temp	float	$tmp902	%read{2400,2964} %write{2400,2964}
temp	float	$tmp903	%read{2400,2964} %write{2400,2964}
temp	float	$tmp904	%read{2400,2964} %write{2400,2964}
temp	float	$tmp905	%read{2400,2964} %write{2400,2964}
temp	float	$tmp906	%read{2400,2964} %write{2400,2964}
temp	float	$tmp907	%read{2400,2964} %write{2400,2964}
temp	float	$tmp908	%read{2400,2964} %write{2400,2964}
temp	float	$tmp909	%read{2400,2964} %write{2400,2964}
temp	float	$tmp910	%read{2400,2964} %write{2400,2964}
temp	float	$tmp911	%read{2400,2964} %write{2400,2964}
temp	int	$tmp912	%read{2400,2964} %write{2400,2964}
temp	float	$tmp913	%read{2400,2964} %write{2400,2964}
temp	float	$tmp914	%read{2400,2964} %write{2400,2964}
temp	float	$tmp915	%read{2400,2964} %write{2400,2964}
temp	float	$tmp916	%read{2400,2964} %write{2400,2964}
temp	float	$tmp917	%read{2400,2964} %write{2400,2964}
temp	float	$tmp918	%read{2400,2964} %write{2400,2964}
temp	float	$tmp919	%read{2400,2964} %write{2400,2964}
temp	float	$tmp920	%read{2400,2964} %write{2400,2964}
temp	float	$tmp921	%read{2400,2964} %write{2400,2964}
temp	float	$tmp922	%read{2400,2964} %write{2400,2964}
temp	float	$tmp923	%read{2400,2964} %write{2400,2964}
temp	float	$tmp924	%read{2400,2964} %write{2400,2964}
temp	float	$tmp925	%read{2400,2964} %write{2400,2964}
temp	float	$tmp926	%read{2400,2964} %write{2400,2964}
temp	float	$tmp927	%read{2400,2964} %write{2400,2964}
temp	float	$tmp928	%read{2400,2964} %write{2400,2964}
temp	float	$tmp929	%read{2400,2964} %write{2400,2964}
temp	float	$tmp930	%read{2400,2964} %write{2400,2964}
temp	int	$tmp931	%read{2400,2964} %write{2400,2964}
temp	int	$tmp932	%read{2400,2964} %write{2400,2964}
temp	int	$tmp933	%read{2147483647,-1} %write{2400,2964}
temp	int	$tmp934	%read{2147483647,-1} %write{2400,2964}
temp	int	$tmp935	%read{2147483647,-1} %write{2400,2964}
temp	point	$tmp936	%read{2400,2964} %write{2400,2964}
const	string	$const62	"hash_vector3_to_color"		%read{2536,2862} %write{2147483647,-1}
temp	float	$tmp937	%read{2400,2964} %write{2400,2964}
temp	float	$tmp938	%read{2400,2964} %write{2400,2964}
temp	float	$tmp939.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp939.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp939.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp939.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp940	%read{2400,2964} %write{2400,2964}
temp	float	$tmp941	%read{2400,2964} %write{2400,2964}
temp	float	$tmp942.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp942.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp942.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp942.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp943	%read{2400,2964} %write{2400,2964}
temp	point	$tmp944	%read{2400,2964} %write{2400,2964}
temp	int	$tmp945	%read{2400,2964} %write{2400,2964}
temp	int	$tmp946	%read{2400,2964} %write{2400,2964}
temp	int	$tmp947	%read{2400,2964} %write{2400,2964}
temp	int	$tmp948	%read{2400,2964} %write{2400,2964}
temp	point	$tmp949	%read{2400,2964} %write{2400,2964}
temp	int	$tmp950	%read{2400,2964} %write{2400,2964}
temp	int	$tmp951	%read{2400,2964} %write{2400,2964}
temp	int	$tmp952	%read{2400,2964} %write{2400,2964}
temp	int	$tmp953	%read{2400,2964} %write{2400,2964}
temp	int	$tmp954	%read{2400,2964} %write{2400,2964}
temp	int	$tmp955	%read{2400,2964} %write{2400,2964}
temp	float	$tmp956	%read{2400,2964} %write{2400,2964}
temp	float	$tmp957	%read{2400,2964} %write{2400,2964}
temp	float	$tmp958	%read{2400,2964} %write{2400,2964}
temp	point	$tmp959	%read{2400,2964} %write{2400,2964}
temp	point	$tmp960	%read{2400,2964} %write{2400,2964}
temp	float	$tmp961	%read{2400,2964} %write{2400,2964}
temp	float	$tmp962	%read{2400,2964} %write{2400,2964}
temp	float	$tmp963.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp963.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp963.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp963.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp964	%read{2400,2964} %write{2400,2964}
temp	float	$tmp965	%read{2400,2964} %write{2400,2964}
temp	float	$tmp966.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp966.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp966.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp966.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp967	%read{2400,2964} %write{2400,2964}
temp	point	$tmp968	%read{2400,2964} %write{2400,2964}
temp	int	$tmp969	%read{2400,2964} %write{2400,2964}
temp	int	$tmp970	%read{2400,2964} %write{2400,2964}
temp	float	$tmp971	%read{2400,2964} %write{2400,2964}
temp	float	$tmp972	%read{2400,2964} %write{2400,2964}
temp	float	$tmp973	%read{2400,2964} %write{2400,2964}
temp	float	$tmp974	%read{2400,2964} %write{2400,2964}
temp	float	$tmp975	%read{2400,2964} %write{2400,2964}
temp	float	$tmp976	%read{2400,2964} %write{2400,2964}
temp	float	$tmp977	%read{2400,2964} %write{2400,2964}
temp	float	$tmp978	%read{2400,2964} %write{2400,2964}
temp	float	$tmp979	%read{2400,2964} %write{2400,2964}
temp	float	$tmp980	%read{2400,2964} %write{2400,2964}
temp	float	$tmp981	%read{2400,2964} %write{2400,2964}
temp	float	$tmp982	%read{2400,2964} %write{2400,2964}
temp	float	$tmp983	%read{2400,2964} %write{2400,2964}
temp	int	$tmp984	%read{2400,2964} %write{2400,2964}
temp	float	$tmp985	%read{2400,2964} %write{2400,2964}
temp	float	$tmp986	%read{2400,2964} %write{2400,2964}
temp	float	$tmp987	%read{2400,2964} %write{2400,2964}
temp	float	$tmp988	%read{2400,2964} %write{2400,2964}
temp	float	$tmp989	%read{2400,2964} %write{2400,2964}
temp	float	$tmp990	%read{2400,2964} %write{2400,2964}
temp	float	$tmp991	%read{2400,2964} %write{2400,2964}
temp	float	$tmp992	%read{2400,2964} %write{2400,2964}
temp	float	$tmp993	%read{2400,2964} %write{2400,2964}
temp	float	$tmp994	%read{2400,2964} %write{2400,2964}
temp	float	$tmp995	%read{2400,2964} %write{2400,2964}
temp	float	$tmp996	%read{2400,2964} %write{2400,2964}
temp	float	$tmp997	%read{2400,2964} %write{2400,2964}
temp	int	$tmp998	%read{2400,2964} %write{2400,2964}
temp	float	$tmp999	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1000	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1001	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1002	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1003	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1004	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1005	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1006	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1007	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1008	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1009	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1010	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1011	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1012	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1013	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1014	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1015	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1016	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1017	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1018	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1019	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1020	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1021	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1022	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1023	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1024	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1025	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1026	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1027	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1028	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1029	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1030.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1030.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1030.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1030.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1031	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1032	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1033.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1033.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1033.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1033.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1034	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1035	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1036	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1037	%read{2147483647,-1} %write{2400,2964}
temp	int	$tmp1038	%read{2147483647,-1} %write{2400,2964}
temp	int	$tmp1039	%read{2147483647,-1} %write{2400,2964}
temp	point	$tmp1040	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1041	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1042	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1043	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1044	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1045	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1046	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1047	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1048	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1049	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1050	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1051	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1052	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1053	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1054	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1055.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1055.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1055.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1055.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1056	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1057	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1058.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1058.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1058.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1058.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1059	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1060	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1061	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1062	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1063	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1064	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1065	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1066	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1067	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1068	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1069	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1070	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1071	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1072	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1073	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1074	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1075	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1076	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1077	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1078	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1079	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1080	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1081	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1082	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1083	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1084	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1085	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1086	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1087	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1088	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1089	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1090	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1091	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1092	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1093	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1094	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1095	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1096	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1097	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1098	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1099	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1100	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1101	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1102	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1103	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1104	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1105	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1106	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1107	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1108	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1109	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1110	%read{2147483647,-1} %write{2400,2964}
temp	int	$tmp1111	%read{2147483647,-1} %write{2400,2964}
temp	int	$tmp1112	%read{2147483647,-1} %write{2400,2964}
temp	point	$tmp1113	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1114	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1115	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1116.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1116.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1116.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1116.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1117	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1118	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1119.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1119.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1119.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1119.w	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1120	%read{2400,2964} %write{2400,2964}
temp	point	$tmp1121	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1122	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1123	%read{2400,2964} %write{2400,2964}
temp	color	$tmp1124	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1125.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1125.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1125.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1125.w	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1126.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1126.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1126.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1126.w	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1127	%read{2400,2964} %write{2400,2964}
temp	int	$tmp1128	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1129	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1130	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1131	%read{2400,2964} %write{2400,2964}
temp	color	$tmp1132	%read{2400,2964} %write{2400,2964}
temp	color	$tmp1133	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1134.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1134.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1134.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1134.w	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1135.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1135.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1135.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1135.w	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1136.x	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1136.y	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1136.z	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1136.w	%read{2400,2964} %write{2400,2964}
temp	float	$tmp1137	%read{2967,2967} %write{2966,2966}
temp	int	$tmp1138	%read{2973,2973} %write{2972,2972}
temp	int	$tmp1139	%read{2977,2977} %write{2976,2976}
temp	int	$tmp1140	%read{2981,2981} %write{2980,2980}
temp	int	$tmp1141	%read{2985,2985} %write{2984,2984}
temp	int	$tmp1142	%read{2999,2999} %write{2998,2998}
temp	float	$tmp1143	%read{3085,3085} %write{3029,3079}
temp	float	$tmp1144.x	%read{3017,3061} %write{3000,3000}
temp	float	$tmp1144.y	%read{3018,3064} %write{3001,3001}
temp	float	$tmp1144.z	%read{3019,3068} %write{3002,3002}
temp	float	$tmp1144.w	%read{3020,3072} %write{3003,3003}
temp	float	$tmp1145.x	%read{3017,3061} %write{3005,3005}
temp	float	$tmp1145.y	%read{3018,3064} %write{3007,3007}
temp	float	$tmp1145.z	%read{3019,3068} %write{3009,3009}
temp	float	$tmp1145.w	%read{3020,3072} %write{3011,3011}
temp	float	$tmp1146	%read{3005,3005} %write{3004,3004}
temp	float	$tmp1147	%read{3007,3007} %write{3006,3006}
temp	float	$tmp1148	%read{3009,3009} %write{3008,3008}
temp	float	$tmp1149	%read{3011,3011} %write{3010,3010}
temp	int	$tmp1150	%read{3014,3014} %write{3013,3013}
temp	float	$tmp1151.x	%read{3022,3022} %write{3017,3017}
temp	float	$tmp1151.y	%read{3023,3023} %write{3018,3018}
temp	float	$tmp1151.z	%read{3025,3025} %write{3019,3019}
temp	float	$tmp1151.w	%read{3027,3027} %write{3020,3020}
temp	float	$tmp1152	%read{3024,3024} %write{3022,3022}
temp	float	$tmp1153	%read{3024,3024} %write{3023,3023}
temp	float	$tmp1154	%read{3026,3026} %write{3024,3024}
temp	float	$tmp1155	%read{3026,3026} %write{3025,3025}
temp	float	$tmp1156	%read{3028,3028} %write{3026,3026}
temp	float	$tmp1157	%read{3028,3028} %write{3027,3027}
temp	float	$tmp1158	%read{3029,3029} %write{3028,3028}
temp	int	$tmp1159	%read{3032,3032} %write{3031,3031}
temp	float	$tmp1160	%read{3037,3037} %write{3034,3034}
temp	float	$tmp1161	%read{3034,3034} %write{3033,3033}
temp	float	$tmp1162	%read{3037,3037} %write{3036,3036}
temp	float	$tmp1163	%read{3036,3036} %write{3035,3035}
temp	float	$tmp1164	%read{3040,3040} %write{3037,3037}
temp	float	$tmp1165	%read{3040,3040} %write{3039,3039}
temp	float	$tmp1166	%read{3039,3039} %write{3038,3038}
temp	float	$tmp1167	%read{3043,3043} %write{3040,3040}
temp	float	$tmp1168	%read{3043,3043} %write{3042,3042}
temp	float	$tmp1169	%read{3042,3042} %write{3041,3041}
temp	int	$tmp1170	%read{3046,3046} %write{3045,3045}
temp	float	$tmp1171	%read{3057,3057} %write{3048,3048}
temp	float	$tmp1172	%read{3048,3048} %write{3047,3047}
temp	float	$tmp1173	%read{3057,3057} %write{3056,3056}
temp	float	$tmp1174	%read{3056,3056} %write{3050,3050}
temp	float	$tmp1175	%read{3050,3050} %write{3049,3049}
temp	float	$tmp1176	%read{3056,3056} %write{3055,3055}
temp	float	$tmp1177	%read{3055,3055} %write{3052,3052}
temp	float	$tmp1178	%read{3052,3052} %write{3051,3051}
temp	float	$tmp1179	%read{3055,3055} %write{3054,3054}
temp	float	$tmp1180	%read{3054,3054} %write{3053,3053}
temp	int	$tmp1181	%read{3060,3060} %write{3059,3059}
temp	float	$tmp1182	%read{3067,3067} %write{3063,3063}
temp	float	$tmp1183	%read{3063,3063} %write{3062,3062}
temp	float	$tmp1184	%read{3062,3062} %write{3061,3061}
temp	float	$tmp1185	%read{3067,3067} %write{3066,3066}
temp	float	$tmp1186	%read{3066,3066} %write{3065,3065}
temp	float	$tmp1187	%read{3065,3065} %write{3064,3064}
temp	float	$tmp1188	%read{3071,3071} %write{3067,3067}
temp	float	$tmp1189	%read{3071,3071} %write{3070,3070}
temp	float	$tmp1190	%read{3070,3070} %write{3069,3069}
temp	float	$tmp1191	%read{3069,3069} %write{3068,3068}
temp	float	$tmp1192	%read{3075,3075} %write{3071,3071}
temp	float	$tmp1193	%read{3075,3075} %write{3074,3074}
temp	float	$tmp1194	%read{3074,3074} %write{3073,3073}
temp	float	$tmp1195	%read{3073,3073} %write{3072,3072}
temp	float	$tmp1196	%read{3077,3077} %write{3075,3075}
temp	float	$tmp1197	%read{3077,3077} %write{3076,3076}
temp	float	$tmp1198	%read{3085,3085} %write{3083,3084}
temp	int	$tmp1199	%read{3082,3082} %write{3081,3081}
temp	float	$tmp1200.x	%read{3110,3918} %write{3087,3087}
temp	float	$tmp1200.y	%read{3110,3918} %write{3088,3088}
temp	float	$tmp1200.z	%read{3110,3918} %write{3089,3089}
temp	float	$tmp1200.w	%read{3110,3918} %write{3090,3090}
temp	int	$tmp1201	%read{3102,3102} %write{3101,3101}
temp	int	$tmp1202	%read{3103,3107} %write{3102,3106}
temp	int	$tmp1203	%read{3105,3105} %write{3104,3104}
temp	int	$tmp1204	%read{3106,3106} %write{3105,3105}
temp	float	$tmp1205	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1206	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1207	%read{3108,3918} %write{3109,3918}
temp	int	$tmp1208	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1209.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1209.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1209.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1209.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1210.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1210.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1210.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1210.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1211	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1212	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1213	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1214	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1215	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1216	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1217	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1218	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1219.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1219.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1219.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1219.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1220.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1220.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1220.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1220.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1221.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1221.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1221.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1221.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1222	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1223.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1223.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1223.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1223.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1224	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1225.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1225.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1225.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1225.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1226	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1227.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1227.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1227.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1227.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1228	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1229.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1229.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1229.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1229.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1230	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1231.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1231.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1231.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1231.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1232	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1233	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1234	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1235	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1236	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1237	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1238	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1239	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1240	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1241	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1242	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1243	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1244	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1245	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1246	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1247	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1248	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1249	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1250	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1251	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1252	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1253	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1254	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1255	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1256	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1257	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1258	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1259	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1260	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1261	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1262	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1263	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1264	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1265	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1266	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1267	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1268	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1269	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1270	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1271	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1272	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1273	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1274	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1275	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1276	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1277	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1278	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1279	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1280	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1281	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1282	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1283	%read{2147483647,-1} %write{3110,3918}
temp	float	$tmp1284.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1284.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1284.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1284.w	%read{3110,3918} %write{3110,3918}
const	string	$const63	"hash_vector4_to_color"		%read{3333,3811} %write{2147483647,-1}
temp	float	$tmp1285	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1286	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1287	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1288.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1288.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1288.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1288.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1289	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1290	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1291.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1291.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1291.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1291.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1292	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1293.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1293.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1293.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1293.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1294	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1295	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1296	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1297	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1298.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1298.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1298.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1298.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1299.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1299.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1299.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1299.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1300	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1301	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1302	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1303	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1304	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1305	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1306	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1307	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1308.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1308.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1308.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1308.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1309.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1309.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1309.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1309.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1310.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1310.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1310.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1310.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1311	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1312.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1312.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1312.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1312.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1313	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1314.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1314.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1314.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1314.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1315	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1316.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1316.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1316.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1316.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1317	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1318.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1318.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1318.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1318.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1319	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1320.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1320.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1320.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1320.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1321	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1322	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1323	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1324	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1325	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1326	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1327	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1328	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1329	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1330	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1331	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1332	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1333	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1334	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1335	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1336	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1337	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1338	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1339	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1340	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1341	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1342	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1343	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1344	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1345	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1346	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1347	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1348	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1349	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1350	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1351	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1352	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1353	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1354	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1355	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1356	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1357	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1358	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1359	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1360	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1361	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1362	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1363	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1364	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1365	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1366	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1367	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1368	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1369	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1370	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1371	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1372	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1373	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1374	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1375	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1376	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1377.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1377.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1377.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1377.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1378	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1379	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1380	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1381.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1381.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1381.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1381.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1382	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1383	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1384.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1384.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1384.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1384.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1385	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1386	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1387.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1387.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1387.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1387.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1388.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1388.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1388.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1388.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1389	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1390	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1391	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1392	%read{2147483647,-1} %write{3110,3918}
temp	float	$tmp1393.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1393.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1393.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1393.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1394.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1394.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1394.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1394.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1395.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1395.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1395.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1395.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1396	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1397	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1398	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1399	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1400	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1401	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1402	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1403	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1404.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1404.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1404.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1404.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1405.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1405.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1405.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1405.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1406.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1406.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1406.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1406.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1407	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1408.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1408.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1408.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1408.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1409	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1410.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1410.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1410.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1410.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1411	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1412.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1412.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1412.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1412.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1413	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1414.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1414.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1414.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1414.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1415	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1416.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1416.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1416.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1416.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1417	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1418	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1419	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1420	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1421	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1422	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1423	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1424	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1425	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1426	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1427	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1428	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1429	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1430	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1431	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1432	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1433	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1434	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1435	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1436	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1437	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1438	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1439	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1440	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1441	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1442	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1443	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1444	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1445	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1446	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1447	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1448	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1449	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1450	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1451	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1452	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1453	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1454	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1455	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1456	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1457	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1458	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1459	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1460	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1461	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1462	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1463	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1464	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1465	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1466	%read{2147483647,-1} %write{3110,3918}
temp	int	$tmp1467	%read{2147483647,-1} %write{3110,3918}
temp	float	$tmp1468.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1468.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1468.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1468.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1469	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1470	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1471	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1472.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1472.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1472.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1472.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1473	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1474	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1475.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1475.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1475.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1475.w	%read{3110,3918} %write{3110,3918}
temp	point	$tmp1476	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1477.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1477.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1477.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1477.w	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1478	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1479	%read{3110,3918} %write{3110,3918}
temp	color	$tmp1480	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1481.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1481.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1481.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1481.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1482.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1482.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1482.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1482.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1483	%read{3110,3918} %write{3110,3918}
temp	int	$tmp1484	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1485	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1486	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1487	%read{3110,3918} %write{3110,3918}
temp	color	$tmp1488	%read{3110,3918} %write{3110,3918}
temp	color	$tmp1489	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1490.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1490.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1490.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1490.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1491.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1491.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1491.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1491.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1492.x	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1492.y	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1492.z	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1492.w	%read{3110,3918} %write{3110,3918}
temp	float	$tmp1493	%read{3921,3921} %write{3920,3920}
temp	int	$tmp1494	%read{3927,3927} %write{3926,3926}
temp	int	$tmp1495	%read{3931,3931} %write{3930,3930}
temp	int	$tmp1496	%read{3935,3935} %write{3934,3934}
temp	int	$tmp1497	%read{3939,3939} %write{3938,3938}
code Vector
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:19
#     vector3 Vector = P,
	assign		Vector P 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{19} %argrw{"wr"}
code Position
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:30
#     output vector3 Position = P,
	assign		Position P 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{30} %argrw{"wr"}
code ___main___
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:36
#   params.feature = feature;
	assign		params.feature feature 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{36} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:37
#   params.metric = metric;
	assign		params.metric metric 	%line{37} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:38
#   params.scale = Scale;
	assign		params.scale Scale 	%line{38} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:39
#   params.detail = clamp(Detail, 0.0, 15.0);
	functioncall	$const3 8 	%line{39} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Detail $const2 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		params.detail $tmp1 $const1 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:39
#   params.detail = clamp(Detail, 0.0, 15.0);
	assign		params.detail params.detail 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{39} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:40
#   params.roughness = clamp(Roughness, 0.0, 1.0);
	functioncall	$const3 12 	%line{40} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp2 Roughness $const4 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		params.roughness $tmp2 $const1 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:40
#   params.roughness = clamp(Roughness, 0.0, 1.0);
	assign		params.roughness params.roughness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{40} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:41
#   params.lacunarity = Lacunarity;
	assign		params.lacunarity Lacunarity 	%line{41} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:42
#   params.smoothness = clamp(Smoothness / 2.0, 0.0, 0.5);
	div		$tmp3 Smoothness $const5 	%line{42} %argrw{"wrr"}
	functioncall	$const3 18 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp4 $tmp3 $const6 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		params.smoothness $tmp4 $const1 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:42
#   params.smoothness = clamp(Smoothness / 2.0, 0.0, 0.5);
	assign		params.smoothness params.smoothness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{42} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:43
#   params.exponent = Exponent;
	assign		params.exponent Exponent 	%line{43} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:44
#   params.randomness = clamp(Randomness, 0.0, 1.0);
	functioncall	$const3 23 	%line{44} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp5 Randomness $const4 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		params.randomness $tmp5 $const1 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:44
#   params.randomness = clamp(Randomness, 0.0, 1.0);
	assign		params.randomness params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{44} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:45
#   params.max_distance = 0.0;
	assign		params.max_distance $const1 	%line{45} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:46
#   params.normalize = use_normalize;
	assign		params.normalize use_normalize 	%line{46} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:48
#   vector3 coord = Vector;
	assign		coord Vector 	%line{48} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:49
#   if (use_mapping) {
	if		use_mapping 29 29 	%line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:50
#     coord = transform(mapping, coord);
	transform	coord mapping coord 	%line{50} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:53
#   float w = WIn * Scale;
	mul		w WIn Scale 	%line{53} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:54
#   coord *= Scale;
	mul		coord coord Scale 	%line{54} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:56
#   if (feature == "distance_to_edge") {
	eq		$tmp6 feature $const7 	%line{56} %argrw{"wrr"}
	if		$tmp6 762 3954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:57
#     params.max_distance = 0.5 + 0.5 * params.randomness;
	mul		$tmp7 $const6 params.randomness 	%line{57} %argrw{"wrr"}
	add		params.max_distance $const6 $tmp7 	%argrw{"wrr"}
	assign		params.max_distance params.max_distance 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:58
#     if (dimensions == "1D") {
	eq		$tmp8 dimensions $const8 	%line{58} %argrw{"wrr"}
	if		$tmp8 109 762 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:59
#       Distance = fractal_voronoi_distance_to_edge(params, w);
	functioncall	$const9 109 	%line{59} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:123
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(float)
	assign		___719_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{123} %argrw{"wr"}
	assign		___719_max_amplitude params.max_distance 	%argrw{"wr"}
	assign		___719_scale $const4 	%argrw{"wr"}
	assign		___719_distance $const10 	%argrw{"wr"}
	eq		$tmp9 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp10 $tmp9 $const11 	%argrw{"wrr"}
	if		$tmp10 46 49 	%argrw{"r"}
	eq		$tmp11 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp12 $tmp11 $const11 	%argrw{"wrr"}
	assign		$tmp10 $tmp12 	%argrw{"wr"}
	assign		___719_zero_input $tmp10 	%argrw{"wr"}
	for		$tmp15 52 55 105 106 	%argrw{"r"}
	assign		___720_i $const11 	%argrw{"wr"}
	ceil		$tmp13 params.detail 	%argrw{"wr"}
	le		$tmp14 ___720_i $tmp13 	%argrw{"wrr"}
	neq		$tmp15 $tmp14 $const11 	%argrw{"wrr"}
	mul		$tmp16 w ___719_scale 	%argrw{"wrr"}
	functioncall	$const12 81 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:254
#   float cellPosition = floor(coord);
	floor		___531_cellPosition $tmp16 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{254} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:255
#   float localPosition = coord - cellPosition;
	sub		___531_localPosition $tmp16 ___531_cellPosition 	%line{255} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:257
#   float midPointPosition = hash_float_to_float(cellPosition) * params.randomness;
	functioncall	$const13 61 	%line{257} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp17 ___531_cellPosition 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:257
#   float midPointPosition = hash_float_to_float(cellPosition) * params.randomness;
	mul		___531_midPointPosition $tmp17 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{257} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:258
#   float leftPointPosition = -1.0 + hash_float_to_float(cellPosition - 1.0) * params.randomness;
	sub		$tmp19 ___531_cellPosition $const4 	%line{258} %argrw{"wrr"}
	functioncall	$const13 65 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp18 $tmp19 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:258
#   float leftPointPosition = -1.0 + hash_float_to_float(cellPosition - 1.0) * params.randomness;
	mul		$tmp20 $tmp18 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{258} %argrw{"wrr"}
	add		___531_leftPointPosition $const14 $tmp20 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:259
#   float rightPointPosition = 1.0 + hash_float_to_float(cellPosition + 1.0) * params.randomness;
	add		$tmp22 ___531_cellPosition $const4 	%line{259} %argrw{"wrr"}
	functioncall	$const13 70 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp21 $tmp22 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:259
#   float rightPointPosition = 1.0 + hash_float_to_float(cellPosition + 1.0) * params.randomness;
	mul		$tmp23 $tmp21 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{259} %argrw{"wrr"}
	add		___531_rightPointPosition $const4 $tmp23 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:260
#   float distanceToMidLeft = abs((midPointPosition + leftPointPosition) / 2.0 - localPosition);
	add		$tmp24 ___531_midPointPosition ___531_leftPointPosition 	%line{260} %argrw{"wrr"}
	div		$tmp25 $tmp24 $const5 	%argrw{"wrr"}
	sub		$tmp26 $tmp25 ___531_localPosition 	%argrw{"wrr"}
	abs		___531_distanceToMidLeft $tmp26 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:261
#   float distanceToMidRight = abs((midPointPosition + rightPointPosition) / 2.0 - localPosition);
	add		$tmp27 ___531_midPointPosition ___531_rightPointPosition 	%line{261} %argrw{"wrr"}
	div		$tmp28 $tmp27 $const5 	%argrw{"wrr"}
	sub		$tmp29 $tmp28 ___531_localPosition 	%argrw{"wrr"}
	abs		___531_distanceToMidRight $tmp29 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:263
#   return min(distanceToMidLeft, distanceToMidRight);
	min		___721_octave_distance ___531_distanceToMidLeft ___531_distanceToMidRight 	%line{263} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:123
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(float)
	if		___719_zero_input 84 105 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{123} %argrw{"r"}
	assign		___719_distance ___721_octave_distance 	%argrw{"wr"}
	break
	le		$tmp30 ___720_i params.detail 	%argrw{"wrr"}
	if		$tmp30 93 105 	%argrw{"r"}
	div		$tmp31 params.max_distance ___719_scale 	%argrw{"wrr"}
	mix		___719_max_amplitude ___719_max_amplitude $tmp31 ___719_amplitude 	%argrw{"wrrr"}
	div		$tmp33 ___721_octave_distance ___719_scale 	%argrw{"wrr"}
	min		$tmp32 ___719_distance $tmp33 	%argrw{"wrr"}
	mix		___719_distance ___719_distance $tmp32 ___719_amplitude 	%argrw{"wrrr"}
	mul		___719_scale ___719_scale params.lacunarity 	%argrw{"wrr"}
	mul		___719_amplitude ___719_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp34 params.detail 	%argrw{"wr"}
	sub		___724_remainder params.detail $tmp34 	%argrw{"wrr"}
	neq		$tmp35 ___724_remainder $const1 	%argrw{"wrr"}
	if		$tmp35 105 105 	%argrw{"r"}
	div		$tmp36 params.max_distance ___719_scale 	%argrw{"wrr"}
	mix		___725_lerp_amplitude ___719_max_amplitude $tmp36 ___719_amplitude 	%argrw{"wrrr"}
	mix		___719_max_amplitude ___719_max_amplitude ___725_lerp_amplitude ___724_remainder 	%argrw{"wrrr"}
	div		$tmp38 ___721_octave_distance ___719_scale 	%argrw{"wrr"}
	min		$tmp37 ___719_distance $tmp38 	%argrw{"wrr"}
	mix		___725_lerp_distance ___719_distance $tmp37 ___719_amplitude 	%argrw{"wrrr"}
	min		$tmp39 ___719_distance ___725_lerp_distance 	%argrw{"wrr"}
	mix		___719_distance ___719_distance $tmp39 ___724_remainder 	%argrw{"wrrr"}
	add		___720_i ___720_i $const15 	%argrw{"wrr"}
	if		params.normalize 108 108 	%argrw{"r"}
	div		___719_distance ___719_distance ___719_max_amplitude 	%argrw{"wrr"}
	assign		Distance ___719_distance 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:61
#     else if (dimensions == "2D") {
	eq		$tmp40 dimensions $const16 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{61} %argrw{"wrr"}
	if		$tmp40 293 762 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:62
#       Distance = fractal_voronoi_distance_to_edge(params, vector2(coord.x, coord.y));
	compref		$tmp41.x coord $const11 	%line{62} %argrw{"wrr"}
	compref		$tmp41.y coord $const15 	%argrw{"wrr"}
	functioncall	$const9 293 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:129
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector2)
	assign		___738_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{129} %argrw{"wr"}
	assign		___738_max_amplitude params.max_distance 	%argrw{"wr"}
	assign		___738_scale $const4 	%argrw{"wr"}
	assign		___738_distance $const10 	%argrw{"wr"}
	eq		$tmp42 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp43 $tmp42 $const11 	%argrw{"wrr"}
	if		$tmp43 121 124 	%argrw{"r"}
	eq		$tmp44 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp45 $tmp44 $const11 	%argrw{"wrr"}
	assign		$tmp43 $tmp45 	%argrw{"wr"}
	assign		___738_zero_input $tmp43 	%argrw{"wr"}
	for		$tmp48 127 130 289 290 	%argrw{"r"}
	assign		___739_i $const11 	%argrw{"wr"}
	ceil		$tmp46 params.detail 	%argrw{"wr"}
	le		$tmp47 ___739_i $tmp46 	%argrw{"wrr"}
	neq		$tmp48 $tmp47 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 136 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp50.x ___738_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp50.y ___738_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 136 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp49.x $tmp41.x $tmp50.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp49.y $tmp41.y $tmp50.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:129
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector2)
	functioncall	$const12 265 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{129} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:418
#   vector2 cellPosition = floor(coord);
	functioncall	$const18 140 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{418} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___559_cellPosition.x $tmp49.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{157} %argrw{"wr"}
	floor		___559_cellPosition.y $tmp49.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 143 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___559_localPosition.x $tmp49.x ___559_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___559_localPosition.y $tmp49.y ___559_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:421
#   vector2 vectorToClosest = vector2(0.0, 0.0);
	assign		___559_vectorToClosest.x $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{421} %argrw{"wr"}
	assign		___559_vectorToClosest.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:422
#   float minDistance = FLT_MAX;
	assign		___559_minDistance $const20 	%line{422} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:423
#   for (int j = -1; j <= 1; j++) {
	for		$tmp52 148 150 188 190 	%line{423} %argrw{"r"}
	assign		___560_j $const21 	%argrw{"wr"}
	le		$tmp51 ___560_j $const15 	%argrw{"wrr"}
	neq		$tmp52 $tmp51 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:424
#     for (int i = -1; i <= 1; i++) {
	for		$tmp54 152 154 186 188 	%line{424} %argrw{"r"}
	assign		___562_i $const21 	%argrw{"wr"}
	le		$tmp53 ___562_i $const15 	%argrw{"wrr"}
	neq		$tmp54 $tmp53 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:425
#       vector2 cellOffset = vector2(i, j);
	assign		___563_cellOffset.x ___562_i 	%line{425} %argrw{"wr"}
	assign		___563_cellOffset.y ___560_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 159 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp58.x ___559_cellPosition.x ___563_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp58.y ___559_cellPosition.y ___563_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:427
#                               hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 165 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{427} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 162 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp57.x $tmp58.x $tmp58.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp59 $tmp58.x $tmp58.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 165 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp57.y $tmp59 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 171 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp60.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp60.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 171 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp56.x $tmp57.x $tmp60.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp56.y $tmp57.y $tmp60.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 174 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp55.x ___563_cellOffset.x $tmp56.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp55.y ___563_cellOffset.y $tmp56.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 177 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___563_vectorToPoint.x $tmp55.x ___559_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___563_vectorToPoint.y $tmp55.y ___559_localPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:430
#       float distanceToPoint = dot(vectorToPoint, vectorToPoint);
	functioncall	$const26 181 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{430} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:187
#     return (a.x * b.x + a.y * b.y);
	mul		$tmp61 ___563_vectorToPoint.x ___563_vectorToPoint.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{187} %argrw{"wrr"}
	mul		$tmp62 ___563_vectorToPoint.y ___563_vectorToPoint.y 	%argrw{"wrr"}
	add		___563_distanceToPoint $tmp61 $tmp62 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:431
#       if (distanceToPoint < minDistance) {
	lt		$tmp63 ___563_distanceToPoint ___559_minDistance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{431} %argrw{"wrr"}
	if		$tmp63 186 186 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:432
#         minDistance = distanceToPoint;
	assign		___559_minDistance ___563_distanceToPoint 	%line{432} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:433
#         vectorToClosest = vectorToPoint;
	assign		___559_vectorToClosest.x ___563_vectorToPoint.x 	%line{433} %argrw{"wr"}
	assign		___559_vectorToClosest.y ___563_vectorToPoint.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:424
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp64 ___562_i 	%line{424} %argrw{"wr"}
	add		___562_i ___562_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:423
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp65 ___560_j 	%line{423} %argrw{"wr"}
	add		___560_j ___560_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:438
#   minDistance = FLT_MAX;
	assign		___559_minDistance $const20 	%line{438} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:439
#   for (int j = -1; j <= 1; j++) {
	for		$tmp67 193 195 262 264 	%line{439} %argrw{"r"}
	assign		___565_j $const21 	%argrw{"wr"}
	le		$tmp66 ___565_j $const15 	%argrw{"wrr"}
	neq		$tmp67 $tmp66 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:440
#     for (int i = -1; i <= 1; i++) {
	for		$tmp69 197 199 260 262 	%line{440} %argrw{"r"}
	assign		___567_i $const21 	%argrw{"wr"}
	le		$tmp68 ___567_i $const15 	%argrw{"wrr"}
	neq		$tmp69 $tmp68 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:441
#       vector2 cellOffset = vector2(i, j);
	assign		___568_cellOffset.x ___567_i 	%line{441} %argrw{"wr"}
	assign		___568_cellOffset.y ___565_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 204 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp73.x ___559_cellPosition.x ___568_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp73.y ___559_cellPosition.y ___568_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:443
#                               hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 210 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{443} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 207 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp72.x $tmp73.x $tmp73.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp74 $tmp73.x $tmp73.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 210 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp72.y $tmp74 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 216 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp75.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp75.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 216 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp71.x $tmp72.x $tmp75.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp71.y $tmp72.y $tmp75.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 219 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp70.x ___568_cellOffset.x $tmp71.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp70.y ___568_cellOffset.y $tmp71.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 222 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___568_vectorToPoint.x $tmp70.x ___559_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___568_vectorToPoint.y $tmp70.y ___559_localPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 225 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___568_perpendicularToEdge.x ___568_vectorToPoint.x ___559_vectorToClosest.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___568_perpendicularToEdge.y ___568_vectorToPoint.y ___559_vectorToClosest.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:447
#       if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	functioncall	$const26 229 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{447} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:187
#     return (a.x * b.x + a.y * b.y);
	mul		$tmp77 ___568_perpendicularToEdge.x ___568_perpendicularToEdge.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{187} %argrw{"wrr"}
	mul		$tmp78 ___568_perpendicularToEdge.y ___568_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp76 $tmp77 $tmp78 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:447
#       if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	gt		$tmp79 $tmp76 $const27 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{447} %argrw{"wrr"}
	if		$tmp79 260 260 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 234 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp81.x ___559_vectorToClosest.x ___568_vectorToPoint.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp81.y ___559_vectorToClosest.y ___568_vectorToPoint.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 241 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:114
#     float b_inv = 1/b;
	div		___383_b_inv $const4 $const5 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{114} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:115
#     return a * vector2(b_inv, b_inv);
	assign		$tmp82.x ___383_b_inv 	%line{115} %argrw{"wr"}
	assign		$tmp82.y ___383_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 241 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp80.x $tmp81.x $tmp82.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp80.y $tmp81.y $tmp82.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:449
#                                    normalize(perpendicularToEdge));
	functioncall	$const29 255 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{449} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:231
#     return a / length(a);
	functioncall	$const30 248 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{231} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 248 	%line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp85 ___568_perpendicularToEdge.x ___568_perpendicularToEdge.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp86 ___568_perpendicularToEdge.y ___568_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp87 $tmp85 $tmp86 	%argrw{"wrr"}
	sqrt		$tmp84 $tmp87 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 255 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:114
#     float b_inv = 1/b;
	div		___383_b_inv $const4 $tmp84 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{114} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:115
#     return a * vector2(b_inv, b_inv);
	assign		$tmp88.x ___383_b_inv 	%line{115} %argrw{"wr"}
	assign		$tmp88.y ___383_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 255 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp83.x ___568_perpendicularToEdge.x $tmp88.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp83.y ___568_perpendicularToEdge.y $tmp88.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:448
#         float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	functioncall	$const26 259 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{448} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:187
#     return (a.x * b.x + a.y * b.y);
	mul		$tmp89 $tmp80.x $tmp83.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{187} %argrw{"wrr"}
	mul		$tmp90 $tmp80.y $tmp83.y 	%argrw{"wrr"}
	add		___569_distanceToEdge $tmp89 $tmp90 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:450
#         minDistance = min(minDistance, distanceToEdge);
	min		___559_minDistance ___559_minDistance ___569_distanceToEdge 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{450} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:440
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp91 ___567_i 	%line{440} %argrw{"wr"}
	add		___567_i ___567_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:439
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp92 ___565_j 	%line{439} %argrw{"wr"}
	add		___565_j ___565_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:455
#   return minDistance;
	assign		___740_octave_distance ___559_minDistance 	%line{455} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:129
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector2)
	if		___738_zero_input 268 289 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{129} %argrw{"r"}
	assign		___738_distance ___740_octave_distance 	%argrw{"wr"}
	break
	le		$tmp93 ___739_i params.detail 	%argrw{"wrr"}
	if		$tmp93 277 289 	%argrw{"r"}
	div		$tmp94 params.max_distance ___738_scale 	%argrw{"wrr"}
	mix		___738_max_amplitude ___738_max_amplitude $tmp94 ___738_amplitude 	%argrw{"wrrr"}
	div		$tmp96 ___740_octave_distance ___738_scale 	%argrw{"wrr"}
	min		$tmp95 ___738_distance $tmp96 	%argrw{"wrr"}
	mix		___738_distance ___738_distance $tmp95 ___738_amplitude 	%argrw{"wrrr"}
	mul		___738_scale ___738_scale params.lacunarity 	%argrw{"wrr"}
	mul		___738_amplitude ___738_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp97 params.detail 	%argrw{"wr"}
	sub		___743_remainder params.detail $tmp97 	%argrw{"wrr"}
	neq		$tmp98 ___743_remainder $const1 	%argrw{"wrr"}
	if		$tmp98 289 289 	%argrw{"r"}
	div		$tmp99 params.max_distance ___738_scale 	%argrw{"wrr"}
	mix		___744_lerp_amplitude ___738_max_amplitude $tmp99 ___738_amplitude 	%argrw{"wrrr"}
	mix		___738_max_amplitude ___738_max_amplitude ___744_lerp_amplitude ___743_remainder 	%argrw{"wrrr"}
	div		$tmp101 ___740_octave_distance ___738_scale 	%argrw{"wrr"}
	min		$tmp100 ___738_distance $tmp101 	%argrw{"wrr"}
	mix		___744_lerp_distance ___738_distance $tmp100 ___738_amplitude 	%argrw{"wrrr"}
	min		$tmp102 ___738_distance ___744_lerp_distance 	%argrw{"wrr"}
	mix		___738_distance ___738_distance $tmp102 ___743_remainder 	%argrw{"wrrr"}
	add		___739_i ___739_i $const15 	%argrw{"wrr"}
	if		params.normalize 292 292 	%argrw{"r"}
	div		___738_distance ___738_distance ___738_max_amplitude 	%argrw{"wrr"}
	assign		Distance ___738_distance 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:64
#     else if (dimensions == "3D") {
	eq		$tmp103 dimensions $const32 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{64} %argrw{"wrr"}
	if		$tmp103 450 762 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:65
#       Distance = fractal_voronoi_distance_to_edge(params, coord);
	functioncall	$const9 450 	%line{65} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:135
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector3)
	assign		___757_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{135} %argrw{"wr"}
	assign		___757_max_amplitude params.max_distance 	%argrw{"wr"}
	assign		___757_scale $const4 	%argrw{"wr"}
	assign		___757_distance $const10 	%argrw{"wr"}
	eq		$tmp104 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp105 $tmp104 $const11 	%argrw{"wrr"}
	if		$tmp105 303 306 	%argrw{"r"}
	eq		$tmp106 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp107 $tmp106 $const11 	%argrw{"wrr"}
	assign		$tmp105 $tmp107 	%argrw{"wr"}
	assign		___757_zero_input $tmp105 	%argrw{"wr"}
	for		$tmp110 309 312 446 447 	%argrw{"r"}
	assign		___758_i $const11 	%argrw{"wr"}
	ceil		$tmp108 params.detail 	%argrw{"wr"}
	le		$tmp109 ___758_i $tmp108 	%argrw{"wrr"}
	neq		$tmp110 $tmp109 $const11 	%argrw{"wrr"}
	mul		$tmp111 coord ___757_scale 	%argrw{"wrr"}
	functioncall	$const12 422 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:620
#   vector3 cellPosition = floor(coord);
	floor		___607_cellPosition $tmp111 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{620} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:621
#   vector3 localPosition = coord - cellPosition;
	sub		___607_localPosition $tmp111 ___607_cellPosition 	%line{621} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:623
#   vector3 vectorToClosest = vector3(0.0, 0.0, 0.0);
	assign		___607_vectorToClosest $const33 	%line{623} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:624
#   float minDistance = FLT_MAX;
	assign		___607_minDistance $const20 	%line{624} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:625
#   for (int k = -1; k <= 1; k++) {
	for		$tmp113 320 322 365 367 	%line{625} %argrw{"r"}
	assign		___608_k $const21 	%argrw{"wr"}
	le		$tmp112 ___608_k $const15 	%argrw{"wrr"}
	neq		$tmp113 $tmp112 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:626
#     for (int j = -1; j <= 1; j++) {
	for		$tmp115 324 326 363 365 	%line{626} %argrw{"r"}
	assign		___610_j $const21 	%argrw{"wr"}
	le		$tmp114 ___610_j $const15 	%argrw{"wrr"}
	neq		$tmp115 $tmp114 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:627
#       for (int i = -1; i <= 1; i++) {
	for		$tmp117 328 330 361 363 	%line{627} %argrw{"r"}
	assign		___612_i $const21 	%argrw{"wr"}
	le		$tmp116 ___612_i $const15 	%argrw{"wrr"}
	neq		$tmp117 $tmp116 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:628
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp118 ___612_i 	%line{628} %argrw{"wr"}
	assign		$tmp119 ___610_j 	%argrw{"wr"}
	assign		$tmp120 ___608_k 	%argrw{"wr"}
	point		___613_cellOffset $tmp118 $tmp119 $tmp120 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:630
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp122 ___607_cellPosition ___613_cellOffset 	%line{630} %argrw{"wrr"}
	functioncall	$const34 353 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 338 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp123 $tmp122 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp125.x $tmp122 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp125.y $tmp122 $const15 	%argrw{"wrr"}
	compref		$tmp125.z $tmp122 $const35 	%argrw{"wrr"}
	assign		$tmp125.w $const4 	%argrw{"wr"}
	functioncall	$const36 345 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp126 $tmp125.x $tmp125.y $tmp125.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp124 $tmp126 $tmp125.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp128.x $tmp122 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp128.y $tmp122 $const15 	%argrw{"wrr"}
	compref		$tmp128.z $tmp122 $const35 	%argrw{"wrr"}
	assign		$tmp128.w $const5 	%argrw{"wr"}
	functioncall	$const36 352 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp129 $tmp128.x $tmp128.y $tmp128.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp127 $tmp129 $tmp128.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp121 $tmp123 $tmp124 $tmp127 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:630
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp130 $tmp121 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{630} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:629
#         vector3 vectorToPoint = cellOffset +
	add		$tmp131 ___613_cellOffset $tmp130 	%line{629} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:631
#                                     params.randomness -
	sub		___613_vectorToPoint $tmp131 ___607_localPosition 	%line{631} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:633
#         float distanceToPoint = dot(vectorToPoint, vectorToPoint);
	dot		___613_distanceToPoint ___613_vectorToPoint ___613_vectorToPoint 	%line{633} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:634
#         if (distanceToPoint < minDistance) {
	lt		$tmp132 ___613_distanceToPoint ___607_minDistance 	%line{634} %argrw{"wrr"}
	if		$tmp132 361 361 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:635
#           minDistance = distanceToPoint;
	assign		___607_minDistance ___613_distanceToPoint 	%line{635} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:636
#           vectorToClosest = vectorToPoint;
	assign		___607_vectorToClosest ___613_vectorToPoint 	%line{636} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:627
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp133 ___612_i 	%line{627} %argrw{"wr"}
	add		___612_i ___612_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:626
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp134 ___610_j 	%line{626} %argrw{"wr"}
	add		___610_j ___610_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:625
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp135 ___608_k 	%line{625} %argrw{"wr"}
	add		___608_k ___608_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:642
#   minDistance = FLT_MAX;
	assign		___607_minDistance $const20 	%line{642} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:643
#   for (int k = -1; k <= 1; k++) {
	for		$tmp137 370 372 419 421 	%line{643} %argrw{"r"}
	assign		___615_k $const21 	%argrw{"wr"}
	le		$tmp136 ___615_k $const15 	%argrw{"wrr"}
	neq		$tmp137 $tmp136 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:644
#     for (int j = -1; j <= 1; j++) {
	for		$tmp139 374 376 417 419 	%line{644} %argrw{"r"}
	assign		___617_j $const21 	%argrw{"wr"}
	le		$tmp138 ___617_j $const15 	%argrw{"wrr"}
	neq		$tmp139 $tmp138 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:645
#       for (int i = -1; i <= 1; i++) {
	for		$tmp141 378 380 415 417 	%line{645} %argrw{"r"}
	assign		___619_i $const21 	%argrw{"wr"}
	le		$tmp140 ___619_i $const15 	%argrw{"wrr"}
	neq		$tmp141 $tmp140 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:646
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp142 ___619_i 	%line{646} %argrw{"wr"}
	assign		$tmp143 ___617_j 	%argrw{"wr"}
	assign		$tmp144 ___615_k 	%argrw{"wr"}
	point		___620_cellOffset $tmp142 $tmp143 $tmp144 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:648
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp146 ___607_cellPosition ___620_cellOffset 	%line{648} %argrw{"wrr"}
	functioncall	$const34 403 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 388 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp147 $tmp146 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp149.x $tmp146 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp149.y $tmp146 $const15 	%argrw{"wrr"}
	compref		$tmp149.z $tmp146 $const35 	%argrw{"wrr"}
	assign		$tmp149.w $const4 	%argrw{"wr"}
	functioncall	$const36 395 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp150 $tmp149.x $tmp149.y $tmp149.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp148 $tmp150 $tmp149.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp152.x $tmp146 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp152.y $tmp146 $const15 	%argrw{"wrr"}
	compref		$tmp152.z $tmp146 $const35 	%argrw{"wrr"}
	assign		$tmp152.w $const5 	%argrw{"wr"}
	functioncall	$const36 402 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp153 $tmp152.x $tmp152.y $tmp152.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp151 $tmp153 $tmp152.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp145 $tmp147 $tmp148 $tmp151 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:648
#                                 hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp154 $tmp145 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{648} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:647
#         vector3 vectorToPoint = cellOffset +
	add		$tmp155 ___620_cellOffset $tmp154 	%line{647} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:649
#                                     params.randomness -
	sub		___620_vectorToPoint $tmp155 ___607_localPosition 	%line{649} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:651
#         vector3 perpendicularToEdge = vectorToPoint - vectorToClosest;
	sub		___620_perpendicularToEdge ___620_vectorToPoint ___607_vectorToClosest 	%line{651} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:652
#         if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	dot		$tmp156 ___620_perpendicularToEdge ___620_perpendicularToEdge 	%line{652} %argrw{"wrr"}
	gt		$tmp157 $tmp156 $const27 	%argrw{"wrr"}
	if		$tmp157 415 415 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:653
#           float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	add		$tmp158 ___607_vectorToClosest ___620_vectorToPoint 	%line{653} %argrw{"wrr"}
	div		$tmp159 $tmp158 $const5 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:654
#                                      normalize((vector)perpendicularToEdge));
	normalize	$tmp160 ___620_perpendicularToEdge 	%line{654} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:653
#           float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	dot		___621_distanceToEdge $tmp159 $tmp160 	%line{653} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:655
#           minDistance = min(minDistance, distanceToEdge);
	min		___607_minDistance ___607_minDistance ___621_distanceToEdge 	%line{655} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:645
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp161 ___619_i 	%line{645} %argrw{"wr"}
	add		___619_i ___619_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:644
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp162 ___617_j 	%line{644} %argrw{"wr"}
	add		___617_j ___617_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:643
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp163 ___615_k 	%line{643} %argrw{"wr"}
	add		___615_k ___615_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:661
#   return minDistance;
	assign		___759_octave_distance ___607_minDistance 	%line{661} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:135
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector3)
	if		___757_zero_input 425 446 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{135} %argrw{"r"}
	assign		___757_distance ___759_octave_distance 	%argrw{"wr"}
	break
	le		$tmp164 ___758_i params.detail 	%argrw{"wrr"}
	if		$tmp164 434 446 	%argrw{"r"}
	div		$tmp165 params.max_distance ___757_scale 	%argrw{"wrr"}
	mix		___757_max_amplitude ___757_max_amplitude $tmp165 ___757_amplitude 	%argrw{"wrrr"}
	div		$tmp167 ___759_octave_distance ___757_scale 	%argrw{"wrr"}
	min		$tmp166 ___757_distance $tmp167 	%argrw{"wrr"}
	mix		___757_distance ___757_distance $tmp166 ___757_amplitude 	%argrw{"wrrr"}
	mul		___757_scale ___757_scale params.lacunarity 	%argrw{"wrr"}
	mul		___757_amplitude ___757_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp168 params.detail 	%argrw{"wr"}
	sub		___762_remainder params.detail $tmp168 	%argrw{"wrr"}
	neq		$tmp169 ___762_remainder $const1 	%argrw{"wrr"}
	if		$tmp169 446 446 	%argrw{"r"}
	div		$tmp170 params.max_distance ___757_scale 	%argrw{"wrr"}
	mix		___763_lerp_amplitude ___757_max_amplitude $tmp170 ___757_amplitude 	%argrw{"wrrr"}
	mix		___757_max_amplitude ___757_max_amplitude ___763_lerp_amplitude ___762_remainder 	%argrw{"wrrr"}
	div		$tmp172 ___759_octave_distance ___757_scale 	%argrw{"wrr"}
	min		$tmp171 ___757_distance $tmp172 	%argrw{"wrr"}
	mix		___763_lerp_distance ___757_distance $tmp171 ___757_amplitude 	%argrw{"wrrr"}
	min		$tmp173 ___757_distance ___763_lerp_distance 	%argrw{"wrr"}
	mix		___757_distance ___757_distance $tmp173 ___762_remainder 	%argrw{"wrrr"}
	add		___758_i ___758_i $const15 	%argrw{"wrr"}
	if		params.normalize 449 449 	%argrw{"r"}
	div		___757_distance ___757_distance ___757_max_amplitude 	%argrw{"wrr"}
	assign		Distance ___757_distance 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:67
#     else if (dimensions == "4D") {
	eq		$tmp174 dimensions $const37 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{67} %argrw{"wrr"}
	if		$tmp174 761 762 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:68
#       Distance = fractal_voronoi_distance_to_edge(params, vector4(coord.x, coord.y, coord.z, w));
	compref		$tmp175.x coord $const11 	%line{68} %argrw{"wrr"}
	compref		$tmp175.y coord $const15 	%argrw{"wrr"}
	compref		$tmp175.z coord $const35 	%argrw{"wrr"}
	assign		$tmp175.w w 	%argrw{"wr"}
	functioncall	$const9 761 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:141
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector4)
	assign		___776_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{141} %argrw{"wr"}
	assign		___776_max_amplitude params.max_distance 	%argrw{"wr"}
	assign		___776_scale $const4 	%argrw{"wr"}
	assign		___776_distance $const10 	%argrw{"wr"}
	eq		$tmp176 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp177 $tmp176 $const11 	%argrw{"wrr"}
	if		$tmp177 464 467 	%argrw{"r"}
	eq		$tmp178 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp179 $tmp178 $const11 	%argrw{"wrr"}
	assign		$tmp177 $tmp179 	%argrw{"wr"}
	assign		___776_zero_input $tmp177 	%argrw{"wr"}
	for		$tmp182 470 473 757 758 	%argrw{"r"}
	assign		___777_i $const11 	%argrw{"wr"}
	ceil		$tmp180 params.detail 	%argrw{"wr"}
	le		$tmp181 ___777_i $tmp180 	%argrw{"wrr"}
	neq		$tmp182 $tmp181 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 483 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp184.x ___776_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp184.y ___776_scale 	%argrw{"wr"}
	assign		$tmp184.z ___776_scale 	%argrw{"wr"}
	assign		$tmp184.w ___776_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 483 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp183.x $tmp175.x $tmp184.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp183.y $tmp175.y $tmp184.y 	%argrw{"wrr"}
	mul		$tmp183.z $tmp175.z $tmp184.z 	%argrw{"wrr"}
	mul		$tmp183.w $tmp175.w $tmp184.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:141
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector4)
	functioncall	$const12 733 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{141} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:837
#   vector4 cellPosition = floor(coord);
	functioncall	$const18 489 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{837} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:166
#     return vector4 (floor(in.x),
	floor		___669_cellPosition.x $tmp183.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{166} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:167
#                     floor(in.y),
	floor		___669_cellPosition.y $tmp183.y 	%line{167} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:168
#                     floor(in.z),
	floor		___669_cellPosition.z $tmp183.z 	%line{168} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:169
#                     floor(in.w));
	floor		___669_cellPosition.w $tmp183.w 	%line{169} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 494 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___669_localPosition.x $tmp183.x ___669_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___669_localPosition.y $tmp183.y ___669_cellPosition.y 	%argrw{"wrr"}
	sub		___669_localPosition.z $tmp183.z ___669_cellPosition.z 	%argrw{"wrr"}
	sub		___669_localPosition.w $tmp183.w ___669_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:840
#   vector4 vectorToClosest = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___669_vectorToClosest.x $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{840} %argrw{"wr"}
	assign		___669_vectorToClosest.y $const1 	%argrw{"wr"}
	assign		___669_vectorToClosest.z $const1 	%argrw{"wr"}
	assign		___669_vectorToClosest.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:841
#   float minDistance = FLT_MAX;
	assign		___669_minDistance $const20 	%line{841} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:842
#   for (int u = -1; u <= 1; u++) {
	for		$tmp186 501 503 590 592 	%line{842} %argrw{"r"}
	assign		___670_u $const21 	%argrw{"wr"}
	le		$tmp185 ___670_u $const15 	%argrw{"wrr"}
	neq		$tmp186 $tmp185 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:843
#     for (int k = -1; k <= 1; k++) {
	for		$tmp188 505 507 588 590 	%line{843} %argrw{"r"}
	assign		___672_k $const21 	%argrw{"wr"}
	le		$tmp187 ___672_k $const15 	%argrw{"wrr"}
	neq		$tmp188 $tmp187 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:844
#       for (int j = -1; j <= 1; j++) {
	for		$tmp190 509 511 586 588 	%line{844} %argrw{"r"}
	assign		___674_j $const21 	%argrw{"wr"}
	le		$tmp189 ___674_j $const15 	%argrw{"wrr"}
	neq		$tmp190 $tmp189 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:845
#         for (int i = -1; i <= 1; i++) {
	for		$tmp192 513 515 584 586 	%line{845} %argrw{"r"}
	assign		___676_i $const21 	%argrw{"wr"}
	le		$tmp191 ___676_i $const15 	%argrw{"wrr"}
	neq		$tmp192 $tmp191 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:846
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___677_cellOffset.x ___676_i 	%line{846} %argrw{"wr"}
	assign		___677_cellOffset.y ___674_j 	%argrw{"wr"}
	assign		___677_cellOffset.z ___672_k 	%argrw{"wr"}
	assign		___677_cellOffset.w ___670_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 524 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp196.x ___669_cellPosition.x ___677_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp196.y ___669_cellPosition.y ___677_cellOffset.y 	%argrw{"wrr"}
	add		$tmp196.z ___669_cellPosition.z ___677_cellOffset.z 	%argrw{"wrr"}
	add		$tmp196.w ___669_cellPosition.w ___677_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:848
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 549 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{848} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 528 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp197 $tmp196.x $tmp196.y $tmp196.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp195.x $tmp197 $tmp196.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp198.x $tmp196.w 	%line{50} %argrw{"wr"}
	assign		$tmp198.y $tmp196.x 	%argrw{"wr"}
	assign		$tmp198.z $tmp196.y 	%argrw{"wr"}
	assign		$tmp198.w $tmp196.z 	%argrw{"wr"}
	functioncall	$const36 535 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp199 $tmp198.x $tmp198.y $tmp198.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp195.y $tmp199 $tmp198.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp200.x $tmp196.z 	%line{51} %argrw{"wr"}
	assign		$tmp200.y $tmp196.w 	%argrw{"wr"}
	assign		$tmp200.z $tmp196.x 	%argrw{"wr"}
	assign		$tmp200.w $tmp196.y 	%argrw{"wr"}
	functioncall	$const36 542 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp201 $tmp200.x $tmp200.y $tmp200.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp195.z $tmp201 $tmp200.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp202.x $tmp196.y 	%line{52} %argrw{"wr"}
	assign		$tmp202.y $tmp196.z 	%argrw{"wr"}
	assign		$tmp202.z $tmp196.w 	%argrw{"wr"}
	assign		$tmp202.w $tmp196.x 	%argrw{"wr"}
	functioncall	$const36 549 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp203 $tmp202.x $tmp202.y $tmp202.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp195.w $tmp203 $tmp202.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 559 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp204.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp204.y params.randomness 	%argrw{"wr"}
	assign		$tmp204.z params.randomness 	%argrw{"wr"}
	assign		$tmp204.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 559 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp194.x $tmp195.x $tmp204.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp194.y $tmp195.y $tmp204.y 	%argrw{"wrr"}
	mul		$tmp194.z $tmp195.z $tmp204.z 	%argrw{"wrr"}
	mul		$tmp194.w $tmp195.w $tmp204.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 564 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp193.x ___677_cellOffset.x $tmp194.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp193.y ___677_cellOffset.y $tmp194.y 	%argrw{"wrr"}
	add		$tmp193.z ___677_cellOffset.z $tmp194.z 	%argrw{"wrr"}
	add		$tmp193.w ___677_cellOffset.w $tmp194.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 569 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___677_vectorToPoint.x $tmp193.x ___669_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___677_vectorToPoint.y $tmp193.y ___669_localPosition.y 	%argrw{"wrr"}
	sub		___677_vectorToPoint.z $tmp193.z ___669_localPosition.z 	%argrw{"wrr"}
	sub		___677_vectorToPoint.w $tmp193.w ___669_localPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:851
#           float distanceToPoint = dot(vectorToPoint, vectorToPoint);
	functioncall	$const26 577 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{851} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:219
#     return ((a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w));
	mul		$tmp205 ___677_vectorToPoint.x ___677_vectorToPoint.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{219} %argrw{"wrr"}
	mul		$tmp206 ___677_vectorToPoint.y ___677_vectorToPoint.y 	%argrw{"wrr"}
	add		$tmp207 $tmp205 $tmp206 	%argrw{"wrr"}
	mul		$tmp208 ___677_vectorToPoint.z ___677_vectorToPoint.z 	%argrw{"wrr"}
	add		$tmp209 $tmp207 $tmp208 	%argrw{"wrr"}
	mul		$tmp210 ___677_vectorToPoint.w ___677_vectorToPoint.w 	%argrw{"wrr"}
	add		___677_distanceToPoint $tmp209 $tmp210 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:852
#           if (distanceToPoint < minDistance) {
	lt		$tmp211 ___677_distanceToPoint ___669_minDistance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{852} %argrw{"wrr"}
	if		$tmp211 584 584 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:853
#             minDistance = distanceToPoint;
	assign		___669_minDistance ___677_distanceToPoint 	%line{853} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:854
#             vectorToClosest = vectorToPoint;
	assign		___669_vectorToClosest.x ___677_vectorToPoint.x 	%line{854} %argrw{"wr"}
	assign		___669_vectorToClosest.y ___677_vectorToPoint.y 	%argrw{"wr"}
	assign		___669_vectorToClosest.z ___677_vectorToPoint.z 	%argrw{"wr"}
	assign		___669_vectorToClosest.w ___677_vectorToPoint.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:845
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp212 ___676_i 	%line{845} %argrw{"wr"}
	add		___676_i ___676_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:844
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp213 ___674_j 	%line{844} %argrw{"wr"}
	add		___674_j ___674_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:843
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp214 ___672_k 	%line{843} %argrw{"wr"}
	add		___672_k ___672_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:842
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp215 ___670_u 	%line{842} %argrw{"wr"}
	add		___670_u ___670_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:861
#   minDistance = FLT_MAX;
	assign		___669_minDistance $const20 	%line{861} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:862
#   for (int u = -1; u <= 1; u++) {
	for		$tmp217 595 597 730 732 	%line{862} %argrw{"r"}
	assign		___679_u $const21 	%argrw{"wr"}
	le		$tmp216 ___679_u $const15 	%argrw{"wrr"}
	neq		$tmp217 $tmp216 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:863
#     for (int k = -1; k <= 1; k++) {
	for		$tmp219 599 601 728 730 	%line{863} %argrw{"r"}
	assign		___681_k $const21 	%argrw{"wr"}
	le		$tmp218 ___681_k $const15 	%argrw{"wrr"}
	neq		$tmp219 $tmp218 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:864
#       for (int j = -1; j <= 1; j++) {
	for		$tmp221 603 605 726 728 	%line{864} %argrw{"r"}
	assign		___683_j $const21 	%argrw{"wr"}
	le		$tmp220 ___683_j $const15 	%argrw{"wrr"}
	neq		$tmp221 $tmp220 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:865
#         for (int i = -1; i <= 1; i++) {
	for		$tmp223 607 609 724 726 	%line{865} %argrw{"r"}
	assign		___685_i $const21 	%argrw{"wr"}
	le		$tmp222 ___685_i $const15 	%argrw{"wrr"}
	neq		$tmp223 $tmp222 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:866
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___686_cellOffset.x ___685_i 	%line{866} %argrw{"wr"}
	assign		___686_cellOffset.y ___683_j 	%argrw{"wr"}
	assign		___686_cellOffset.z ___681_k 	%argrw{"wr"}
	assign		___686_cellOffset.w ___679_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 618 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp227.x ___669_cellPosition.x ___686_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp227.y ___669_cellPosition.y ___686_cellOffset.y 	%argrw{"wrr"}
	add		$tmp227.z ___669_cellPosition.z ___686_cellOffset.z 	%argrw{"wrr"}
	add		$tmp227.w ___669_cellPosition.w ___686_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:868
#                                   hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 643 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{868} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 622 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp228 $tmp227.x $tmp227.y $tmp227.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp226.x $tmp228 $tmp227.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp229.x $tmp227.w 	%line{50} %argrw{"wr"}
	assign		$tmp229.y $tmp227.x 	%argrw{"wr"}
	assign		$tmp229.z $tmp227.y 	%argrw{"wr"}
	assign		$tmp229.w $tmp227.z 	%argrw{"wr"}
	functioncall	$const36 629 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp230 $tmp229.x $tmp229.y $tmp229.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp226.y $tmp230 $tmp229.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp231.x $tmp227.z 	%line{51} %argrw{"wr"}
	assign		$tmp231.y $tmp227.w 	%argrw{"wr"}
	assign		$tmp231.z $tmp227.x 	%argrw{"wr"}
	assign		$tmp231.w $tmp227.y 	%argrw{"wr"}
	functioncall	$const36 636 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp232 $tmp231.x $tmp231.y $tmp231.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp226.z $tmp232 $tmp231.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp233.x $tmp227.y 	%line{52} %argrw{"wr"}
	assign		$tmp233.y $tmp227.z 	%argrw{"wr"}
	assign		$tmp233.z $tmp227.w 	%argrw{"wr"}
	assign		$tmp233.w $tmp227.x 	%argrw{"wr"}
	functioncall	$const36 643 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp234 $tmp233.x $tmp233.y $tmp233.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp226.w $tmp234 $tmp233.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 653 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp235.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp235.y params.randomness 	%argrw{"wr"}
	assign		$tmp235.z params.randomness 	%argrw{"wr"}
	assign		$tmp235.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 653 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp225.x $tmp226.x $tmp235.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp225.y $tmp226.y $tmp235.y 	%argrw{"wrr"}
	mul		$tmp225.z $tmp226.z $tmp235.z 	%argrw{"wrr"}
	mul		$tmp225.w $tmp226.w $tmp235.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 658 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp224.x ___686_cellOffset.x $tmp225.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp224.y ___686_cellOffset.y $tmp225.y 	%argrw{"wrr"}
	add		$tmp224.z ___686_cellOffset.z $tmp225.z 	%argrw{"wrr"}
	add		$tmp224.w ___686_cellOffset.w $tmp225.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 663 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___686_vectorToPoint.x $tmp224.x ___669_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___686_vectorToPoint.y $tmp224.y ___669_localPosition.y 	%argrw{"wrr"}
	sub		___686_vectorToPoint.z $tmp224.z ___669_localPosition.z 	%argrw{"wrr"}
	sub		___686_vectorToPoint.w $tmp224.w ___669_localPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 668 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___686_perpendicularToEdge.x ___686_vectorToPoint.x ___669_vectorToClosest.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___686_perpendicularToEdge.y ___686_vectorToPoint.y ___669_vectorToClosest.y 	%argrw{"wrr"}
	sub		___686_perpendicularToEdge.z ___686_vectorToPoint.z ___669_vectorToClosest.z 	%argrw{"wrr"}
	sub		___686_perpendicularToEdge.w ___686_vectorToPoint.w ___669_vectorToClosest.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:872
#           if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	functioncall	$const26 676 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{872} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:219
#     return ((a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w));
	mul		$tmp237 ___686_perpendicularToEdge.x ___686_perpendicularToEdge.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{219} %argrw{"wrr"}
	mul		$tmp238 ___686_perpendicularToEdge.y ___686_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp239 $tmp237 $tmp238 	%argrw{"wrr"}
	mul		$tmp240 ___686_perpendicularToEdge.z ___686_perpendicularToEdge.z 	%argrw{"wrr"}
	add		$tmp241 $tmp239 $tmp240 	%argrw{"wrr"}
	mul		$tmp242 ___686_perpendicularToEdge.w ___686_perpendicularToEdge.w 	%argrw{"wrr"}
	add		$tmp236 $tmp241 $tmp242 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:872
#           if (dot(perpendicularToEdge, perpendicularToEdge) > 0.0001) {
	gt		$tmp243 $tmp236 $const27 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{872} %argrw{"wrr"}
	if		$tmp243 724 724 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 683 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp245.x ___669_vectorToClosest.x ___686_vectorToPoint.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp245.y ___669_vectorToClosest.y ___686_vectorToPoint.y 	%argrw{"wrr"}
	add		$tmp245.z ___669_vectorToClosest.z ___686_vectorToPoint.z 	%argrw{"wrr"}
	add		$tmp245.w ___669_vectorToClosest.w ___686_vectorToPoint.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 694 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 $const5 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp246.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp246.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp246.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp246.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 694 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp244.x $tmp245.x $tmp246.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp244.y $tmp245.y $tmp246.y 	%argrw{"wrr"}
	mul		$tmp244.z $tmp245.z $tmp246.z 	%argrw{"wrr"}
	mul		$tmp244.w $tmp245.w $tmp246.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:874
#                                        normalize(perpendicularToEdge));
	functioncall	$const29 715 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{874} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:274
#     return a / length(a);
	functioncall	$const30 704 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{274} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp249 ___686_perpendicularToEdge.x ___686_perpendicularToEdge.x 	%line{224} %argrw{"wrr"}
	mul		$tmp250 ___686_perpendicularToEdge.y ___686_perpendicularToEdge.y 	%argrw{"wrr"}
	add		$tmp251 $tmp249 $tmp250 	%argrw{"wrr"}
	mul		$tmp252 ___686_perpendicularToEdge.z ___686_perpendicularToEdge.z 	%argrw{"wrr"}
	add		$tmp253 $tmp251 $tmp252 	%argrw{"wrr"}
	mul		$tmp254 ___686_perpendicularToEdge.w ___686_perpendicularToEdge.w 	%argrw{"wrr"}
	add		$tmp255 $tmp253 $tmp254 	%argrw{"wrr"}
	sqrt		$tmp248 $tmp255 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 715 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 $tmp248 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp256.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp256.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp256.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp256.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 715 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp247.x ___686_perpendicularToEdge.x $tmp256.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp247.y ___686_perpendicularToEdge.y $tmp256.y 	%argrw{"wrr"}
	mul		$tmp247.z ___686_perpendicularToEdge.z $tmp256.z 	%argrw{"wrr"}
	mul		$tmp247.w ___686_perpendicularToEdge.w $tmp256.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:873
#             float distanceToEdge = dot((vectorToClosest + vectorToPoint) / 2.0,
	functioncall	$const26 723 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{873} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:219
#     return ((a.x * b.x) + (a.y * b.y) + (a.z * b.z) + (a.w * b.w));
	mul		$tmp257 $tmp244.x $tmp247.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{219} %argrw{"wrr"}
	mul		$tmp258 $tmp244.y $tmp247.y 	%argrw{"wrr"}
	add		$tmp259 $tmp257 $tmp258 	%argrw{"wrr"}
	mul		$tmp260 $tmp244.z $tmp247.z 	%argrw{"wrr"}
	add		$tmp261 $tmp259 $tmp260 	%argrw{"wrr"}
	mul		$tmp262 $tmp244.w $tmp247.w 	%argrw{"wrr"}
	add		___687_distanceToEdge $tmp261 $tmp262 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:875
#             minDistance = min(minDistance, distanceToEdge);
	min		___669_minDistance ___669_minDistance ___687_distanceToEdge 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{875} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:865
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp263 ___685_i 	%line{865} %argrw{"wr"}
	add		___685_i ___685_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:864
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp264 ___683_j 	%line{864} %argrw{"wr"}
	add		___683_j ___683_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:863
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp265 ___681_k 	%line{863} %argrw{"wr"}
	add		___681_k ___681_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:862
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp266 ___679_u 	%line{862} %argrw{"wr"}
	add		___679_u ___679_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:882
#   return minDistance;
	assign		___778_octave_distance ___669_minDistance 	%line{882} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:141
# FRACTAL_VORONOI_DISTANCE_TO_EDGE_FUNCTION(vector4)
	if		___776_zero_input 736 757 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{141} %argrw{"r"}
	assign		___776_distance ___778_octave_distance 	%argrw{"wr"}
	break
	le		$tmp267 ___777_i params.detail 	%argrw{"wrr"}
	if		$tmp267 745 757 	%argrw{"r"}
	div		$tmp268 params.max_distance ___776_scale 	%argrw{"wrr"}
	mix		___776_max_amplitude ___776_max_amplitude $tmp268 ___776_amplitude 	%argrw{"wrrr"}
	div		$tmp270 ___778_octave_distance ___776_scale 	%argrw{"wrr"}
	min		$tmp269 ___776_distance $tmp270 	%argrw{"wrr"}
	mix		___776_distance ___776_distance $tmp269 ___776_amplitude 	%argrw{"wrrr"}
	mul		___776_scale ___776_scale params.lacunarity 	%argrw{"wrr"}
	mul		___776_amplitude ___776_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp271 params.detail 	%argrw{"wr"}
	sub		___781_remainder params.detail $tmp271 	%argrw{"wrr"}
	neq		$tmp272 ___781_remainder $const1 	%argrw{"wrr"}
	if		$tmp272 757 757 	%argrw{"r"}
	div		$tmp273 params.max_distance ___776_scale 	%argrw{"wrr"}
	mix		___782_lerp_amplitude ___776_max_amplitude $tmp273 ___776_amplitude 	%argrw{"wrrr"}
	mix		___776_max_amplitude ___776_max_amplitude ___782_lerp_amplitude ___781_remainder 	%argrw{"wrrr"}
	div		$tmp275 ___778_octave_distance ___776_scale 	%argrw{"wrr"}
	min		$tmp274 ___776_distance $tmp275 	%argrw{"wrr"}
	mix		___782_lerp_distance ___776_distance $tmp274 ___776_amplitude 	%argrw{"wrrr"}
	min		$tmp276 ___776_distance ___782_lerp_distance 	%argrw{"wrr"}
	mix		___776_distance ___776_distance $tmp276 ___781_remainder 	%argrw{"wrrr"}
	add		___777_i ___777_i $const15 	%argrw{"wrr"}
	if		params.normalize 760 760 	%argrw{"r"}
	div		___776_distance ___776_distance ___776_max_amplitude 	%argrw{"wrr"}
	assign		Distance ___776_distance 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:71
#       error("Unknown dimension!");
	error		$const39 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{71} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:74
#   else if (feature == "n_sphere_radius") {
	eq		$tmp277 feature $const40 	%line{74} %argrw{"wrr"}
	if		$tmp277 1343 3954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:75
#     if (dimensions == "1D") {
	eq		$tmp278 dimensions $const8 	%line{75} %argrw{"wrr"}
	if		$tmp278 818 1343 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:76
#       Radius = voronoi_n_sphere_radius(params, w);
	functioncall	$const41 818 	%line{76} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:268
#   float cellPosition = floor(coord);
	floor		___532_cellPosition w 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{268} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:269
#   float localPosition = coord - cellPosition;
	sub		___532_localPosition w ___532_cellPosition 	%line{269} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:271
#   float closestPoint = 0.0;
	assign		___532_closestPoint $const1 	%line{271} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:272
#   float closestPointOffset = 0.0;
	assign		___532_closestPointOffset $const1 	%line{272} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:273
#   float minDistance = FLT_MAX;
	assign		___532_minDistance $const20 	%line{273} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:274
#   for (int i = -1; i <= 1; i++) {
	for		$tmp280 774 776 789 791 	%line{274} %argrw{"r"}
	assign		___533_i $const21 	%argrw{"wr"}
	le		$tmp279 ___533_i $const15 	%argrw{"wrr"}
	neq		$tmp280 $tmp279 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:275
#     float cellOffset = i;
	assign		___534_cellOffset ___533_i 	%line{275} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:277
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	add		$tmp282 ___532_cellPosition ___534_cellOffset 	%line{277} %argrw{"wrr"}
	functioncall	$const13 780 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp281 $tmp282 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:277
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	mul		$tmp283 $tmp281 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{277} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:276
#     float pointPosition = cellOffset +
	add		___534_pointPosition ___534_cellOffset $tmp283 	%line{276} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:278
#     float distanceToPoint = abs(pointPosition - localPosition);
	sub		$tmp284 ___534_pointPosition ___532_localPosition 	%line{278} %argrw{"wrr"}
	abs		___534_distanceToPoint $tmp284 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:279
#     if (distanceToPoint < minDistance) {
	lt		$tmp285 ___534_distanceToPoint ___532_minDistance 	%line{279} %argrw{"wrr"}
	if		$tmp285 789 789 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:280
#       minDistance = distanceToPoint;
	assign		___532_minDistance ___534_distanceToPoint 	%line{280} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:281
#       closestPoint = pointPosition;
	assign		___532_closestPoint ___534_pointPosition 	%line{281} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:282
#       closestPointOffset = cellOffset;
	assign		___532_closestPointOffset ___534_cellOffset 	%line{282} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:274
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp286 ___533_i 	%line{274} %argrw{"wr"}
	add		___533_i ___533_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:286
#   minDistance = FLT_MAX;
	assign		___532_minDistance $const20 	%line{286} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:287
#   float closestPointToClosestPoint = 0.0;
	assign		___532_closestPointToClosestPoint $const1 	%line{287} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:288
#   for (int i = -1; i <= 1; i++) {
	for		$tmp288 795 797 813 815 	%line{288} %argrw{"r"}
	assign		___536_i $const21 	%argrw{"wr"}
	le		$tmp287 ___536_i $const15 	%argrw{"wrr"}
	neq		$tmp288 $tmp287 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:289
#     if (i == 0) {
	eq		$tmp289 ___536_i $const11 	%line{289} %argrw{"wrr"}
	if		$tmp289 800 800 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:290
#       continue;
	continue	%line{290}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:292
#     float cellOffset = i + closestPointOffset;
	assign		$tmp290 ___536_i 	%line{292} %argrw{"wr"}
	add		___537_cellOffset $tmp290 ___532_closestPointOffset 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:294
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	add		$tmp292 ___532_cellPosition ___537_cellOffset 	%line{294} %argrw{"wrr"}
	functioncall	$const13 805 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp291 $tmp292 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:294
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	mul		$tmp293 $tmp291 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{294} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:293
#     float pointPosition = cellOffset +
	add		___537_pointPosition ___537_cellOffset $tmp293 	%line{293} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:295
#     float distanceToPoint = abs(closestPoint - pointPosition);
	sub		$tmp294 ___532_closestPoint ___537_pointPosition 	%line{295} %argrw{"wrr"}
	abs		___537_distanceToPoint $tmp294 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:296
#     if (distanceToPoint < minDistance) {
	lt		$tmp295 ___537_distanceToPoint ___532_minDistance 	%line{296} %argrw{"wrr"}
	if		$tmp295 813 813 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:297
#       minDistance = distanceToPoint;
	assign		___532_minDistance ___537_distanceToPoint 	%line{297} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:298
#       closestPointToClosestPoint = pointPosition;
	assign		___532_closestPointToClosestPoint ___537_pointPosition 	%line{298} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:288
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp296 ___536_i 	%line{288} %argrw{"wr"}
	add		___536_i ___536_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:302
#   return abs(closestPointToClosestPoint - closestPoint) / 2.0;
	sub		$tmp298 ___532_closestPointToClosestPoint ___532_closestPoint 	%line{302} %argrw{"wrr"}
	abs		$tmp297 $tmp298 	%argrw{"wr"}
	div		Radius $tmp297 $const5 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:78
#     else if (dimensions == "2D") {
	eq		$tmp299 dimensions $const16 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{78} %argrw{"wrr"}
	if		$tmp299 955 1343 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:79
#       Radius = voronoi_n_sphere_radius(params, vector2(coord.x, coord.y));
	compref		$tmp300.x coord $const11 	%line{79} %argrw{"wrr"}
	compref		$tmp300.y coord $const15 	%argrw{"wrr"}
	functioncall	$const41 955 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:460
#   vector2 cellPosition = floor(coord);
	functioncall	$const18 826 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{460} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___570_cellPosition.x $tmp300.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{157} %argrw{"wr"}
	floor		___570_cellPosition.y $tmp300.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 829 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___570_localPosition.x $tmp300.x ___570_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___570_localPosition.y $tmp300.y ___570_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:463
#   vector2 closestPoint = vector2(0.0, 0.0);
	assign		___570_closestPoint.x $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{463} %argrw{"wr"}
	assign		___570_closestPoint.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:464
#   vector2 closestPointOffset = vector2(0.0, 0.0);
	assign		___570_closestPointOffset.x $const1 	%line{464} %argrw{"wr"}
	assign		___570_closestPointOffset.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:465
#   float minDistance = FLT_MAX;
	assign		___570_minDistance $const20 	%line{465} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:466
#   for (int j = -1; j <= 1; j++) {
	for		$tmp302 836 838 881 883 	%line{466} %argrw{"r"}
	assign		___571_j $const21 	%argrw{"wr"}
	le		$tmp301 ___571_j $const15 	%argrw{"wrr"}
	neq		$tmp302 $tmp301 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:467
#     for (int i = -1; i <= 1; i++) {
	for		$tmp304 840 842 879 881 	%line{467} %argrw{"r"}
	assign		___573_i $const21 	%argrw{"wr"}
	le		$tmp303 ___573_i $const15 	%argrw{"wrr"}
	neq		$tmp304 $tmp303 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:468
#       vector2 cellOffset = vector2(i, j);
	assign		___574_cellOffset.x ___573_i 	%line{468} %argrw{"wr"}
	assign		___574_cellOffset.y ___571_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 847 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp307.x ___570_cellPosition.x ___574_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp307.y ___570_cellPosition.y ___574_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:469
#       vector2 pointPosition = cellOffset + hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 853 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{469} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 850 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp306.x $tmp307.x $tmp307.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp308 $tmp307.x $tmp307.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 853 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp306.y $tmp308 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 859 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp309.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp309.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 859 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp305.x $tmp306.x $tmp309.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp305.y $tmp306.y $tmp309.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 862 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___574_pointPosition.x ___574_cellOffset.x $tmp305.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___574_pointPosition.y ___574_cellOffset.y $tmp305.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:471
#       float distanceToPoint = distance(pointPosition, localPosition);
	functioncall	$const42 872 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{471} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 866 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp310.x ___574_pointPosition.x ___570_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp310.y ___574_pointPosition.y ___570_localPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 872 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 872 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp311 $tmp310.x $tmp310.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp312 $tmp310.y $tmp310.y 	%argrw{"wrr"}
	add		$tmp313 $tmp311 $tmp312 	%argrw{"wrr"}
	sqrt		___574_distanceToPoint $tmp313 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:472
#       if (distanceToPoint < minDistance) {
	lt		$tmp314 ___574_distanceToPoint ___570_minDistance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{472} %argrw{"wrr"}
	if		$tmp314 879 879 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:473
#         minDistance = distanceToPoint;
	assign		___570_minDistance ___574_distanceToPoint 	%line{473} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:474
#         closestPoint = pointPosition;
	assign		___570_closestPoint.x ___574_pointPosition.x 	%line{474} %argrw{"wr"}
	assign		___570_closestPoint.y ___574_pointPosition.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:475
#         closestPointOffset = cellOffset;
	assign		___570_closestPointOffset.x ___574_cellOffset.x 	%line{475} %argrw{"wr"}
	assign		___570_closestPointOffset.y ___574_cellOffset.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:467
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp315 ___573_i 	%line{467} %argrw{"wr"}
	add		___573_i ___573_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:466
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp316 ___571_j 	%line{466} %argrw{"wr"}
	add		___571_j ___571_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:480
#   minDistance = FLT_MAX;
	assign		___570_minDistance $const20 	%line{480} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:481
#   vector2 closestPointToClosestPoint = vector2(0.0, 0.0);
	assign		___570_closestPointToClosestPoint.x $const1 	%line{481} %argrw{"wr"}
	assign		___570_closestPointToClosestPoint.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:482
#   for (int j = -1; j <= 1; j++) {
	for		$tmp318 888 890 942 944 	%line{482} %argrw{"r"}
	assign		___576_j $const21 	%argrw{"wr"}
	le		$tmp317 ___576_j $const15 	%argrw{"wrr"}
	neq		$tmp318 $tmp317 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:483
#     for (int i = -1; i <= 1; i++) {
	for		$tmp320 892 894 940 942 	%line{483} %argrw{"r"}
	assign		___578_i $const21 	%argrw{"wr"}
	le		$tmp319 ___578_i $const15 	%argrw{"wrr"}
	neq		$tmp320 $tmp319 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:484
#       if (i == 0 && j == 0) {
	eq		$tmp321 ___578_i $const11 	%line{484} %argrw{"wrr"}
	neq		$tmp322 $tmp321 $const11 	%argrw{"wrr"}
	if		$tmp322 900 900 	%argrw{"r"}
	eq		$tmp323 ___576_j $const11 	%argrw{"wrr"}
	neq		$tmp324 $tmp323 $const11 	%argrw{"wrr"}
	assign		$tmp322 $tmp324 	%argrw{"wr"}
	if		$tmp322 902 902 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:485
#         continue;
	continue	%line{485}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:487
#       vector2 cellOffset = vector2(i, j) + closestPointOffset;
	assign		$tmp325.x ___578_i 	%line{487} %argrw{"wr"}
	assign		$tmp325.y ___576_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 907 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___579_cellOffset.x $tmp325.x ___570_closestPointOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___579_cellOffset.y $tmp325.y ___570_closestPointOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 910 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp328.x ___570_cellPosition.x ___579_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp328.y ___570_cellPosition.y ___579_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:488
#       vector2 pointPosition = cellOffset + hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 916 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{488} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 913 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp327.x $tmp328.x $tmp328.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp329 $tmp328.x $tmp328.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 916 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp327.y $tmp329 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 922 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp330.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp330.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 922 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp326.x $tmp327.x $tmp330.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp326.y $tmp327.y $tmp330.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 925 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___579_pointPosition.x ___579_cellOffset.x $tmp326.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___579_pointPosition.y ___579_cellOffset.y $tmp326.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:490
#       float distanceToPoint = distance(closestPoint, pointPosition);
	functioncall	$const42 935 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{490} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 929 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp331.x ___570_closestPoint.x ___579_pointPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp331.y ___570_closestPoint.y ___579_pointPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 935 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 935 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp332 $tmp331.x $tmp331.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp333 $tmp331.y $tmp331.y 	%argrw{"wrr"}
	add		$tmp334 $tmp332 $tmp333 	%argrw{"wrr"}
	sqrt		___579_distanceToPoint $tmp334 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:491
#       if (distanceToPoint < minDistance) {
	lt		$tmp335 ___579_distanceToPoint ___570_minDistance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{491} %argrw{"wrr"}
	if		$tmp335 940 940 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:492
#         minDistance = distanceToPoint;
	assign		___570_minDistance ___579_distanceToPoint 	%line{492} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:493
#         closestPointToClosestPoint = pointPosition;
	assign		___570_closestPointToClosestPoint.x ___579_pointPosition.x 	%line{493} %argrw{"wr"}
	assign		___570_closestPointToClosestPoint.y ___579_pointPosition.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:483
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp336 ___578_i 	%line{483} %argrw{"wr"}
	add		___578_i ___578_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:482
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp337 ___576_j 	%line{482} %argrw{"wr"}
	add		___576_j ___576_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:498
#   return distance(closestPointToClosestPoint, closestPoint) / 2.0;
	functioncall	$const42 954 	%line{498} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 948 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp339.x ___570_closestPointToClosestPoint.x ___570_closestPoint.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp339.y ___570_closestPointToClosestPoint.y ___570_closestPoint.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 954 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 954 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp340 $tmp339.x $tmp339.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp341 $tmp339.y $tmp339.y 	%argrw{"wrr"}
	add		$tmp342 $tmp340 $tmp341 	%argrw{"wrr"}
	sqrt		$tmp338 $tmp342 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:498
#   return distance(closestPointToClosestPoint, closestPoint) / 2.0;
	div		Radius $tmp338 $const5 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{498} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:81
#     else if (dimensions == "3D") {
	eq		$tmp343 dimensions $const32 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{81} %argrw{"wrr"}
	if		$tmp343 1078 1343 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:82
#       Radius = voronoi_n_sphere_radius(params, coord);
	functioncall	$const41 1078 	%line{82} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:666
#   vector3 cellPosition = floor(coord);
	floor		___622_cellPosition coord 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{666} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:667
#   vector3 localPosition = coord - cellPosition;
	sub		___622_localPosition coord ___622_cellPosition 	%line{667} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:669
#   vector3 closestPoint = vector3(0.0, 0.0, 0.0);
	assign		___622_closestPoint $const33 	%line{669} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:670
#   vector3 closestPointOffset = vector3(0.0, 0.0, 0.0);
	assign		___622_closestPointOffset $const33 	%line{670} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:671
#   float minDistance = FLT_MAX;
	assign		___622_minDistance $const20 	%line{671} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:672
#   for (int k = -1; k <= 1; k++) {
	for		$tmp345 965 967 1010 1012 	%line{672} %argrw{"r"}
	assign		___623_k $const21 	%argrw{"wr"}
	le		$tmp344 ___623_k $const15 	%argrw{"wrr"}
	neq		$tmp345 $tmp344 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:673
#     for (int j = -1; j <= 1; j++) {
	for		$tmp347 969 971 1008 1010 	%line{673} %argrw{"r"}
	assign		___625_j $const21 	%argrw{"wr"}
	le		$tmp346 ___625_j $const15 	%argrw{"wrr"}
	neq		$tmp347 $tmp346 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:674
#       for (int i = -1; i <= 1; i++) {
	for		$tmp349 973 975 1006 1008 	%line{674} %argrw{"r"}
	assign		___627_i $const21 	%argrw{"wr"}
	le		$tmp348 ___627_i $const15 	%argrw{"wrr"}
	neq		$tmp349 $tmp348 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:675
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp350 ___627_i 	%line{675} %argrw{"wr"}
	assign		$tmp351 ___625_j 	%argrw{"wr"}
	assign		$tmp352 ___623_k 	%argrw{"wr"}
	point		___628_cellOffset $tmp350 $tmp351 $tmp352 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:676
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp354 ___622_cellPosition ___628_cellOffset 	%line{676} %argrw{"wrr"}
	functioncall	$const34 998 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 983 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp355 $tmp354 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp357.x $tmp354 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp357.y $tmp354 $const15 	%argrw{"wrr"}
	compref		$tmp357.z $tmp354 $const35 	%argrw{"wrr"}
	assign		$tmp357.w $const4 	%argrw{"wr"}
	functioncall	$const36 990 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp358 $tmp357.x $tmp357.y $tmp357.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp356 $tmp358 $tmp357.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp360.x $tmp354 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp360.y $tmp354 $const15 	%argrw{"wrr"}
	compref		$tmp360.z $tmp354 $const35 	%argrw{"wrr"}
	assign		$tmp360.w $const5 	%argrw{"wr"}
	functioncall	$const36 997 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp361 $tmp360.x $tmp360.y $tmp360.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp359 $tmp361 $tmp360.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp353 $tmp355 $tmp356 $tmp359 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:676
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp362 $tmp353 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{676} %argrw{"wrr"}
	add		___628_pointPosition ___628_cellOffset $tmp362 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:678
#         float distanceToPoint = distance(pointPosition, localPosition);
	distance	___628_distanceToPoint ___628_pointPosition ___622_localPosition 	%line{678} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:679
#         if (distanceToPoint < minDistance) {
	lt		$tmp363 ___628_distanceToPoint ___622_minDistance 	%line{679} %argrw{"wrr"}
	if		$tmp363 1006 1006 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:680
#           minDistance = distanceToPoint;
	assign		___622_minDistance ___628_distanceToPoint 	%line{680} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:681
#           closestPoint = pointPosition;
	assign		___622_closestPoint ___628_pointPosition 	%line{681} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:682
#           closestPointOffset = cellOffset;
	assign		___622_closestPointOffset ___628_cellOffset 	%line{682} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:674
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp364 ___627_i 	%line{674} %argrw{"wr"}
	add		___627_i ___627_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:673
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp365 ___625_j 	%line{673} %argrw{"wr"}
	add		___625_j ___625_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:672
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp366 ___623_k 	%line{672} %argrw{"wr"}
	add		___623_k ___623_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:688
#   minDistance = FLT_MAX;
	assign		___622_minDistance $const20 	%line{688} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:689
#   vector3 closestPointToClosestPoint = vector3(0.0, 0.0, 0.0);
	assign		___622_closestPointToClosestPoint $const33 	%line{689} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:690
#   for (int k = -1; k <= 1; k++) {
	for		$tmp368 1016 1018 1074 1076 	%line{690} %argrw{"r"}
	assign		___630_k $const21 	%argrw{"wr"}
	le		$tmp367 ___630_k $const15 	%argrw{"wrr"}
	neq		$tmp368 $tmp367 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:691
#     for (int j = -1; j <= 1; j++) {
	for		$tmp370 1020 1022 1072 1074 	%line{691} %argrw{"r"}
	assign		___632_j $const21 	%argrw{"wr"}
	le		$tmp369 ___632_j $const15 	%argrw{"wrr"}
	neq		$tmp370 $tmp369 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:692
#       for (int i = -1; i <= 1; i++) {
	for		$tmp372 1024 1026 1070 1072 	%line{692} %argrw{"r"}
	assign		___634_i $const21 	%argrw{"wr"}
	le		$tmp371 ___634_i $const15 	%argrw{"wrr"}
	neq		$tmp372 $tmp371 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:693
#         if (i == 0 && j == 0 && k == 0) {
	eq		$tmp373 ___634_i $const11 	%line{693} %argrw{"wrr"}
	neq		$tmp374 $tmp373 $const11 	%argrw{"wrr"}
	if		$tmp374 1032 1032 	%argrw{"r"}
	eq		$tmp375 ___632_j $const11 	%argrw{"wrr"}
	neq		$tmp376 $tmp375 $const11 	%argrw{"wrr"}
	assign		$tmp374 $tmp376 	%argrw{"wr"}
	neq		$tmp377 $tmp374 $const11 	%argrw{"wrr"}
	if		$tmp377 1037 1037 	%argrw{"r"}
	eq		$tmp378 ___630_k $const11 	%argrw{"wrr"}
	neq		$tmp379 $tmp378 $const11 	%argrw{"wrr"}
	assign		$tmp377 $tmp379 	%argrw{"wr"}
	if		$tmp377 1039 1039 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:694
#           continue;
	continue	%line{694}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:696
#         vector3 cellOffset = vector3(i, j, k) + closestPointOffset;
	assign		$tmp381 ___634_i 	%line{696} %argrw{"wr"}
	assign		$tmp382 ___632_j 	%argrw{"wr"}
	assign		$tmp383 ___630_k 	%argrw{"wr"}
	point		$tmp380 $tmp381 $tmp382 $tmp383 	%argrw{"wrrr"}
	add		___635_cellOffset $tmp380 ___622_closestPointOffset 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:697
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp385 ___622_cellPosition ___635_cellOffset 	%line{697} %argrw{"wrr"}
	functioncall	$const34 1063 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 1048 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp386 $tmp385 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp388.x $tmp385 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp388.y $tmp385 $const15 	%argrw{"wrr"}
	compref		$tmp388.z $tmp385 $const35 	%argrw{"wrr"}
	assign		$tmp388.w $const4 	%argrw{"wr"}
	functioncall	$const36 1055 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp389 $tmp388.x $tmp388.y $tmp388.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp387 $tmp389 $tmp388.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp391.x $tmp385 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp391.y $tmp385 $const15 	%argrw{"wrr"}
	compref		$tmp391.z $tmp385 $const35 	%argrw{"wrr"}
	assign		$tmp391.w $const5 	%argrw{"wr"}
	functioncall	$const36 1062 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp392 $tmp391.x $tmp391.y $tmp391.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp390 $tmp392 $tmp391.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp384 $tmp386 $tmp387 $tmp390 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:697
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp393 $tmp384 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{697} %argrw{"wrr"}
	add		___635_pointPosition ___635_cellOffset $tmp393 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:699
#         float distanceToPoint = distance(closestPoint, pointPosition);
	distance	___635_distanceToPoint ___622_closestPoint ___635_pointPosition 	%line{699} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:700
#         if (distanceToPoint < minDistance) {
	lt		$tmp394 ___635_distanceToPoint ___622_minDistance 	%line{700} %argrw{"wrr"}
	if		$tmp394 1070 1070 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:701
#           minDistance = distanceToPoint;
	assign		___622_minDistance ___635_distanceToPoint 	%line{701} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:702
#           closestPointToClosestPoint = pointPosition;
	assign		___622_closestPointToClosestPoint ___635_pointPosition 	%line{702} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:692
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp395 ___634_i 	%line{692} %argrw{"wr"}
	add		___634_i ___634_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:691
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp396 ___632_j 	%line{691} %argrw{"wr"}
	add		___632_j ___632_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:690
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp397 ___630_k 	%line{690} %argrw{"wr"}
	add		___630_k ___630_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:708
#   return distance(closestPointToClosestPoint, closestPoint) / 2.0;
	distance	$tmp398 ___622_closestPointToClosestPoint ___622_closestPoint 	%line{708} %argrw{"wrr"}
	div		Radius $tmp398 $const5 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:84
#     else if (dimensions == "4D") {
	eq		$tmp399 dimensions $const37 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{84} %argrw{"wrr"}
	if		$tmp399 1342 1343 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:85
#       Radius = voronoi_n_sphere_radius(params, vector4(coord.x, coord.y, coord.z, w));
	compref		$tmp400.x coord $const11 	%line{85} %argrw{"wrr"}
	compref		$tmp400.y coord $const15 	%argrw{"wrr"}
	compref		$tmp400.z coord $const35 	%argrw{"wrr"}
	assign		$tmp400.w w 	%argrw{"wr"}
	functioncall	$const41 1342 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:887
#   vector4 cellPosition = floor(coord);
	functioncall	$const18 1090 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{887} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:166
#     return vector4 (floor(in.x),
	floor		___688_cellPosition.x $tmp400.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{166} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:167
#                     floor(in.y),
	floor		___688_cellPosition.y $tmp400.y 	%line{167} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:168
#                     floor(in.z),
	floor		___688_cellPosition.z $tmp400.z 	%line{168} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:169
#                     floor(in.w));
	floor		___688_cellPosition.w $tmp400.w 	%line{169} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1095 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___688_localPosition.x $tmp400.x ___688_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___688_localPosition.y $tmp400.y ___688_cellPosition.y 	%argrw{"wrr"}
	sub		___688_localPosition.z $tmp400.z ___688_cellPosition.z 	%argrw{"wrr"}
	sub		___688_localPosition.w $tmp400.w ___688_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:890
#   vector4 closestPoint = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___688_closestPoint.x $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{890} %argrw{"wr"}
	assign		___688_closestPoint.y $const1 	%argrw{"wr"}
	assign		___688_closestPoint.z $const1 	%argrw{"wr"}
	assign		___688_closestPoint.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:891
#   vector4 closestPointOffset = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___688_closestPointOffset.x $const1 	%line{891} %argrw{"wr"}
	assign		___688_closestPointOffset.y $const1 	%argrw{"wr"}
	assign		___688_closestPointOffset.z $const1 	%argrw{"wr"}
	assign		___688_closestPointOffset.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:892
#   float minDistance = FLT_MAX;
	assign		___688_minDistance $const20 	%line{892} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:893
#   for (int u = -1; u <= 1; u++) {
	for		$tmp402 1106 1108 1201 1203 	%line{893} %argrw{"r"}
	assign		___689_u $const21 	%argrw{"wr"}
	le		$tmp401 ___689_u $const15 	%argrw{"wrr"}
	neq		$tmp402 $tmp401 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:894
#     for (int k = -1; k <= 1; k++) {
	for		$tmp404 1110 1112 1199 1201 	%line{894} %argrw{"r"}
	assign		___691_k $const21 	%argrw{"wr"}
	le		$tmp403 ___691_k $const15 	%argrw{"wrr"}
	neq		$tmp404 $tmp403 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:895
#       for (int j = -1; j <= 1; j++) {
	for		$tmp406 1114 1116 1197 1199 	%line{895} %argrw{"r"}
	assign		___693_j $const21 	%argrw{"wr"}
	le		$tmp405 ___693_j $const15 	%argrw{"wrr"}
	neq		$tmp406 $tmp405 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:896
#         for (int i = -1; i <= 1; i++) {
	for		$tmp408 1118 1120 1195 1197 	%line{896} %argrw{"r"}
	assign		___695_i $const21 	%argrw{"wr"}
	le		$tmp407 ___695_i $const15 	%argrw{"wrr"}
	neq		$tmp408 $tmp407 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:897
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___696_cellOffset.x ___695_i 	%line{897} %argrw{"wr"}
	assign		___696_cellOffset.y ___693_j 	%argrw{"wr"}
	assign		___696_cellOffset.z ___691_k 	%argrw{"wr"}
	assign		___696_cellOffset.w ___689_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1129 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp411.x ___688_cellPosition.x ___696_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp411.y ___688_cellPosition.y ___696_cellOffset.y 	%argrw{"wrr"}
	add		$tmp411.z ___688_cellPosition.z ___696_cellOffset.z 	%argrw{"wrr"}
	add		$tmp411.w ___688_cellPosition.w ___696_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:898
#           vector4 pointPosition = cellOffset + hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 1154 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{898} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 1133 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp412 $tmp411.x $tmp411.y $tmp411.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp410.x $tmp412 $tmp411.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp413.x $tmp411.w 	%line{50} %argrw{"wr"}
	assign		$tmp413.y $tmp411.x 	%argrw{"wr"}
	assign		$tmp413.z $tmp411.y 	%argrw{"wr"}
	assign		$tmp413.w $tmp411.z 	%argrw{"wr"}
	functioncall	$const36 1140 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp414 $tmp413.x $tmp413.y $tmp413.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp410.y $tmp414 $tmp413.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp415.x $tmp411.z 	%line{51} %argrw{"wr"}
	assign		$tmp415.y $tmp411.w 	%argrw{"wr"}
	assign		$tmp415.z $tmp411.x 	%argrw{"wr"}
	assign		$tmp415.w $tmp411.y 	%argrw{"wr"}
	functioncall	$const36 1147 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp416 $tmp415.x $tmp415.y $tmp415.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp410.z $tmp416 $tmp415.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp417.x $tmp411.y 	%line{52} %argrw{"wr"}
	assign		$tmp417.y $tmp411.z 	%argrw{"wr"}
	assign		$tmp417.z $tmp411.w 	%argrw{"wr"}
	assign		$tmp417.w $tmp411.x 	%argrw{"wr"}
	functioncall	$const36 1154 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp418 $tmp417.x $tmp417.y $tmp417.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp410.w $tmp418 $tmp417.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1164 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp419.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp419.y params.randomness 	%argrw{"wr"}
	assign		$tmp419.z params.randomness 	%argrw{"wr"}
	assign		$tmp419.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1164 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp409.x $tmp410.x $tmp419.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp409.y $tmp410.y $tmp419.y 	%argrw{"wrr"}
	mul		$tmp409.z $tmp410.z $tmp419.z 	%argrw{"wrr"}
	mul		$tmp409.w $tmp410.w $tmp419.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1169 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___696_pointPosition.x ___696_cellOffset.x $tmp409.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___696_pointPosition.y ___696_cellOffset.y $tmp409.y 	%argrw{"wrr"}
	add		___696_pointPosition.z ___696_cellOffset.z $tmp409.z 	%argrw{"wrr"}
	add		___696_pointPosition.w ___696_cellOffset.w $tmp409.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:900
#           float distanceToPoint = distance(pointPosition, localPosition);
	functioncall	$const42 1184 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{900} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1175 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp420.x ___696_pointPosition.x ___688_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp420.y ___696_pointPosition.y ___688_localPosition.y 	%argrw{"wrr"}
	sub		$tmp420.z ___696_pointPosition.z ___688_localPosition.z 	%argrw{"wrr"}
	sub		$tmp420.w ___696_pointPosition.w ___688_localPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 1184 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp421 $tmp420.x $tmp420.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp422 $tmp420.y $tmp420.y 	%argrw{"wrr"}
	add		$tmp423 $tmp421 $tmp422 	%argrw{"wrr"}
	mul		$tmp424 $tmp420.z $tmp420.z 	%argrw{"wrr"}
	add		$tmp425 $tmp423 $tmp424 	%argrw{"wrr"}
	mul		$tmp426 $tmp420.w $tmp420.w 	%argrw{"wrr"}
	add		$tmp427 $tmp425 $tmp426 	%argrw{"wrr"}
	sqrt		___696_distanceToPoint $tmp427 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:901
#           if (distanceToPoint < minDistance) {
	lt		$tmp428 ___696_distanceToPoint ___688_minDistance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{901} %argrw{"wrr"}
	if		$tmp428 1195 1195 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:902
#             minDistance = distanceToPoint;
	assign		___688_minDistance ___696_distanceToPoint 	%line{902} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:903
#             closestPoint = pointPosition;
	assign		___688_closestPoint.x ___696_pointPosition.x 	%line{903} %argrw{"wr"}
	assign		___688_closestPoint.y ___696_pointPosition.y 	%argrw{"wr"}
	assign		___688_closestPoint.z ___696_pointPosition.z 	%argrw{"wr"}
	assign		___688_closestPoint.w ___696_pointPosition.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:904
#             closestPointOffset = cellOffset;
	assign		___688_closestPointOffset.x ___696_cellOffset.x 	%line{904} %argrw{"wr"}
	assign		___688_closestPointOffset.y ___696_cellOffset.y 	%argrw{"wr"}
	assign		___688_closestPointOffset.z ___696_cellOffset.z 	%argrw{"wr"}
	assign		___688_closestPointOffset.w ___696_cellOffset.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:896
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp429 ___695_i 	%line{896} %argrw{"wr"}
	add		___695_i ___695_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:895
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp430 ___693_j 	%line{895} %argrw{"wr"}
	add		___693_j ___693_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:894
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp431 ___691_k 	%line{894} %argrw{"wr"}
	add		___691_k ___691_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:893
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp432 ___689_u 	%line{893} %argrw{"wr"}
	add		___689_u ___689_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:911
#   minDistance = FLT_MAX;
	assign		___688_minDistance $const20 	%line{911} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:912
#   vector4 closestPointToClosestPoint = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___688_closestPointToClosestPoint.x $const1 	%line{912} %argrw{"wr"}
	assign		___688_closestPointToClosestPoint.y $const1 	%argrw{"wr"}
	assign		___688_closestPointToClosestPoint.z $const1 	%argrw{"wr"}
	assign		___688_closestPointToClosestPoint.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:913
#   for (int u = -1; u <= 1; u++) {
	for		$tmp434 1210 1212 1324 1326 	%line{913} %argrw{"r"}
	assign		___698_u $const21 	%argrw{"wr"}
	le		$tmp433 ___698_u $const15 	%argrw{"wrr"}
	neq		$tmp434 $tmp433 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:914
#     for (int k = -1; k <= 1; k++) {
	for		$tmp436 1214 1216 1322 1324 	%line{914} %argrw{"r"}
	assign		___700_k $const21 	%argrw{"wr"}
	le		$tmp435 ___700_k $const15 	%argrw{"wrr"}
	neq		$tmp436 $tmp435 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:915
#       for (int j = -1; j <= 1; j++) {
	for		$tmp438 1218 1220 1320 1322 	%line{915} %argrw{"r"}
	assign		___702_j $const21 	%argrw{"wr"}
	le		$tmp437 ___702_j $const15 	%argrw{"wrr"}
	neq		$tmp438 $tmp437 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:916
#         for (int i = -1; i <= 1; i++) {
	for		$tmp440 1222 1224 1318 1320 	%line{916} %argrw{"r"}
	assign		___704_i $const21 	%argrw{"wr"}
	le		$tmp439 ___704_i $const15 	%argrw{"wrr"}
	neq		$tmp440 $tmp439 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:917
#           if (i == 0 && j == 0 && k == 0 && u == 0) {
	eq		$tmp441 ___704_i $const11 	%line{917} %argrw{"wrr"}
	neq		$tmp442 $tmp441 $const11 	%argrw{"wrr"}
	if		$tmp442 1230 1230 	%argrw{"r"}
	eq		$tmp443 ___702_j $const11 	%argrw{"wrr"}
	neq		$tmp444 $tmp443 $const11 	%argrw{"wrr"}
	assign		$tmp442 $tmp444 	%argrw{"wr"}
	neq		$tmp445 $tmp442 $const11 	%argrw{"wrr"}
	if		$tmp445 1235 1235 	%argrw{"r"}
	eq		$tmp446 ___700_k $const11 	%argrw{"wrr"}
	neq		$tmp447 $tmp446 $const11 	%argrw{"wrr"}
	assign		$tmp445 $tmp447 	%argrw{"wr"}
	neq		$tmp448 $tmp445 $const11 	%argrw{"wrr"}
	if		$tmp448 1240 1240 	%argrw{"r"}
	eq		$tmp449 ___698_u $const11 	%argrw{"wrr"}
	neq		$tmp450 $tmp449 $const11 	%argrw{"wrr"}
	assign		$tmp448 $tmp450 	%argrw{"wr"}
	if		$tmp448 1242 1242 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:918
#             continue;
	continue	%line{918}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:920
#           vector4 cellOffset = vector4(i, j, k, u) + closestPointOffset;
	assign		$tmp451.x ___704_i 	%line{920} %argrw{"wr"}
	assign		$tmp451.y ___702_j 	%argrw{"wr"}
	assign		$tmp451.z ___700_k 	%argrw{"wr"}
	assign		$tmp451.w ___698_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1251 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___705_cellOffset.x $tmp451.x ___688_closestPointOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___705_cellOffset.y $tmp451.y ___688_closestPointOffset.y 	%argrw{"wrr"}
	add		___705_cellOffset.z $tmp451.z ___688_closestPointOffset.z 	%argrw{"wrr"}
	add		___705_cellOffset.w $tmp451.w ___688_closestPointOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1256 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp454.x ___688_cellPosition.x ___705_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp454.y ___688_cellPosition.y ___705_cellOffset.y 	%argrw{"wrr"}
	add		$tmp454.z ___688_cellPosition.z ___705_cellOffset.z 	%argrw{"wrr"}
	add		$tmp454.w ___688_cellPosition.w ___705_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:921
#           vector4 pointPosition = cellOffset + hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 1281 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{921} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 1260 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp455 $tmp454.x $tmp454.y $tmp454.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp453.x $tmp455 $tmp454.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp456.x $tmp454.w 	%line{50} %argrw{"wr"}
	assign		$tmp456.y $tmp454.x 	%argrw{"wr"}
	assign		$tmp456.z $tmp454.y 	%argrw{"wr"}
	assign		$tmp456.w $tmp454.z 	%argrw{"wr"}
	functioncall	$const36 1267 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp457 $tmp456.x $tmp456.y $tmp456.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp453.y $tmp457 $tmp456.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp458.x $tmp454.z 	%line{51} %argrw{"wr"}
	assign		$tmp458.y $tmp454.w 	%argrw{"wr"}
	assign		$tmp458.z $tmp454.x 	%argrw{"wr"}
	assign		$tmp458.w $tmp454.y 	%argrw{"wr"}
	functioncall	$const36 1274 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp459 $tmp458.x $tmp458.y $tmp458.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp453.z $tmp459 $tmp458.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp460.x $tmp454.y 	%line{52} %argrw{"wr"}
	assign		$tmp460.y $tmp454.z 	%argrw{"wr"}
	assign		$tmp460.z $tmp454.w 	%argrw{"wr"}
	assign		$tmp460.w $tmp454.x 	%argrw{"wr"}
	functioncall	$const36 1281 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp461 $tmp460.x $tmp460.y $tmp460.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp453.w $tmp461 $tmp460.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1291 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp462.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp462.y params.randomness 	%argrw{"wr"}
	assign		$tmp462.z params.randomness 	%argrw{"wr"}
	assign		$tmp462.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1291 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp452.x $tmp453.x $tmp462.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp452.y $tmp453.y $tmp462.y 	%argrw{"wrr"}
	mul		$tmp452.z $tmp453.z $tmp462.z 	%argrw{"wrr"}
	mul		$tmp452.w $tmp453.w $tmp462.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1296 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___705_pointPosition.x ___705_cellOffset.x $tmp452.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___705_pointPosition.y ___705_cellOffset.y $tmp452.y 	%argrw{"wrr"}
	add		___705_pointPosition.z ___705_cellOffset.z $tmp452.z 	%argrw{"wrr"}
	add		___705_pointPosition.w ___705_cellOffset.w $tmp452.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:923
#           float distanceToPoint = distance(closestPoint, pointPosition);
	functioncall	$const42 1311 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{923} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1302 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp463.x ___688_closestPoint.x ___705_pointPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp463.y ___688_closestPoint.y ___705_pointPosition.y 	%argrw{"wrr"}
	sub		$tmp463.z ___688_closestPoint.z ___705_pointPosition.z 	%argrw{"wrr"}
	sub		$tmp463.w ___688_closestPoint.w ___705_pointPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 1311 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp464 $tmp463.x $tmp463.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp465 $tmp463.y $tmp463.y 	%argrw{"wrr"}
	add		$tmp466 $tmp464 $tmp465 	%argrw{"wrr"}
	mul		$tmp467 $tmp463.z $tmp463.z 	%argrw{"wrr"}
	add		$tmp468 $tmp466 $tmp467 	%argrw{"wrr"}
	mul		$tmp469 $tmp463.w $tmp463.w 	%argrw{"wrr"}
	add		$tmp470 $tmp468 $tmp469 	%argrw{"wrr"}
	sqrt		___705_distanceToPoint $tmp470 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:924
#           if (distanceToPoint < minDistance) {
	lt		$tmp471 ___705_distanceToPoint ___688_minDistance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{924} %argrw{"wrr"}
	if		$tmp471 1318 1318 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:925
#             minDistance = distanceToPoint;
	assign		___688_minDistance ___705_distanceToPoint 	%line{925} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:926
#             closestPointToClosestPoint = pointPosition;
	assign		___688_closestPointToClosestPoint.x ___705_pointPosition.x 	%line{926} %argrw{"wr"}
	assign		___688_closestPointToClosestPoint.y ___705_pointPosition.y 	%argrw{"wr"}
	assign		___688_closestPointToClosestPoint.z ___705_pointPosition.z 	%argrw{"wr"}
	assign		___688_closestPointToClosestPoint.w ___705_pointPosition.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:916
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp472 ___704_i 	%line{916} %argrw{"wr"}
	add		___704_i ___704_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:915
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp473 ___702_j 	%line{915} %argrw{"wr"}
	add		___702_j ___702_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:914
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp474 ___700_k 	%line{914} %argrw{"wr"}
	add		___700_k ___700_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:913
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp475 ___698_u 	%line{913} %argrw{"wr"}
	add		___698_u ___698_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:933
#   return distance(closestPointToClosestPoint, closestPoint) / 2.0;
	functioncall	$const42 1341 	%line{933} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1332 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp477.x ___688_closestPointToClosestPoint.x ___688_closestPoint.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp477.y ___688_closestPointToClosestPoint.y ___688_closestPoint.y 	%argrw{"wrr"}
	sub		$tmp477.z ___688_closestPointToClosestPoint.z ___688_closestPoint.z 	%argrw{"wrr"}
	sub		$tmp477.w ___688_closestPointToClosestPoint.w ___688_closestPoint.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 1341 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp478 $tmp477.x $tmp477.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp479 $tmp477.y $tmp477.y 	%argrw{"wrr"}
	add		$tmp480 $tmp478 $tmp479 	%argrw{"wrr"}
	mul		$tmp481 $tmp477.z $tmp477.z 	%argrw{"wrr"}
	add		$tmp482 $tmp480 $tmp481 	%argrw{"wrr"}
	mul		$tmp483 $tmp477.w $tmp477.w 	%argrw{"wrr"}
	add		$tmp484 $tmp482 $tmp483 	%argrw{"wrr"}
	sqrt		$tmp476 $tmp484 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:933
#   return distance(closestPointToClosestPoint, closestPoint) / 2.0;
	div		Radius $tmp476 $const5 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{933} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:88
#       error("Unknown dimension!");
	error		$const39 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{88} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:93
#     if (dimensions == "1D") {
	eq		$tmp485 dimensions $const8 	%line{93} %argrw{"wrr"}
	if		$tmp485 1679 3954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:94
#       params.max_distance = (0.5 + 0.5 * params.randomness) *
	mul		$tmp486 $const6 params.randomness 	%line{94} %argrw{"wrr"}
	add		$tmp487 $const6 $tmp486 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:95
#                             ((params.feature == "f2") ? 2.0 : 1.0);
	eq		$tmp489 params.feature $const43 	%line{95} %argrw{"wrr"}
	if		$tmp489 1350 1351 	%argrw{"r"}
	assign		$tmp488 $const5 	%argrw{"wr"}
	assign		$tmp488 $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:94
#       params.max_distance = (0.5 + 0.5 * params.randomness) *
	mul		params.max_distance $tmp487 $tmp488 	%line{94} %argrw{"wrr"}
	assign		params.max_distance params.max_distance 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:96
#       Output = fractal_voronoi_x_fx(params, w);
	functioncall	$const44 1676 	%line{96} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	assign		___708_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"wr"}
	assign		___708_max_amplitude $const1 	%argrw{"wr"}
	assign		___708_scale $const4 	%argrw{"wr"}
	assign		___708_Output.Distance $const1 	%argrw{"wr"}
	assign		___708_Output.Color $const45 	%argrw{"wr"}
	assign		___708_Output.Position.x $const1 	%argrw{"wr"}
	assign		___708_Output.Position.y $const1 	%argrw{"wr"}
	assign		___708_Output.Position.z $const1 	%argrw{"wr"}
	assign		___708_Output.Position.w $const1 	%argrw{"wr"}
	eq		$tmp490 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp491 $tmp490 $const11 	%argrw{"wrr"}
	if		$tmp491 1366 1369 	%argrw{"r"}
	eq		$tmp492 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp493 $tmp492 $const11 	%argrw{"wrr"}
	assign		$tmp491 $tmp493 	%argrw{"wr"}
	assign		___708_zero_input $tmp491 	%argrw{"wr"}
	for		$tmp496 1372 1375 1645 1646 	%argrw{"r"}
	assign		___709_i $const11 	%argrw{"wr"}
	ceil		$tmp494 params.detail 	%argrw{"wr"}
	le		$tmp495 ___709_i $tmp494 	%argrw{"wrr"}
	neq		$tmp496 $tmp495 $const11 	%argrw{"wrr"}
	eq		$tmp497 params.feature $const43 	%argrw{"wrr"}
	if		$tmp497 1442 1574 	%argrw{"r"}
	mul		$tmp498 w ___708_scale 	%argrw{"wrr"}
	functioncall	$const46 1442 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:216
#   float cellPosition = floor(coord);
	floor		___526_cellPosition $tmp498 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{216} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:217
#   float localPosition = coord - cellPosition;
	sub		___526_localPosition $tmp498 ___526_cellPosition 	%line{217} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:219
#   float distanceF1 = FLT_MAX;
	assign		___526_distanceF1 $const20 	%line{219} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:220
#   float distanceF2 = FLT_MAX;
	assign		___526_distanceF2 $const20 	%line{220} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:221
#   float offsetF1 = 0.0;
	assign		___526_offsetF1 $const1 	%line{221} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:222
#   float positionF1 = 0.0;
	assign		___526_positionF1 $const1 	%line{222} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:223
#   float offsetF2 = 0.0;
	assign		___526_offsetF2 $const1 	%line{223} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:224
#   float positionF2 = 0.0;
	assign		___526_positionF2 $const1 	%line{224} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:225
#   for (int i = -1; i <= 1; i++) {
	for		$tmp500 1389 1391 1413 1415 	%line{225} %argrw{"r"}
	assign		___527_i $const21 	%argrw{"wr"}
	le		$tmp499 ___527_i $const15 	%argrw{"wrr"}
	neq		$tmp500 $tmp499 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:226
#     float cellOffset = i;
	assign		___528_cellOffset ___527_i 	%line{226} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:228
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	add		$tmp502 ___526_cellPosition ___528_cellOffset 	%line{228} %argrw{"wrr"}
	functioncall	$const13 1395 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp501 $tmp502 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:228
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	mul		$tmp503 $tmp501 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{228} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:227
#     float pointPosition = cellOffset +
	add		___528_pointPosition ___528_cellOffset $tmp503 	%line{227} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:229
#     float distanceToPoint = voronoi_distance(pointPosition, localPosition);
	functioncall	$const47 1400 	%line{229} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:51
#   return abs(a - b);
	sub		$tmp504 ___528_pointPosition ___526_localPosition 	%line{51} %argrw{"wrr"}
	abs		___528_distanceToPoint $tmp504 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:230
#     if (distanceToPoint < distanceF1) {
	lt		$tmp505 ___528_distanceToPoint ___526_distanceF1 	%line{230} %argrw{"wrr"}
	if		$tmp505 1408 1413 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:231
#       distanceF2 = distanceF1;
	assign		___526_distanceF2 ___526_distanceF1 	%line{231} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:232
#       distanceF1 = distanceToPoint;
	assign		___526_distanceF1 ___528_distanceToPoint 	%line{232} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:233
#       offsetF2 = offsetF1;
	assign		___526_offsetF2 ___526_offsetF1 	%line{233} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:234
#       offsetF1 = cellOffset;
	assign		___526_offsetF1 ___528_cellOffset 	%line{234} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:235
#       positionF2 = positionF1;
	assign		___526_positionF2 ___526_positionF1 	%line{235} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:236
#       positionF1 = pointPosition;
	assign		___526_positionF1 ___528_pointPosition 	%line{236} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:238
#     else if (distanceToPoint < distanceF2) {
	lt		$tmp506 ___528_distanceToPoint ___526_distanceF2 	%line{238} %argrw{"wrr"}
	if		$tmp506 1413 1413 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:239
#       distanceF2 = distanceToPoint;
	assign		___526_distanceF2 ___528_distanceToPoint 	%line{239} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:240
#       offsetF2 = cellOffset;
	assign		___526_offsetF2 ___528_cellOffset 	%line{240} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:241
#       positionF2 = pointPosition;
	assign		___526_positionF2 ___528_pointPosition 	%line{241} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:225
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp507 ___527_i 	%line{225} %argrw{"wr"}
	add		___527_i ___527_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:246
#   octave.Distance = distanceF2;
	assign		___526_octave.Distance ___526_distanceF2 	%line{246} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:247
#   octave.Color = hash_float_to_color(cellPosition + offsetF2);
	add		$tmp508 ___526_cellPosition ___526_offsetF2 	%line{247} %argrw{"wrr"}
	functioncall	$const48 1429 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:59
#   return color(hash_float_to_float(k),
	functioncall	$const13 1420 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{59} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp509 $tmp508 	%line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:60
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp511.x $tmp508 	%line{60} %argrw{"wr"}
	assign		$tmp511.y $const4 	%argrw{"wr"}
	functioncall	$const24 1424 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp510 $tmp511.x $tmp511.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:61
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp513.x $tmp508 	%line{61} %argrw{"wr"}
	assign		$tmp513.y $const5 	%argrw{"wr"}
	functioncall	$const24 1428 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp512 $tmp513.x $tmp513.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:59
#   return color(hash_float_to_float(k),
	color		___526_octave.Color $tmp509 $tmp510 $tmp512 	%line{59} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:247
#   octave.Color = hash_float_to_color(cellPosition + offsetF2);
	assign		___526_octave.Color ___526_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{247} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:248
#   octave.Position = voronoi_position(positionF2 + cellPosition);
	add		$tmp514 ___526_positionF2 ___526_cellPosition 	%line{248} %argrw{"wrr"}
	functioncall	$const49 1436 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:151
#   return vector4(0.0, 0.0, 0.0, coord);
	assign		___526_octave.Position.x $const1 	%line{151} %argrw{"wr"}
	assign		___526_octave.Position.y $const1 	%argrw{"wr"}
	assign		___526_octave.Position.z $const1 	%argrw{"wr"}
	assign		___526_octave.Position.w $tmp514 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:249
#   return octave;
	assign		___710_octave.Distance ___526_octave.Distance 	%line{249} %argrw{"wr"}
	assign		___710_octave.Color ___526_octave.Color 	%argrw{"wr"}
	assign		___710_octave.Position.x ___526_octave.Position.x 	%argrw{"wr"}
	assign		___710_octave.Position.y ___526_octave.Position.y 	%argrw{"wr"}
	assign		___710_octave.Position.z ___526_octave.Position.z 	%argrw{"wr"}
	assign		___710_octave.Position.w ___526_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	eq		$tmp515 params.feature $const50 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"wrr"}
	neq		$tmp516 $tmp515 $const11 	%argrw{"wrr"}
	if		$tmp516 1448 1448 	%argrw{"r"}
	neq		$tmp517 params.smoothness $const1 	%argrw{"wrr"}
	neq		$tmp518 $tmp517 $const11 	%argrw{"wrr"}
	assign		$tmp516 $tmp518 	%argrw{"wr"}
	if		$tmp516 1520 1574 	%argrw{"r"}
	mul		$tmp519 w ___708_scale 	%argrw{"wrr"}
	functioncall	$const51 1520 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:183
#   float cellPosition = floor(coord);
	floor		___523_cellPosition $tmp519 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{183} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:184
#   float localPosition = coord - cellPosition;
	sub		___523_localPosition $tmp519 ___523_cellPosition 	%line{184} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:186
#   float smoothDistance = 0.0;
	assign		___523_smoothDistance $const1 	%line{186} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:187
#   float smoothPosition = 0.0;
	assign		___523_smoothPosition $const1 	%line{187} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:188
#   vector3 smoothColor = vector3(0.0, 0.0, 0.0);
	assign		___523_smoothColor $const33 	%line{188} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:189
#   float h = -1.0;
	assign		___523_h $const14 	%line{189} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:190
#   for (int i = -2; i <= 2; i++) {
	for		$tmp521 1459 1461 1503 1505 	%line{190} %argrw{"r"}
	assign		___524_i $const52 	%argrw{"wr"}
	le		$tmp520 ___524_i $const35 	%argrw{"wrr"}
	neq		$tmp521 $tmp520 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:191
#     float cellOffset = i;
	assign		___525_cellOffset ___524_i 	%line{191} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:193
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	add		$tmp523 ___523_cellPosition ___525_cellOffset 	%line{193} %argrw{"wrr"}
	functioncall	$const13 1465 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp522 $tmp523 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:193
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	mul		$tmp524 $tmp522 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{193} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:192
#     float pointPosition = cellOffset +
	add		___525_pointPosition ___525_cellOffset $tmp524 	%line{192} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:194
#     float distanceToPoint = voronoi_distance(pointPosition, localPosition);
	functioncall	$const47 1470 	%line{194} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:51
#   return abs(a - b);
	sub		$tmp525 ___525_pointPosition ___523_localPosition 	%line{51} %argrw{"wrr"}
	abs		___525_distanceToPoint $tmp525 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:195
#     h = h == -1.0 ? 1.0 :
	eq		$tmp526 ___523_h $const14 	%line{195} %argrw{"wrr"}
	if		$tmp526 1473 1478 	%argrw{"r"}
	assign		___523_h $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:198
#                                0.5 + 0.5 * (smoothDistance - distanceToPoint) / params.smoothness);
	sub		$tmp527 ___523_smoothDistance ___525_distanceToPoint 	%line{198} %argrw{"wrr"}
	mul		$tmp528 $const6 $tmp527 	%argrw{"wrr"}
	div		$tmp529 $tmp528 params.smoothness 	%argrw{"wrr"}
	add		$tmp530 $const6 $tmp529 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:196
#                     smoothstep(0.0,
	smoothstep	___523_h $const1 $const4 $tmp530 	%line{196} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:199
#     float correctionFactor = params.smoothness * h * (1.0 - h);
	mul		$tmp531 params.smoothness ___523_h 	%line{199} %argrw{"wrr"}
	sub		$tmp532 $const4 ___523_h 	%argrw{"wrr"}
	mul		___525_correctionFactor $tmp531 $tmp532 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:200
#     smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp533 ___523_smoothDistance ___525_distanceToPoint ___523_h 	%line{200} %argrw{"wrrr"}
	sub		___523_smoothDistance $tmp533 ___525_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:201
#     correctionFactor /= 1.0 + 3.0 * params.smoothness;
	mul		$tmp534 $const53 params.smoothness 	%line{201} %argrw{"wrr"}
	add		$tmp535 $const4 $tmp534 	%argrw{"wrr"}
	div		___525_correctionFactor ___525_correctionFactor $tmp535 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:202
#     color cellColor = hash_float_to_color(cellPosition + cellOffset);
	add		$tmp536 ___523_cellPosition ___525_cellOffset 	%line{202} %argrw{"wrr"}
	functioncall	$const48 1499 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:59
#   return color(hash_float_to_float(k),
	functioncall	$const13 1490 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{59} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp537 $tmp536 	%line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:60
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp539.x $tmp536 	%line{60} %argrw{"wr"}
	assign		$tmp539.y $const4 	%argrw{"wr"}
	functioncall	$const24 1494 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp538 $tmp539.x $tmp539.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:61
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp541.x $tmp536 	%line{61} %argrw{"wr"}
	assign		$tmp541.y $const5 	%argrw{"wr"}
	functioncall	$const24 1498 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp540 $tmp541.x $tmp541.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:59
#   return color(hash_float_to_float(k),
	color		___525_cellColor $tmp537 $tmp538 $tmp540 	%line{59} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:203
#     smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp542 ___523_smoothColor ___525_cellColor ___523_h 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{203} %argrw{"wrrr"}
	sub		___523_smoothColor $tmp542 ___525_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:204
#     smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	mix		$tmp543 ___523_smoothPosition ___525_pointPosition ___523_h 	%line{204} %argrw{"wrrr"}
	sub		___523_smoothPosition $tmp543 ___525_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:190
#   for (int i = -2; i <= 2; i++) {
	assign		$tmp544 ___524_i 	%line{190} %argrw{"wr"}
	add		___524_i ___524_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:208
#   octave.Distance = smoothDistance;
	assign		___523_octave.Distance ___523_smoothDistance 	%line{208} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:209
#   octave.Color = smoothColor;
	assign		___523_octave.Color ___523_smoothColor 	%line{209} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:210
#   octave.Position = voronoi_position(cellPosition + smoothPosition);
	add		$tmp545 ___523_cellPosition ___523_smoothPosition 	%line{210} %argrw{"wrr"}
	functioncall	$const49 1513 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:151
#   return vector4(0.0, 0.0, 0.0, coord);
	assign		___523_octave.Position.x $const1 	%line{151} %argrw{"wr"}
	assign		___523_octave.Position.y $const1 	%argrw{"wr"}
	assign		___523_octave.Position.z $const1 	%argrw{"wr"}
	assign		___523_octave.Position.w $tmp545 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:211
#   return octave;
	assign		___710_octave.Distance ___523_octave.Distance 	%line{211} %argrw{"wr"}
	assign		___710_octave.Color ___523_octave.Color 	%argrw{"wr"}
	assign		___710_octave.Position.x ___523_octave.Position.x 	%argrw{"wr"}
	assign		___710_octave.Position.y ___523_octave.Position.y 	%argrw{"wr"}
	assign		___710_octave.Position.z ___523_octave.Position.z 	%argrw{"wr"}
	assign		___710_octave.Position.w ___523_octave.Position.w 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	mul		$tmp546 w ___708_scale 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"wrr"}
	functioncall	$const54 1574 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:156
#   float cellPosition = floor(coord);
	floor		___519_cellPosition $tmp546 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{156} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:157
#   float localPosition = coord - cellPosition;
	sub		___519_localPosition $tmp546 ___519_cellPosition 	%line{157} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:159
#   float minDistance = FLT_MAX;
	assign		___519_minDistance $const20 	%line{159} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:160
#   float targetOffset = 0.0;
	assign		___519_targetOffset $const1 	%line{160} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:161
#   float targetPosition = 0.0;
	assign		___519_targetPosition $const1 	%line{161} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:162
#   for (int i = -1; i <= 1; i++) {
	for		$tmp548 1529 1531 1545 1547 	%line{162} %argrw{"r"}
	assign		___520_i $const21 	%argrw{"wr"}
	le		$tmp547 ___520_i $const15 	%argrw{"wrr"}
	neq		$tmp548 $tmp547 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:163
#     float cellOffset = i;
	assign		___521_cellOffset ___520_i 	%line{163} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:165
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	add		$tmp550 ___519_cellPosition ___521_cellOffset 	%line{165} %argrw{"wrr"}
	functioncall	$const13 1535 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp549 $tmp550 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:165
#                           hash_float_to_float(cellPosition + cellOffset) * params.randomness;
	mul		$tmp551 $tmp549 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{165} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:164
#     float pointPosition = cellOffset +
	add		___521_pointPosition ___521_cellOffset $tmp551 	%line{164} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:166
#     float distanceToPoint = voronoi_distance(pointPosition, localPosition);
	functioncall	$const47 1540 	%line{166} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:51
#   return abs(a - b);
	sub		$tmp552 ___521_pointPosition ___519_localPosition 	%line{51} %argrw{"wrr"}
	abs		___521_distanceToPoint $tmp552 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:167
#     if (distanceToPoint < minDistance) {
	lt		$tmp553 ___521_distanceToPoint ___519_minDistance 	%line{167} %argrw{"wrr"}
	if		$tmp553 1545 1545 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:168
#       targetOffset = cellOffset;
	assign		___519_targetOffset ___521_cellOffset 	%line{168} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:169
#       minDistance = distanceToPoint;
	assign		___519_minDistance ___521_distanceToPoint 	%line{169} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:170
#       targetPosition = pointPosition;
	assign		___519_targetPosition ___521_pointPosition 	%line{170} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:162
#   for (int i = -1; i <= 1; i++) {
	assign		$tmp554 ___520_i 	%line{162} %argrw{"wr"}
	add		___520_i ___520_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:175
#   octave.Distance = minDistance;
	assign		___519_octave.Distance ___519_minDistance 	%line{175} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:176
#   octave.Color = hash_float_to_color(cellPosition + targetOffset);
	add		$tmp555 ___519_cellPosition ___519_targetOffset 	%line{176} %argrw{"wrr"}
	functioncall	$const48 1561 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:59
#   return color(hash_float_to_float(k),
	functioncall	$const13 1552 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{59} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:15
#   return hashnoise(k);
	hashnoise	$tmp556 $tmp555 	%line{15} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:60
#                hash_vector2_to_float(vector2(k, 1.0)),
	assign		$tmp558.x $tmp555 	%line{60} %argrw{"wr"}
	assign		$tmp558.y $const4 	%argrw{"wr"}
	functioncall	$const24 1556 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp557 $tmp558.x $tmp558.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:61
#                hash_vector2_to_float(vector2(k, 2.0)));
	assign		$tmp560.x $tmp555 	%line{61} %argrw{"wr"}
	assign		$tmp560.y $const5 	%argrw{"wr"}
	functioncall	$const24 1560 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp559 $tmp560.x $tmp560.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:59
#   return color(hash_float_to_float(k),
	color		___519_octave.Color $tmp556 $tmp557 $tmp559 	%line{59} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:176
#   octave.Color = hash_float_to_color(cellPosition + targetOffset);
	assign		___519_octave.Color ___519_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{176} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:177
#   octave.Position = voronoi_position(targetPosition + cellPosition);
	add		$tmp561 ___519_targetPosition ___519_cellPosition 	%line{177} %argrw{"wrr"}
	functioncall	$const49 1568 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:151
#   return vector4(0.0, 0.0, 0.0, coord);
	assign		___519_octave.Position.x $const1 	%line{151} %argrw{"wr"}
	assign		___519_octave.Position.y $const1 	%argrw{"wr"}
	assign		___519_octave.Position.z $const1 	%argrw{"wr"}
	assign		___519_octave.Position.w $tmp561 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:178
#   return octave;
	assign		___710_octave.Distance ___519_octave.Distance 	%line{178} %argrw{"wr"}
	assign		___710_octave.Color ___519_octave.Color 	%argrw{"wr"}
	assign		___710_octave.Position.x ___519_octave.Position.x 	%argrw{"wr"}
	assign		___710_octave.Position.y ___519_octave.Position.y 	%argrw{"wr"}
	assign		___710_octave.Position.z ___519_octave.Position.z 	%argrw{"wr"}
	assign		___710_octave.Position.w ___519_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	if		___708_zero_input 1583 1645 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"r"}
	assign		___708_max_amplitude $const4 	%argrw{"wr"}
	assign		___708_Output.Distance ___710_octave.Distance 	%argrw{"wr"}
	assign		___708_Output.Color ___710_octave.Color 	%argrw{"wr"}
	assign		___708_Output.Position.x ___710_octave.Position.x 	%argrw{"wr"}
	assign		___708_Output.Position.y ___710_octave.Position.y 	%argrw{"wr"}
	assign		___708_Output.Position.z ___710_octave.Position.z 	%argrw{"wr"}
	assign		___708_Output.Position.w ___710_octave.Position.w 	%argrw{"wr"}
	break
	le		$tmp562 ___709_i params.detail 	%argrw{"wrr"}
	if		$tmp562 1610 1645 	%argrw{"r"}
	add		___708_max_amplitude ___708_max_amplitude ___708_amplitude 	%argrw{"wrr"}
	mul		$tmp563 ___710_octave.Distance ___708_amplitude 	%argrw{"wrr"}
	add		___708_Output.Distance ___708_Output.Distance $tmp563 	%argrw{"wrr"}
	assign		___708_Output.Distance ___708_Output.Distance 	%argrw{"wr"}
	mul		$tmp564 ___710_octave.Color ___708_amplitude 	%argrw{"wrr"}
	add		___708_Output.Color ___708_Output.Color $tmp564 	%argrw{"wrr"}
	assign		___708_Output.Color ___708_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 1603 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___708_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp566.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp566.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp566.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp566.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1603 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp565.x ___710_octave.Position.x $tmp566.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp565.y ___710_octave.Position.y $tmp566.y 	%argrw{"wrr"}
	mul		$tmp565.z ___710_octave.Position.z $tmp566.z 	%argrw{"wrr"}
	mul		$tmp565.w ___710_octave.Position.w $tmp566.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	functioncall	$const55 1608 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___708_Output.Position.x ___708_Output.Position.x $tmp565.x ___708_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___708_Output.Position.y ___708_Output.Position.y $tmp565.y ___708_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___708_Output.Position.z ___708_Output.Position.z $tmp565.z ___708_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___708_Output.Position.w ___708_Output.Position.w $tmp565.w ___708_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	mul		___708_scale ___708_scale params.lacunarity 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"wrr"}
	mul		___708_amplitude ___708_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp567 params.detail 	%argrw{"wr"}
	sub		___716_remainder params.detail $tmp567 	%argrw{"wrr"}
	neq		$tmp568 ___716_remainder $const1 	%argrw{"wrr"}
	if		$tmp568 1645 1645 	%argrw{"r"}
	add		$tmp569 ___708_max_amplitude ___708_amplitude 	%argrw{"wrr"}
	mix		___708_max_amplitude ___708_max_amplitude $tmp569 ___716_remainder 	%argrw{"wrrr"}
	mul		$tmp570 ___710_octave.Distance ___708_amplitude 	%argrw{"wrr"}
	add		$tmp571 ___708_Output.Distance $tmp570 	%argrw{"wrr"}
	mix		___708_Output.Distance ___708_Output.Distance $tmp571 ___716_remainder 	%argrw{"wrrr"}
	assign		___708_Output.Distance ___708_Output.Distance 	%argrw{"wr"}
	mul		$tmp572 ___710_octave.Color ___708_amplitude 	%argrw{"wrr"}
	add		$tmp573 ___708_Output.Color $tmp572 	%argrw{"wrr"}
	mix		___708_Output.Color ___708_Output.Color $tmp573 ___716_remainder 	%argrw{"wrrr"}
	assign		___708_Output.Color ___708_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 1635 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___708_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp576.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp576.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp576.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp576.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1635 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp575.x ___710_octave.Position.x $tmp576.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp575.y ___710_octave.Position.y $tmp576.y 	%argrw{"wrr"}
	mul		$tmp575.z ___710_octave.Position.z $tmp576.z 	%argrw{"wrr"}
	mul		$tmp575.w ___710_octave.Position.w $tmp576.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	functioncall	$const55 1640 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		$tmp574.x ___708_Output.Position.x $tmp575.x ___708_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		$tmp574.y ___708_Output.Position.y $tmp575.y ___708_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		$tmp574.z ___708_Output.Position.z $tmp575.z ___708_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		$tmp574.w ___708_Output.Position.w $tmp575.w ___708_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	functioncall	$const55 1645 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___708_Output.Position.x ___708_Output.Position.x $tmp574.x ___716_remainder 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___708_Output.Position.y ___708_Output.Position.y $tmp574.y ___716_remainder 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___708_Output.Position.z ___708_Output.Position.z $tmp574.z ___716_remainder 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___708_Output.Position.w ___708_Output.Position.w $tmp574.w ___716_remainder 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	add		___709_i ___709_i $const15 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"wrr"}
	if		params.normalize 1652 1652 	%argrw{"r"}
	mul		$tmp577 ___708_max_amplitude params.max_distance 	%argrw{"wrr"}
	div		___708_Output.Distance ___708_Output.Distance $tmp577 	%argrw{"wrr"}
	assign		___708_Output.Distance ___708_Output.Distance 	%argrw{"wr"}
	div		___708_Output.Color ___708_Output.Color ___708_max_amplitude 	%argrw{"wrr"}
	assign		___708_Output.Color ___708_Output.Color 	%argrw{"wr"}
	functioncall	$const56 1670 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:125
#   return vector4((b != 0.0) ? a.x / b : 0.0,
	neq		$tmp578 params.scale $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{125} %argrw{"wrr"}
	if		$tmp578 1656 1657 	%argrw{"r"}
	div		___708_Output.Position.x ___708_Output.Position.x params.scale 	%argrw{"wrr"}
	assign		___708_Output.Position.x $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:126
#                  (b != 0.0) ? a.y / b : 0.0,
	neq		$tmp579 params.scale $const1 	%line{126} %argrw{"wrr"}
	if		$tmp579 1660 1661 	%argrw{"r"}
	div		___708_Output.Position.y ___708_Output.Position.y params.scale 	%argrw{"wrr"}
	assign		___708_Output.Position.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:127
#                  (b != 0.0) ? a.z / b : 0.0,
	neq		$tmp580 params.scale $const1 	%line{127} %argrw{"wrr"}
	if		$tmp580 1664 1665 	%argrw{"r"}
	div		___708_Output.Position.z ___708_Output.Position.z params.scale 	%argrw{"wrr"}
	assign		___708_Output.Position.z $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:128
#                  (b != 0.0) ? a.w / b : 0.0);
	neq		$tmp581 params.scale $const1 	%line{128} %argrw{"wrr"}
	if		$tmp581 1668 1669 	%argrw{"r"}
	div		___708_Output.Position.w ___708_Output.Position.w params.scale 	%argrw{"wrr"}
	assign		___708_Output.Position.w $const1 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:121
# FRACTAL_VORONOI_X_FX(float)
	assign		___797_Output.Distance ___708_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{121} %argrw{"wr"}
	assign		___797_Output.Color ___708_Output.Color 	%argrw{"wr"}
	assign		___797_Output.Position.x ___708_Output.Position.x 	%argrw{"wr"}
	assign		___797_Output.Position.y ___708_Output.Position.y 	%argrw{"wr"}
	assign		___797_Output.Position.z ___708_Output.Position.z 	%argrw{"wr"}
	assign		___797_Output.Position.w ___708_Output.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:97
#       Distance = Output.Distance;
	assign		Distance ___797_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{97} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:98
#       Color = Output.Color;
	assign		Color ___797_Output.Color 	%line{98} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:99
#       WOut = Output.Position.w;
	assign		WOut ___797_Output.Position.w 	%line{99} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:101
#     else if (dimensions == "2D") {
	eq		$tmp582 dimensions $const16 	%line{101} %argrw{"wrr"}
	if		$tmp582 2303 3954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:102
#       params.max_distance = voronoi_distance(vector2(0.0, 0.0),
	assign		$tmp584.x $const1 	%line{102} %argrw{"wr"}
	assign		$tmp584.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:103
#                                              vector2(0.5 + 0.5 * params.randomness,
	mul		$tmp586 $const6 params.randomness 	%line{103} %argrw{"wrr"}
	add		$tmp585.x $const6 $tmp586 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:104
#                                                      0.5 + 0.5 * params.randomness),
	mul		$tmp587 $const6 params.randomness 	%line{104} %argrw{"wrr"}
	add		$tmp585.y $const6 $tmp587 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:102
#       params.max_distance = voronoi_distance(vector2(0.0, 0.0),
	functioncall	$const47 1731 	%line{102} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:56
#   if (params.metric == "euclidean") {
	eq		$tmp588 params.metric $const57 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{56} %argrw{"wrr"}
	if		$tmp588 1701 1731 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	functioncall	$const42 1700 	%line{57} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1694 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp589.x $tmp584.x $tmp585.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp589.y $tmp584.y $tmp585.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 1700 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 1700 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp590 $tmp589.x $tmp589.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp591 $tmp589.y $tmp589.y 	%argrw{"wrr"}
	add		$tmp592 $tmp590 $tmp591 	%argrw{"wrr"}
	sqrt		$tmp583 $tmp592 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{57}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:59
#   else if (params.metric == "manhattan") {
	eq		$tmp593 params.metric $const58 	%line{59} %argrw{"wrr"}
	if		$tmp593 1709 1731 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:60
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp595 $tmp584.x $tmp585.x 	%line{60} %argrw{"wrr"}
	abs		$tmp594 $tmp595 	%argrw{"wr"}
	sub		$tmp597 $tmp584.y $tmp585.y 	%argrw{"wrr"}
	abs		$tmp596 $tmp597 	%argrw{"wr"}
	add		$tmp583 $tmp594 $tmp596 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:62
#   else if (params.metric == "chebychev") {
	eq		$tmp598 params.metric $const59 	%line{62} %argrw{"wrr"}
	if		$tmp598 1717 1731 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:63
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp600 $tmp584.x $tmp585.x 	%line{63} %argrw{"wrr"}
	abs		$tmp599 $tmp600 	%argrw{"wr"}
	sub		$tmp602 $tmp584.y $tmp585.y 	%argrw{"wrr"}
	abs		$tmp601 $tmp602 	%argrw{"wr"}
	max		$tmp583 $tmp599 $tmp601 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:65
#   else if (params.metric == "minkowski") {
	eq		$tmp603 params.metric $const60 	%line{65} %argrw{"wrr"}
	if		$tmp603 1729 1731 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	sub		$tmp606 $tmp584.x $tmp585.x 	%line{66} %argrw{"wrr"}
	abs		$tmp605 $tmp606 	%argrw{"wr"}
	pow		$tmp604 $tmp605 params.exponent 	%argrw{"wrr"}
	sub		$tmp609 $tmp584.y $tmp585.y 	%argrw{"wrr"}
	abs		$tmp608 $tmp609 	%argrw{"wr"}
	pow		$tmp607 $tmp608 params.exponent 	%argrw{"wrr"}
	add		$tmp610 $tmp604 $tmp607 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	div		$tmp611 $const4 params.exponent 	%line{67} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	pow		$tmp583 $tmp610 $tmp611 	%line{66} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	return	%line{67}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:70
#     return 0.0;
	assign		$tmp583 $const1 	%line{70} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:106
#                             ((params.feature == "f2") ? 2.0 : 1.0);
	eq		$tmp613 params.feature $const43 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{106} %argrw{"wrr"}
	if		$tmp613 1734 1735 	%argrw{"r"}
	assign		$tmp612 $const5 	%argrw{"wr"}
	assign		$tmp612 $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:105
#                                              params) *
	mul		params.max_distance $tmp583 $tmp612 	%line{105} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:102
#       params.max_distance = voronoi_distance(vector2(0.0, 0.0),
	assign		params.max_distance params.max_distance 	%line{102} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:107
#       Output = fractal_voronoi_x_fx(params, vector2(coord.x, coord.y));
	compref		$tmp614.x coord $const11 	%line{107} %argrw{"wrr"}
	compref		$tmp614.y coord $const15 	%argrw{"wrr"}
	functioncall	$const44 2300 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	assign		___727_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"wr"}
	assign		___727_max_amplitude $const1 	%argrw{"wr"}
	assign		___727_scale $const4 	%argrw{"wr"}
	assign		___727_Output.Distance $const1 	%argrw{"wr"}
	assign		___727_Output.Color $const45 	%argrw{"wr"}
	assign		___727_Output.Position.x $const1 	%argrw{"wr"}
	assign		___727_Output.Position.y $const1 	%argrw{"wr"}
	assign		___727_Output.Position.z $const1 	%argrw{"wr"}
	assign		___727_Output.Position.w $const1 	%argrw{"wr"}
	eq		$tmp615 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp616 $tmp615 $const11 	%argrw{"wrr"}
	if		$tmp616 1752 1755 	%argrw{"r"}
	eq		$tmp617 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp618 $tmp617 $const11 	%argrw{"wrr"}
	assign		$tmp616 $tmp618 	%argrw{"wr"}
	assign		___727_zero_input $tmp616 	%argrw{"wr"}
	for		$tmp621 1758 1761 2269 2270 	%argrw{"r"}
	assign		___728_i $const11 	%argrw{"wr"}
	ceil		$tmp619 params.detail 	%argrw{"wr"}
	le		$tmp620 ___728_i $tmp619 	%argrw{"wrr"}
	neq		$tmp621 $tmp620 $const11 	%argrw{"wrr"}
	eq		$tmp622 params.feature $const43 	%argrw{"wrr"}
	if		$tmp622 1910 2198 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1769 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp624.x ___727_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp624.y ___727_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1769 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp623.x $tmp614.x $tmp624.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp623.y $tmp614.y $tmp624.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	functioncall	$const46 1910 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:378
#   vector2 cellPosition = floor(coord);
	functioncall	$const18 1773 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{378} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___552_cellPosition.x $tmp623.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{157} %argrw{"wr"}
	floor		___552_cellPosition.y $tmp623.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1776 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___552_localPosition.x $tmp623.x ___552_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___552_localPosition.y $tmp623.y ___552_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:381
#   float distanceF1 = FLT_MAX;
	assign		___552_distanceF1 $const20 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{381} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:382
#   float distanceF2 = FLT_MAX;
	assign		___552_distanceF2 $const20 	%line{382} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:383
#   vector2 offsetF1 = vector2(0.0, 0.0);
	assign		___552_offsetF1.x $const1 	%line{383} %argrw{"wr"}
	assign		___552_offsetF1.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:384
#   vector2 positionF1 = vector2(0.0, 0.0);
	assign		___552_positionF1.x $const1 	%line{384} %argrw{"wr"}
	assign		___552_positionF1.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:385
#   vector2 offsetF2 = vector2(0.0, 0.0);
	assign		___552_offsetF2.x $const1 	%line{385} %argrw{"wr"}
	assign		___552_offsetF2.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:386
#   vector2 positionF2 = vector2(0.0, 0.0);
	assign		___552_positionF2.x $const1 	%line{386} %argrw{"wr"}
	assign		___552_positionF2.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:387
#   for (int j = -1; j <= 1; j++) {
	for		$tmp626 1788 1790 1879 1881 	%line{387} %argrw{"r"}
	assign		___553_j $const21 	%argrw{"wr"}
	le		$tmp625 ___553_j $const15 	%argrw{"wrr"}
	neq		$tmp626 $tmp625 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:388
#     for (int i = -1; i <= 1; i++) {
	for		$tmp628 1792 1794 1877 1879 	%line{388} %argrw{"r"}
	assign		___555_i $const21 	%argrw{"wr"}
	le		$tmp627 ___555_i $const15 	%argrw{"wrr"}
	neq		$tmp628 $tmp627 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:389
#       vector2 cellOffset = vector2(i, j);
	assign		___556_cellOffset.x ___555_i 	%line{389} %argrw{"wr"}
	assign		___556_cellOffset.y ___553_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1799 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp631.x ___552_cellPosition.x ___556_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp631.y ___552_cellPosition.y ___556_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:390
#       vector2 pointPosition = cellOffset + hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 1805 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{390} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 1802 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp630.x $tmp631.x $tmp631.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp632 $tmp631.x $tmp631.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 1805 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp630.y $tmp632 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1811 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp633.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp633.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1811 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp629.x $tmp630.x $tmp633.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp629.y $tmp630.y $tmp633.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1814 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___556_pointPosition.x ___556_cellOffset.x $tmp629.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___556_pointPosition.y ___556_cellOffset.y $tmp629.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:392
#       float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 1858 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{392} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:56
#   if (params.metric == "euclidean") {
	eq		$tmp634 params.metric $const57 	%line{56} %argrw{"wrr"}
	if		$tmp634 1828 1858 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	functioncall	$const42 1827 	%line{57} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1821 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp635.x ___556_pointPosition.x ___552_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp635.y ___556_pointPosition.y ___552_localPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 1827 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 1827 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp636 $tmp635.x $tmp635.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp637 $tmp635.y $tmp635.y 	%argrw{"wrr"}
	add		$tmp638 $tmp636 $tmp637 	%argrw{"wrr"}
	sqrt		___556_distanceToPoint $tmp638 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{57}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:59
#   else if (params.metric == "manhattan") {
	eq		$tmp639 params.metric $const58 	%line{59} %argrw{"wrr"}
	if		$tmp639 1836 1858 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:60
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp641 ___556_pointPosition.x ___552_localPosition.x 	%line{60} %argrw{"wrr"}
	abs		$tmp640 $tmp641 	%argrw{"wr"}
	sub		$tmp643 ___556_pointPosition.y ___552_localPosition.y 	%argrw{"wrr"}
	abs		$tmp642 $tmp643 	%argrw{"wr"}
	add		___556_distanceToPoint $tmp640 $tmp642 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:62
#   else if (params.metric == "chebychev") {
	eq		$tmp644 params.metric $const59 	%line{62} %argrw{"wrr"}
	if		$tmp644 1844 1858 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:63
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp646 ___556_pointPosition.x ___552_localPosition.x 	%line{63} %argrw{"wrr"}
	abs		$tmp645 $tmp646 	%argrw{"wr"}
	sub		$tmp648 ___556_pointPosition.y ___552_localPosition.y 	%argrw{"wrr"}
	abs		$tmp647 $tmp648 	%argrw{"wr"}
	max		___556_distanceToPoint $tmp645 $tmp647 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:65
#   else if (params.metric == "minkowski") {
	eq		$tmp649 params.metric $const60 	%line{65} %argrw{"wrr"}
	if		$tmp649 1856 1858 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	sub		$tmp652 ___556_pointPosition.x ___552_localPosition.x 	%line{66} %argrw{"wrr"}
	abs		$tmp651 $tmp652 	%argrw{"wr"}
	pow		$tmp650 $tmp651 params.exponent 	%argrw{"wrr"}
	sub		$tmp655 ___556_pointPosition.y ___552_localPosition.y 	%argrw{"wrr"}
	abs		$tmp654 $tmp655 	%argrw{"wr"}
	pow		$tmp653 $tmp654 params.exponent 	%argrw{"wrr"}
	add		$tmp656 $tmp650 $tmp653 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	div		$tmp657 $const4 params.exponent 	%line{67} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	pow		___556_distanceToPoint $tmp656 $tmp657 	%line{66} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	return	%line{67}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:70
#     return 0.0;
	assign		___556_distanceToPoint $const1 	%line{70} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:393
#       if (distanceToPoint < distanceF1) {
	lt		$tmp658 ___556_distanceToPoint ___552_distanceF1 	%line{393} %argrw{"wrr"}
	if		$tmp658 1870 1877 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:394
#         distanceF2 = distanceF1;
	assign		___552_distanceF2 ___552_distanceF1 	%line{394} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:395
#         distanceF1 = distanceToPoint;
	assign		___552_distanceF1 ___556_distanceToPoint 	%line{395} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:396
#         offsetF2 = offsetF1;
	assign		___552_offsetF2.x ___552_offsetF1.x 	%line{396} %argrw{"wr"}
	assign		___552_offsetF2.y ___552_offsetF1.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:397
#         offsetF1 = cellOffset;
	assign		___552_offsetF1.x ___556_cellOffset.x 	%line{397} %argrw{"wr"}
	assign		___552_offsetF1.y ___556_cellOffset.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:398
#         positionF2 = positionF1;
	assign		___552_positionF2.x ___552_positionF1.x 	%line{398} %argrw{"wr"}
	assign		___552_positionF2.y ___552_positionF1.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:399
#         positionF1 = pointPosition;
	assign		___552_positionF1.x ___556_pointPosition.x 	%line{399} %argrw{"wr"}
	assign		___552_positionF1.y ___556_pointPosition.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:401
#       else if (distanceToPoint < distanceF2) {
	lt		$tmp659 ___556_distanceToPoint ___552_distanceF2 	%line{401} %argrw{"wrr"}
	if		$tmp659 1877 1877 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:402
#         distanceF2 = distanceToPoint;
	assign		___552_distanceF2 ___556_distanceToPoint 	%line{402} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:403
#         offsetF2 = cellOffset;
	assign		___552_offsetF2.x ___556_cellOffset.x 	%line{403} %argrw{"wr"}
	assign		___552_offsetF2.y ___556_cellOffset.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:404
#         positionF2 = pointPosition;
	assign		___552_positionF2.x ___556_pointPosition.x 	%line{404} %argrw{"wr"}
	assign		___552_positionF2.y ___556_pointPosition.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:388
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp660 ___555_i 	%line{388} %argrw{"wr"}
	add		___555_i ___555_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:387
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp661 ___553_j 	%line{387} %argrw{"wr"}
	add		___553_j ___553_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:410
#   octave.Distance = distanceF2;
	assign		___552_octave.Distance ___552_distanceF2 	%line{410} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1885 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp662.x ___552_cellPosition.x ___552_offsetF2.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp662.y ___552_cellPosition.y ___552_offsetF2.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:411
#   octave.Color = hash_vector2_to_color(cellPosition + offsetF2);
	functioncall	$const61 1895 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{411} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:66
#   return color(hash_vector2_to_float(k),
	functioncall	$const24 1888 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{66} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp663 $tmp662.x $tmp662.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:67
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp665 $tmp662.x $tmp662.y $const4 	%line{67} %argrw{"wrrr"}
	functioncall	$const25 1891 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp664 $tmp665 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:68
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp667 $tmp662.x $tmp662.y $const5 	%line{68} %argrw{"wrrr"}
	functioncall	$const25 1894 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp666 $tmp667 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:66
#   return color(hash_vector2_to_float(k),
	color		___552_octave.Color $tmp663 $tmp664 $tmp666 	%line{66} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:411
#   octave.Color = hash_vector2_to_color(cellPosition + offsetF2);
	assign		___552_octave.Color ___552_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{411} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1899 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp668.x ___552_positionF2.x ___552_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp668.y ___552_positionF2.y ___552_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:412
#   octave.Position = voronoi_position(positionF2 + cellPosition);
	functioncall	$const49 1904 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{412} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:309
#   return vector4(coord.x, coord.y, 0.0, 0.0);
	assign		___552_octave.Position.x $tmp668.x 	%line{309} %argrw{"wr"}
	assign		___552_octave.Position.y $tmp668.y 	%argrw{"wr"}
	assign		___552_octave.Position.z $const1 	%argrw{"wr"}
	assign		___552_octave.Position.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:413
#   return octave;
	assign		___729_octave.Distance ___552_octave.Distance 	%line{413} %argrw{"wr"}
	assign		___729_octave.Color ___552_octave.Color 	%argrw{"wr"}
	assign		___729_octave.Position.x ___552_octave.Position.x 	%argrw{"wr"}
	assign		___729_octave.Position.y ___552_octave.Position.y 	%argrw{"wr"}
	assign		___729_octave.Position.z ___552_octave.Position.z 	%argrw{"wr"}
	assign		___729_octave.Position.w ___552_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	eq		$tmp669 params.feature $const50 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"wrr"}
	neq		$tmp670 $tmp669 $const11 	%argrw{"wrr"}
	if		$tmp670 1916 1916 	%argrw{"r"}
	neq		$tmp671 params.smoothness $const1 	%argrw{"wrr"}
	neq		$tmp672 $tmp671 $const11 	%argrw{"wrr"}
	assign		$tmp670 $tmp672 	%argrw{"wr"}
	if		$tmp670 2068 2198 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1923 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp674.x ___727_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp674.y ___727_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1923 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp673.x $tmp614.x $tmp674.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp673.y $tmp614.y $tmp674.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	functioncall	$const51 2068 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:343
#   vector2 cellPosition = floor(coord);
	functioncall	$const18 1927 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{343} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___547_cellPosition.x $tmp673.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{157} %argrw{"wr"}
	floor		___547_cellPosition.y $tmp673.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1930 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___547_localPosition.x $tmp673.x ___547_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___547_localPosition.y $tmp673.y ___547_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:346
#   float smoothDistance = 0.0;
	assign		___547_smoothDistance $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{346} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:347
#   vector3 smoothColor = vector3(0.0, 0.0, 0.0);
	assign		___547_smoothColor $const33 	%line{347} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:348
#   vector2 smoothPosition = vector2(0.0, 0.0);
	assign		___547_smoothPosition.x $const1 	%line{348} %argrw{"wr"}
	assign		___547_smoothPosition.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:349
#   float h = -1.0;
	assign		___547_h $const14 	%line{349} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:350
#   for (int j = -2; j <= 2; j++) {
	for		$tmp676 1937 1939 2049 2051 	%line{350} %argrw{"r"}
	assign		___548_j $const52 	%argrw{"wr"}
	le		$tmp675 ___548_j $const35 	%argrw{"wrr"}
	neq		$tmp676 $tmp675 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:351
#     for (int i = -2; i <= 2; i++) {
	for		$tmp678 1941 1943 2047 2049 	%line{351} %argrw{"r"}
	assign		___550_i $const52 	%argrw{"wr"}
	le		$tmp677 ___550_i $const35 	%argrw{"wrr"}
	neq		$tmp678 $tmp677 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:352
#       vector2 cellOffset = vector2(i, j);
	assign		___551_cellOffset.x ___550_i 	%line{352} %argrw{"wr"}
	assign		___551_cellOffset.y ___548_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1948 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp681.x ___547_cellPosition.x ___551_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp681.y ___547_cellPosition.y ___551_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:353
#       vector2 pointPosition = cellOffset + hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 1954 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{353} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 1951 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp680.x $tmp681.x $tmp681.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp682 $tmp681.x $tmp681.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 1954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp680.y $tmp682 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1960 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp683.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp683.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 1960 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp679.x $tmp680.x $tmp683.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp679.y $tmp680.y $tmp683.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 1963 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___551_pointPosition.x ___551_cellOffset.x $tmp679.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___551_pointPosition.y ___551_cellOffset.y $tmp679.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:355
#       float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 2007 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{355} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:56
#   if (params.metric == "euclidean") {
	eq		$tmp684 params.metric $const57 	%line{56} %argrw{"wrr"}
	if		$tmp684 1977 2007 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	functioncall	$const42 1976 	%line{57} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 1970 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp685.x ___551_pointPosition.x ___547_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp685.y ___551_pointPosition.y ___547_localPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 1976 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 1976 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp686 $tmp685.x $tmp685.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp687 $tmp685.y $tmp685.y 	%argrw{"wrr"}
	add		$tmp688 $tmp686 $tmp687 	%argrw{"wrr"}
	sqrt		___551_distanceToPoint $tmp688 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{57}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:59
#   else if (params.metric == "manhattan") {
	eq		$tmp689 params.metric $const58 	%line{59} %argrw{"wrr"}
	if		$tmp689 1985 2007 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:60
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp691 ___551_pointPosition.x ___547_localPosition.x 	%line{60} %argrw{"wrr"}
	abs		$tmp690 $tmp691 	%argrw{"wr"}
	sub		$tmp693 ___551_pointPosition.y ___547_localPosition.y 	%argrw{"wrr"}
	abs		$tmp692 $tmp693 	%argrw{"wr"}
	add		___551_distanceToPoint $tmp690 $tmp692 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:62
#   else if (params.metric == "chebychev") {
	eq		$tmp694 params.metric $const59 	%line{62} %argrw{"wrr"}
	if		$tmp694 1993 2007 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:63
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp696 ___551_pointPosition.x ___547_localPosition.x 	%line{63} %argrw{"wrr"}
	abs		$tmp695 $tmp696 	%argrw{"wr"}
	sub		$tmp698 ___551_pointPosition.y ___547_localPosition.y 	%argrw{"wrr"}
	abs		$tmp697 $tmp698 	%argrw{"wr"}
	max		___551_distanceToPoint $tmp695 $tmp697 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:65
#   else if (params.metric == "minkowski") {
	eq		$tmp699 params.metric $const60 	%line{65} %argrw{"wrr"}
	if		$tmp699 2005 2007 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	sub		$tmp702 ___551_pointPosition.x ___547_localPosition.x 	%line{66} %argrw{"wrr"}
	abs		$tmp701 $tmp702 	%argrw{"wr"}
	pow		$tmp700 $tmp701 params.exponent 	%argrw{"wrr"}
	sub		$tmp705 ___551_pointPosition.y ___547_localPosition.y 	%argrw{"wrr"}
	abs		$tmp704 $tmp705 	%argrw{"wr"}
	pow		$tmp703 $tmp704 params.exponent 	%argrw{"wrr"}
	add		$tmp706 $tmp700 $tmp703 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	div		$tmp707 $const4 params.exponent 	%line{67} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	pow		___551_distanceToPoint $tmp706 $tmp707 	%line{66} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	return	%line{67}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:70
#     return 0.0;
	assign		___551_distanceToPoint $const1 	%line{70} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:356
#       h = h == -1.0 ?
	eq		$tmp708 ___547_h $const14 	%line{356} %argrw{"wrr"}
	if		$tmp708 2010 2015 	%argrw{"r"}
	assign		___547_h $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:359
#                   0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / params.smoothness);
	sub		$tmp709 ___547_smoothDistance ___551_distanceToPoint 	%line{359} %argrw{"wrr"}
	mul		$tmp710 $const6 $tmp709 	%argrw{"wrr"}
	div		$tmp711 $tmp710 params.smoothness 	%argrw{"wrr"}
	add		$tmp712 $const6 $tmp711 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:358
#               smoothstep(
	smoothstep	___547_h $const1 $const4 $tmp712 	%line{358} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:360
#       float correctionFactor = params.smoothness * h * (1.0 - h);
	mul		$tmp713 params.smoothness ___547_h 	%line{360} %argrw{"wrr"}
	sub		$tmp714 $const4 ___547_h 	%argrw{"wrr"}
	mul		___551_correctionFactor $tmp713 $tmp714 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:361
#       smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp715 ___547_smoothDistance ___551_distanceToPoint ___547_h 	%line{361} %argrw{"wrrr"}
	sub		___547_smoothDistance $tmp715 ___551_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:362
#       correctionFactor /= 1.0 + 3.0 * params.smoothness;
	mul		$tmp716 $const53 params.smoothness 	%line{362} %argrw{"wrr"}
	add		$tmp717 $const4 $tmp716 	%argrw{"wrr"}
	div		___551_correctionFactor ___551_correctionFactor $tmp717 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 2026 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp718.x ___547_cellPosition.x ___551_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp718.y ___547_cellPosition.y ___551_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:363
#       color cellColor = hash_vector2_to_color(cellPosition + cellOffset);
	functioncall	$const61 2036 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{363} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:66
#   return color(hash_vector2_to_float(k),
	functioncall	$const24 2029 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{66} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp719 $tmp718.x $tmp718.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:67
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp721 $tmp718.x $tmp718.y $const4 	%line{67} %argrw{"wrrr"}
	functioncall	$const25 2032 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp720 $tmp721 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:68
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp723 $tmp718.x $tmp718.y $const5 	%line{68} %argrw{"wrrr"}
	functioncall	$const25 2035 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp722 $tmp723 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:66
#   return color(hash_vector2_to_float(k),
	color		___551_cellColor $tmp719 $tmp720 $tmp722 	%line{66} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:364
#       smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp724 ___547_smoothColor ___551_cellColor ___547_h 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{364} %argrw{"wrrr"}
	sub		___547_smoothColor $tmp724 ___551_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:365
#       smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	functioncall	$const55 2041 	%line{365} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:182
#     return vector2 (mix(a.x, b.x, x), mix(a.y, b.y, x));
	mix		$tmp725.x ___547_smoothPosition.x ___551_pointPosition.x ___547_h 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{182} %argrw{"wrrr"}
	mix		$tmp725.y ___547_smoothPosition.y ___551_pointPosition.y ___547_h 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 2047 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:63
#     return a - vector2(b, b);
	assign		$tmp726.x ___551_correctionFactor 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{63} %argrw{"wr"}
	assign		$tmp726.y ___551_correctionFactor 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 2047 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___547_smoothPosition.x $tmp725.x $tmp726.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___547_smoothPosition.y $tmp725.y $tmp726.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:351
#     for (int i = -2; i <= 2; i++) {
	assign		$tmp727 ___550_i 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{351} %argrw{"wr"}
	add		___550_i ___550_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:350
#   for (int j = -2; j <= 2; j++) {
	assign		$tmp728 ___548_j 	%line{350} %argrw{"wr"}
	add		___548_j ___548_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:370
#   octave.Distance = smoothDistance;
	assign		___547_octave.Distance ___547_smoothDistance 	%line{370} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:371
#   octave.Color = smoothColor;
	assign		___547_octave.Color ___547_smoothColor 	%line{371} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 2056 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp729.x ___547_cellPosition.x ___547_smoothPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp729.y ___547_cellPosition.y ___547_smoothPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:372
#   octave.Position = voronoi_position(cellPosition + smoothPosition);
	functioncall	$const49 2061 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{372} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:309
#   return vector4(coord.x, coord.y, 0.0, 0.0);
	assign		___547_octave.Position.x $tmp729.x 	%line{309} %argrw{"wr"}
	assign		___547_octave.Position.y $tmp729.y 	%argrw{"wr"}
	assign		___547_octave.Position.z $const1 	%argrw{"wr"}
	assign		___547_octave.Position.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:373
#   return octave;
	assign		___729_octave.Distance ___547_octave.Distance 	%line{373} %argrw{"wr"}
	assign		___729_octave.Color ___547_octave.Color 	%argrw{"wr"}
	assign		___729_octave.Position.x ___547_octave.Position.x 	%argrw{"wr"}
	assign		___729_octave.Position.y ___547_octave.Position.y 	%argrw{"wr"}
	assign		___729_octave.Position.z ___547_octave.Position.z 	%argrw{"wr"}
	assign		___729_octave.Position.w ___547_octave.Position.w 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2074 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp731.x ___727_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp731.y ___727_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2074 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp730.x $tmp614.x $tmp731.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp730.y $tmp614.y $tmp731.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	functioncall	$const54 2198 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:314
#   vector2 cellPosition = floor(coord);
	functioncall	$const18 2078 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{314} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:157
#     return vector2 (floor(a.x), floor(a.y));
	floor		___541_cellPosition.x $tmp730.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{157} %argrw{"wr"}
	floor		___541_cellPosition.y $tmp730.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 2081 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		___541_localPosition.x $tmp730.x ___541_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		___541_localPosition.y $tmp730.y ___541_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:317
#   float minDistance = FLT_MAX;
	assign		___541_minDistance $const20 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{317} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:318
#   vector2 targetOffset = vector2(0.0, 0.0);
	assign		___541_targetOffset.x $const1 	%line{318} %argrw{"wr"}
	assign		___541_targetOffset.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:319
#   vector2 targetPosition = vector2(0.0, 0.0);
	assign		___541_targetPosition.x $const1 	%line{319} %argrw{"wr"}
	assign		___541_targetPosition.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:320
#   for (int j = -1; j <= 1; j++) {
	for		$tmp733 2088 2090 2167 2169 	%line{320} %argrw{"r"}
	assign		___542_j $const21 	%argrw{"wr"}
	le		$tmp732 ___542_j $const15 	%argrw{"wrr"}
	neq		$tmp733 $tmp732 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:321
#     for (int i = -1; i <= 1; i++) {
	for		$tmp735 2092 2094 2165 2167 	%line{321} %argrw{"r"}
	assign		___544_i $const21 	%argrw{"wr"}
	le		$tmp734 ___544_i $const15 	%argrw{"wrr"}
	neq		$tmp735 $tmp734 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:322
#       vector2 cellOffset = vector2(i, j);
	assign		___545_cellOffset.x ___544_i 	%line{322} %argrw{"wr"}
	assign		___545_cellOffset.y ___542_j 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 2099 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp738.x ___541_cellPosition.x ___545_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp738.y ___541_cellPosition.y ___545_cellOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:323
#       vector2 pointPosition = cellOffset + hash_vector2_to_vector2(cellPosition + cellOffset) *
	functioncall	$const23 2105 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{323} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	functioncall	$const24 2102 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{37} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp737.x $tmp738.x $tmp738.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:37
#   return vector2(hash_vector2_to_float(k), hash_vector3_to_float(vector3(k.x, k.y, 1.0)));
	point		$tmp739 $tmp738.x $tmp738.y $const4 	%line{37} %argrw{"wrrr"}
	functioncall	$const25 2105 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp737.y $tmp739 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2111 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp740.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp740.y params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2111 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp736.x $tmp737.x $tmp740.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp736.y $tmp737.y $tmp740.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 2114 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___545_pointPosition.x ___545_cellOffset.x $tmp736.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		___545_pointPosition.y ___545_cellOffset.y $tmp736.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:325
#       float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 2158 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{325} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:56
#   if (params.metric == "euclidean") {
	eq		$tmp741 params.metric $const57 	%line{56} %argrw{"wrr"}
	if		$tmp741 2128 2158 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	functioncall	$const42 2127 	%line{57} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 2121 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:53
#     return vector2(a.x - b.x, a.y - b.y);
	sub		$tmp742.x ___545_pointPosition.x ___541_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{53} %argrw{"wrr"}
	sub		$tmp742.y ___545_pointPosition.y ___541_localPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:41
#   return length(a - b);
	functioncall	$const30 2127 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{41} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:192
#     return hypot (a.x, a.y);
	functioncall	$const31 2127 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{192} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h:101
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	mul		$tmp743 $tmp742.x $tmp742.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{101} %argrw{"wrr"}
	mul		$tmp744 $tmp742.y $tmp742.y 	%argrw{"wrr"}
	add		$tmp745 $tmp743 $tmp744 	%argrw{"wrr"}
	sqrt		___545_distanceToPoint $tmp745 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:57
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{57}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:59
#   else if (params.metric == "manhattan") {
	eq		$tmp746 params.metric $const58 	%line{59} %argrw{"wrr"}
	if		$tmp746 2136 2158 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:60
#     return abs(a.x - b.x) + abs(a.y - b.y);
	sub		$tmp748 ___545_pointPosition.x ___541_localPosition.x 	%line{60} %argrw{"wrr"}
	abs		$tmp747 $tmp748 	%argrw{"wr"}
	sub		$tmp750 ___545_pointPosition.y ___541_localPosition.y 	%argrw{"wrr"}
	abs		$tmp749 $tmp750 	%argrw{"wr"}
	add		___545_distanceToPoint $tmp747 $tmp749 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:62
#   else if (params.metric == "chebychev") {
	eq		$tmp751 params.metric $const59 	%line{62} %argrw{"wrr"}
	if		$tmp751 2144 2158 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:63
#     return max(abs(a.x - b.x), abs(a.y - b.y));
	sub		$tmp753 ___545_pointPosition.x ___541_localPosition.x 	%line{63} %argrw{"wrr"}
	abs		$tmp752 $tmp753 	%argrw{"wr"}
	sub		$tmp755 ___545_pointPosition.y ___541_localPosition.y 	%argrw{"wrr"}
	abs		$tmp754 $tmp755 	%argrw{"wr"}
	max		___545_distanceToPoint $tmp752 $tmp754 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:65
#   else if (params.metric == "minkowski") {
	eq		$tmp756 params.metric $const60 	%line{65} %argrw{"wrr"}
	if		$tmp756 2156 2158 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	sub		$tmp759 ___545_pointPosition.x ___541_localPosition.x 	%line{66} %argrw{"wrr"}
	abs		$tmp758 $tmp759 	%argrw{"wr"}
	pow		$tmp757 $tmp758 params.exponent 	%argrw{"wrr"}
	sub		$tmp762 ___545_pointPosition.y ___541_localPosition.y 	%argrw{"wrr"}
	abs		$tmp761 $tmp762 	%argrw{"wr"}
	pow		$tmp760 $tmp761 params.exponent 	%argrw{"wrr"}
	add		$tmp763 $tmp757 $tmp760 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	div		$tmp764 $const4 params.exponent 	%line{67} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:66
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent),
	pow		___545_distanceToPoint $tmp763 $tmp764 	%line{66} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:67
#                1.0 / params.exponent);
	return	%line{67}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:70
#     return 0.0;
	assign		___545_distanceToPoint $const1 	%line{70} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:326
#       if (distanceToPoint < minDistance) {
	lt		$tmp765 ___545_distanceToPoint ___541_minDistance 	%line{326} %argrw{"wrr"}
	if		$tmp765 2165 2165 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:327
#         targetOffset = cellOffset;
	assign		___541_targetOffset.x ___545_cellOffset.x 	%line{327} %argrw{"wr"}
	assign		___541_targetOffset.y ___545_cellOffset.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:328
#         minDistance = distanceToPoint;
	assign		___541_minDistance ___545_distanceToPoint 	%line{328} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:329
#         targetPosition = pointPosition;
	assign		___541_targetPosition.x ___545_pointPosition.x 	%line{329} %argrw{"wr"}
	assign		___541_targetPosition.y ___545_pointPosition.y 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:321
#     for (int i = -1; i <= 1; i++) {
	assign		$tmp766 ___544_i 	%line{321} %argrw{"wr"}
	add		___544_i ___544_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:320
#   for (int j = -1; j <= 1; j++) {
	assign		$tmp767 ___542_j 	%line{320} %argrw{"wr"}
	add		___542_j ___542_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:335
#   octave.Distance = minDistance;
	assign		___541_octave.Distance ___541_minDistance 	%line{335} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 2173 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp768.x ___541_cellPosition.x ___541_targetOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp768.y ___541_cellPosition.y ___541_targetOffset.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:336
#   octave.Color = hash_vector2_to_color(cellPosition + targetOffset);
	functioncall	$const61 2183 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{336} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:66
#   return color(hash_vector2_to_float(k),
	functioncall	$const24 2176 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{66} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:20
#   return hashnoise(k.x, k.y);
	hashnoise	$tmp769 $tmp768.x $tmp768.y 	%line{20} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:67
#                hash_vector3_to_float(vector3(k.x, k.y, 1.0)),
	point		$tmp771 $tmp768.x $tmp768.y $const4 	%line{67} %argrw{"wrrr"}
	functioncall	$const25 2179 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp770 $tmp771 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:68
#                hash_vector3_to_float(vector3(k.x, k.y, 2.0)));
	point		$tmp773 $tmp768.x $tmp768.y $const5 	%line{68} %argrw{"wrrr"}
	functioncall	$const25 2182 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp772 $tmp773 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:66
#   return color(hash_vector2_to_float(k),
	color		___541_octave.Color $tmp769 $tmp770 $tmp772 	%line{66} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:336
#   octave.Color = hash_vector2_to_color(cellPosition + targetOffset);
	assign		___541_octave.Color ___541_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{336} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 2187 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp774.x ___541_targetPosition.x ___541_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp774.y ___541_targetPosition.y ___541_cellPosition.y 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:337
#   octave.Position = voronoi_position(targetPosition + cellPosition);
	functioncall	$const49 2192 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{337} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:309
#   return vector4(coord.x, coord.y, 0.0, 0.0);
	assign		___541_octave.Position.x $tmp774.x 	%line{309} %argrw{"wr"}
	assign		___541_octave.Position.y $tmp774.y 	%argrw{"wr"}
	assign		___541_octave.Position.z $const1 	%argrw{"wr"}
	assign		___541_octave.Position.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:338
#   return octave;
	assign		___729_octave.Distance ___541_octave.Distance 	%line{338} %argrw{"wr"}
	assign		___729_octave.Color ___541_octave.Color 	%argrw{"wr"}
	assign		___729_octave.Position.x ___541_octave.Position.x 	%argrw{"wr"}
	assign		___729_octave.Position.y ___541_octave.Position.y 	%argrw{"wr"}
	assign		___729_octave.Position.z ___541_octave.Position.z 	%argrw{"wr"}
	assign		___729_octave.Position.w ___541_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	if		___727_zero_input 2207 2269 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
	assign		___727_max_amplitude $const4 	%argrw{"wr"}
	assign		___727_Output.Distance ___729_octave.Distance 	%argrw{"wr"}
	assign		___727_Output.Color ___729_octave.Color 	%argrw{"wr"}
	assign		___727_Output.Position.x ___729_octave.Position.x 	%argrw{"wr"}
	assign		___727_Output.Position.y ___729_octave.Position.y 	%argrw{"wr"}
	assign		___727_Output.Position.z ___729_octave.Position.z 	%argrw{"wr"}
	assign		___727_Output.Position.w ___729_octave.Position.w 	%argrw{"wr"}
	break
	le		$tmp775 ___728_i params.detail 	%argrw{"wrr"}
	if		$tmp775 2234 2269 	%argrw{"r"}
	add		___727_max_amplitude ___727_max_amplitude ___727_amplitude 	%argrw{"wrr"}
	mul		$tmp776 ___729_octave.Distance ___727_amplitude 	%argrw{"wrr"}
	add		___727_Output.Distance ___727_Output.Distance $tmp776 	%argrw{"wrr"}
	assign		___727_Output.Distance ___727_Output.Distance 	%argrw{"wr"}
	mul		$tmp777 ___729_octave.Color ___727_amplitude 	%argrw{"wrr"}
	add		___727_Output.Color ___727_Output.Color $tmp777 	%argrw{"wrr"}
	assign		___727_Output.Color ___727_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 2227 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___727_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp779.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp779.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp779.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp779.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2227 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp778.x ___729_octave.Position.x $tmp779.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp778.y ___729_octave.Position.y $tmp779.y 	%argrw{"wrr"}
	mul		$tmp778.z ___729_octave.Position.z $tmp779.z 	%argrw{"wrr"}
	mul		$tmp778.w ___729_octave.Position.w $tmp779.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	functioncall	$const55 2232 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___727_Output.Position.x ___727_Output.Position.x $tmp778.x ___727_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___727_Output.Position.y ___727_Output.Position.y $tmp778.y ___727_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___727_Output.Position.z ___727_Output.Position.z $tmp778.z ___727_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___727_Output.Position.w ___727_Output.Position.w $tmp778.w ___727_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	mul		___727_scale ___727_scale params.lacunarity 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"wrr"}
	mul		___727_amplitude ___727_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp780 params.detail 	%argrw{"wr"}
	sub		___735_remainder params.detail $tmp780 	%argrw{"wrr"}
	neq		$tmp781 ___735_remainder $const1 	%argrw{"wrr"}
	if		$tmp781 2269 2269 	%argrw{"r"}
	add		$tmp782 ___727_max_amplitude ___727_amplitude 	%argrw{"wrr"}
	mix		___727_max_amplitude ___727_max_amplitude $tmp782 ___735_remainder 	%argrw{"wrrr"}
	mul		$tmp783 ___729_octave.Distance ___727_amplitude 	%argrw{"wrr"}
	add		$tmp784 ___727_Output.Distance $tmp783 	%argrw{"wrr"}
	mix		___727_Output.Distance ___727_Output.Distance $tmp784 ___735_remainder 	%argrw{"wrrr"}
	assign		___727_Output.Distance ___727_Output.Distance 	%argrw{"wr"}
	mul		$tmp785 ___729_octave.Color ___727_amplitude 	%argrw{"wrr"}
	add		$tmp786 ___727_Output.Color $tmp785 	%argrw{"wrr"}
	mix		___727_Output.Color ___727_Output.Color $tmp786 ___735_remainder 	%argrw{"wrrr"}
	assign		___727_Output.Color ___727_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 2259 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___727_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp789.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp789.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp789.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp789.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2259 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp788.x ___729_octave.Position.x $tmp789.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp788.y ___729_octave.Position.y $tmp789.y 	%argrw{"wrr"}
	mul		$tmp788.z ___729_octave.Position.z $tmp789.z 	%argrw{"wrr"}
	mul		$tmp788.w ___729_octave.Position.w $tmp789.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	functioncall	$const55 2264 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		$tmp787.x ___727_Output.Position.x $tmp788.x ___727_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		$tmp787.y ___727_Output.Position.y $tmp788.y ___727_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		$tmp787.z ___727_Output.Position.z $tmp788.z ___727_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		$tmp787.w ___727_Output.Position.w $tmp788.w ___727_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	functioncall	$const55 2269 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___727_Output.Position.x ___727_Output.Position.x $tmp787.x ___735_remainder 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___727_Output.Position.y ___727_Output.Position.y $tmp787.y ___735_remainder 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___727_Output.Position.z ___727_Output.Position.z $tmp787.z ___735_remainder 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___727_Output.Position.w ___727_Output.Position.w $tmp787.w ___735_remainder 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	add		___728_i ___728_i $const15 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"wrr"}
	if		params.normalize 2276 2276 	%argrw{"r"}
	mul		$tmp790 ___727_max_amplitude params.max_distance 	%argrw{"wrr"}
	div		___727_Output.Distance ___727_Output.Distance $tmp790 	%argrw{"wrr"}
	assign		___727_Output.Distance ___727_Output.Distance 	%argrw{"wr"}
	div		___727_Output.Color ___727_Output.Color ___727_max_amplitude 	%argrw{"wrr"}
	assign		___727_Output.Color ___727_Output.Color 	%argrw{"wr"}
	functioncall	$const56 2294 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:125
#   return vector4((b != 0.0) ? a.x / b : 0.0,
	neq		$tmp791 params.scale $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{125} %argrw{"wrr"}
	if		$tmp791 2280 2281 	%argrw{"r"}
	div		___727_Output.Position.x ___727_Output.Position.x params.scale 	%argrw{"wrr"}
	assign		___727_Output.Position.x $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:126
#                  (b != 0.0) ? a.y / b : 0.0,
	neq		$tmp792 params.scale $const1 	%line{126} %argrw{"wrr"}
	if		$tmp792 2284 2285 	%argrw{"r"}
	div		___727_Output.Position.y ___727_Output.Position.y params.scale 	%argrw{"wrr"}
	assign		___727_Output.Position.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:127
#                  (b != 0.0) ? a.z / b : 0.0,
	neq		$tmp793 params.scale $const1 	%line{127} %argrw{"wrr"}
	if		$tmp793 2288 2289 	%argrw{"r"}
	div		___727_Output.Position.z ___727_Output.Position.z params.scale 	%argrw{"wrr"}
	assign		___727_Output.Position.z $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:128
#                  (b != 0.0) ? a.w / b : 0.0);
	neq		$tmp794 params.scale $const1 	%line{128} %argrw{"wrr"}
	if		$tmp794 2292 2293 	%argrw{"r"}
	div		___727_Output.Position.w ___727_Output.Position.w params.scale 	%argrw{"wrr"}
	assign		___727_Output.Position.w $const1 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:127
# FRACTAL_VORONOI_X_FX(vector2)
	assign		___797_Output.Distance ___727_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{127} %argrw{"wr"}
	assign		___797_Output.Color ___727_Output.Color 	%argrw{"wr"}
	assign		___797_Output.Position.x ___727_Output.Position.x 	%argrw{"wr"}
	assign		___797_Output.Position.y ___727_Output.Position.y 	%argrw{"wr"}
	assign		___797_Output.Position.z ___727_Output.Position.z 	%argrw{"wr"}
	assign		___797_Output.Position.w ___727_Output.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:108
#       Distance = Output.Distance;
	assign		Distance ___797_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{108} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:109
#       Color = Output.Color;
	assign		Color ___797_Output.Color 	%line{109} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:110
#       Position = vector3(Output.Position.x, Output.Position.y, 0.0);
	point		Position ___797_Output.Position.x ___797_Output.Position.y $const1 	%line{110} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:112
#     else if (dimensions == "3D") {
	eq		$tmp795 dimensions $const32 	%line{112} %argrw{"wrr"}
	if		$tmp795 2998 3954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:114
#                                              vector3(0.5 + 0.5 * params.randomness,
	mul		$tmp799 $const6 params.randomness 	%line{114} %argrw{"wrr"}
	add		$tmp800 $const6 $tmp799 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:115
#                                                      0.5 + 0.5 * params.randomness,
	mul		$tmp801 $const6 params.randomness 	%line{115} %argrw{"wrr"}
	add		$tmp802 $const6 $tmp801 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:116
#                                                      0.5 + 0.5 * params.randomness),
	mul		$tmp803 $const6 params.randomness 	%line{116} %argrw{"wrr"}
	add		$tmp804 $const6 $tmp803 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:114
#                                              vector3(0.5 + 0.5 * params.randomness,
	point		$tmp798 $tmp800 $tmp802 $tmp804 	%line{114} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:113
#       params.max_distance = voronoi_distance(vector3(0.0, 0.0, 0.0),
	functioncall	$const47 2375 	%line{113} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:76
#   if (params.metric == "euclidean") {
	eq		$tmp805 params.metric $const57 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{76} %argrw{"wrr"}
	if		$tmp805 2317 2375 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:77
#     return distance(a, b);
	distance	$tmp796 $const33 $tmp798 	%line{77} %argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:79
#   else if (params.metric == "manhattan") {
	eq		$tmp806 params.metric $const58 	%line{79} %argrw{"wrr"}
	if		$tmp806 2334 2375 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:80
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp808 $const33 $const11 	%line{80} %argrw{"wrr"}
	compref		$tmp809 $tmp798 $const11 	%argrw{"wrr"}
	sub		$tmp810 $tmp808 $tmp809 	%argrw{"wrr"}
	abs		$tmp807 $tmp810 	%argrw{"wr"}
	compref		$tmp812 $const33 $const15 	%argrw{"wrr"}
	compref		$tmp813 $tmp798 $const15 	%argrw{"wrr"}
	sub		$tmp814 $tmp812 $tmp813 	%argrw{"wrr"}
	abs		$tmp811 $tmp814 	%argrw{"wr"}
	add		$tmp815 $tmp807 $tmp811 	%argrw{"wrr"}
	compref		$tmp817 $const33 $const35 	%argrw{"wrr"}
	compref		$tmp818 $tmp798 $const35 	%argrw{"wrr"}
	sub		$tmp819 $tmp817 $tmp818 	%argrw{"wrr"}
	abs		$tmp816 $tmp819 	%argrw{"wr"}
	add		$tmp796 $tmp815 $tmp816 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:82
#   else if (params.metric == "chebychev") {
	eq		$tmp820 params.metric $const59 	%line{82} %argrw{"wrr"}
	if		$tmp820 2351 2375 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:83
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp822 $const33 $const11 	%line{83} %argrw{"wrr"}
	compref		$tmp823 $tmp798 $const11 	%argrw{"wrr"}
	sub		$tmp824 $tmp822 $tmp823 	%argrw{"wrr"}
	abs		$tmp821 $tmp824 	%argrw{"wr"}
	compref		$tmp827 $const33 $const15 	%argrw{"wrr"}
	compref		$tmp828 $tmp798 $const15 	%argrw{"wrr"}
	sub		$tmp829 $tmp827 $tmp828 	%argrw{"wrr"}
	abs		$tmp826 $tmp829 	%argrw{"wr"}
	compref		$tmp831 $const33 $const35 	%argrw{"wrr"}
	compref		$tmp832 $tmp798 $const35 	%argrw{"wrr"}
	sub		$tmp833 $tmp831 $tmp832 	%argrw{"wrr"}
	abs		$tmp830 $tmp833 	%argrw{"wr"}
	max		$tmp825 $tmp826 $tmp830 	%argrw{"wrr"}
	max		$tmp796 $tmp821 $tmp825 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:85
#   else if (params.metric == "minkowski") {
	eq		$tmp834 params.metric $const60 	%line{85} %argrw{"wrr"}
	if		$tmp834 2373 2375 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	compref		$tmp837 $const33 $const11 	%line{86} %argrw{"wrr"}
	compref		$tmp838 $tmp798 $const11 	%argrw{"wrr"}
	sub		$tmp839 $tmp837 $tmp838 	%argrw{"wrr"}
	abs		$tmp836 $tmp839 	%argrw{"wr"}
	pow		$tmp835 $tmp836 params.exponent 	%argrw{"wrr"}
	compref		$tmp842 $const33 $const15 	%argrw{"wrr"}
	compref		$tmp843 $tmp798 $const15 	%argrw{"wrr"}
	sub		$tmp844 $tmp842 $tmp843 	%argrw{"wrr"}
	abs		$tmp841 $tmp844 	%argrw{"wr"}
	pow		$tmp840 $tmp841 params.exponent 	%argrw{"wrr"}
	add		$tmp845 $tmp835 $tmp840 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:87
#                    pow(abs(a[2] - b[2]), params.exponent),
	compref		$tmp848 $const33 $const35 	%line{87} %argrw{"wrr"}
	compref		$tmp849 $tmp798 $const35 	%argrw{"wrr"}
	sub		$tmp850 $tmp848 $tmp849 	%argrw{"wrr"}
	abs		$tmp847 $tmp850 	%argrw{"wr"}
	pow		$tmp846 $tmp847 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	add		$tmp851 $tmp845 $tmp846 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	div		$tmp852 $const4 params.exponent 	%line{88} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	pow		$tmp796 $tmp851 $tmp852 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	return	%line{88}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:91
#     return 0.0;
	assign		$tmp796 $const1 	%line{91} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:118
#                             ((params.feature == "f2") ? 2.0 : 1.0);
	eq		$tmp854 params.feature $const43 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{118} %argrw{"wrr"}
	if		$tmp854 2378 2379 	%argrw{"r"}
	assign		$tmp853 $const5 	%argrw{"wr"}
	assign		$tmp853 $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:117
#                                              params) *
	mul		params.max_distance $tmp796 $tmp853 	%line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:113
#       params.max_distance = voronoi_distance(vector3(0.0, 0.0, 0.0),
	assign		params.max_distance params.max_distance 	%line{113} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:119
#       Output = fractal_voronoi_x_fx(params, coord);
	functioncall	$const44 2995 	%line{119} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	assign		___746_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"wr"}
	assign		___746_max_amplitude $const1 	%argrw{"wr"}
	assign		___746_scale $const4 	%argrw{"wr"}
	assign		___746_Output.Distance $const1 	%argrw{"wr"}
	assign		___746_Output.Color $const45 	%argrw{"wr"}
	assign		___746_Output.Position.x $const1 	%argrw{"wr"}
	assign		___746_Output.Position.y $const1 	%argrw{"wr"}
	assign		___746_Output.Position.z $const1 	%argrw{"wr"}
	assign		___746_Output.Position.w $const1 	%argrw{"wr"}
	eq		$tmp855 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp856 $tmp855 $const11 	%argrw{"wrr"}
	if		$tmp856 2394 2397 	%argrw{"r"}
	eq		$tmp857 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp858 $tmp857 $const11 	%argrw{"wrr"}
	assign		$tmp856 $tmp858 	%argrw{"wr"}
	assign		___746_zero_input $tmp856 	%argrw{"wr"}
	for		$tmp861 2400 2403 2964 2965 	%argrw{"r"}
	assign		___747_i $const11 	%argrw{"wr"}
	ceil		$tmp859 params.detail 	%argrw{"wr"}
	le		$tmp860 ___747_i $tmp859 	%argrw{"wrr"}
	neq		$tmp861 $tmp860 $const11 	%argrw{"wrr"}
	eq		$tmp862 params.feature $const43 	%argrw{"wrr"}
	if		$tmp862 2567 2893 	%argrw{"r"}
	mul		$tmp863 coord ___746_scale 	%argrw{"wrr"}
	functioncall	$const46 2567 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:578
#   vector3 cellPosition = floor(coord);
	floor		___598_cellPosition $tmp863 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{578} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:579
#   vector3 localPosition = coord - cellPosition;
	sub		___598_localPosition $tmp863 ___598_cellPosition 	%line{579} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:581
#   float distanceF1 = FLT_MAX;
	assign		___598_distanceF1 $const20 	%line{581} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:582
#   float distanceF2 = FLT_MAX;
	assign		___598_distanceF2 $const20 	%line{582} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:583
#   vector3 offsetF1 = vector3(0.0, 0.0, 0.0);
	assign		___598_offsetF1 $const33 	%line{583} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:584
#   vector3 positionF1 = vector3(0.0, 0.0, 0.0);
	assign		___598_positionF1 $const33 	%line{584} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:585
#   vector3 offsetF2 = vector3(0.0, 0.0, 0.0);
	assign		___598_offsetF2 $const33 	%line{585} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:586
#   vector3 positionF2 = vector3(0.0, 0.0, 0.0);
	assign		___598_positionF2 $const33 	%line{586} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:587
#   for (int k = -1; k <= 1; k++) {
	for		$tmp865 2417 2419 2532 2534 	%line{587} %argrw{"r"}
	assign		___599_k $const21 	%argrw{"wr"}
	le		$tmp864 ___599_k $const15 	%argrw{"wrr"}
	neq		$tmp865 $tmp864 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:588
#     for (int j = -1; j <= 1; j++) {
	for		$tmp867 2421 2423 2530 2532 	%line{588} %argrw{"r"}
	assign		___601_j $const21 	%argrw{"wr"}
	le		$tmp866 ___601_j $const15 	%argrw{"wrr"}
	neq		$tmp867 $tmp866 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:589
#       for (int i = -1; i <= 1; i++) {
	for		$tmp869 2425 2427 2528 2530 	%line{589} %argrw{"r"}
	assign		___603_i $const21 	%argrw{"wr"}
	le		$tmp868 ___603_i $const15 	%argrw{"wrr"}
	neq		$tmp869 $tmp868 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:590
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp870 ___603_i 	%line{590} %argrw{"wr"}
	assign		$tmp871 ___601_j 	%argrw{"wr"}
	assign		$tmp872 ___599_k 	%argrw{"wr"}
	point		___604_cellOffset $tmp870 $tmp871 $tmp872 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:591
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp874 ___598_cellPosition ___604_cellOffset 	%line{591} %argrw{"wrr"}
	functioncall	$const34 2450 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 2435 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp875 $tmp874 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp877.x $tmp874 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp877.y $tmp874 $const15 	%argrw{"wrr"}
	compref		$tmp877.z $tmp874 $const35 	%argrw{"wrr"}
	assign		$tmp877.w $const4 	%argrw{"wr"}
	functioncall	$const36 2442 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp878 $tmp877.x $tmp877.y $tmp877.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp876 $tmp878 $tmp877.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp880.x $tmp874 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp880.y $tmp874 $const15 	%argrw{"wrr"}
	compref		$tmp880.z $tmp874 $const35 	%argrw{"wrr"}
	assign		$tmp880.w $const5 	%argrw{"wr"}
	functioncall	$const36 2449 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp881 $tmp880.x $tmp880.y $tmp880.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp879 $tmp881 $tmp880.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp873 $tmp875 $tmp876 $tmp879 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:591
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp882 $tmp873 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{591} %argrw{"wrr"}
	add		___604_pointPosition ___604_cellOffset $tmp882 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:593
#         float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 2515 	%line{593} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:76
#   if (params.metric == "euclidean") {
	eq		$tmp883 params.metric $const57 	%line{76} %argrw{"wrr"}
	if		$tmp883 2457 2515 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:77
#     return distance(a, b);
	distance	___604_distanceToPoint ___604_pointPosition ___598_localPosition 	%line{77} %argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:79
#   else if (params.metric == "manhattan") {
	eq		$tmp884 params.metric $const58 	%line{79} %argrw{"wrr"}
	if		$tmp884 2474 2515 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:80
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp886 ___604_pointPosition $const11 	%line{80} %argrw{"wrr"}
	compref		$tmp887 ___598_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp888 $tmp886 $tmp887 	%argrw{"wrr"}
	abs		$tmp885 $tmp888 	%argrw{"wr"}
	compref		$tmp890 ___604_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp891 ___598_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp892 $tmp890 $tmp891 	%argrw{"wrr"}
	abs		$tmp889 $tmp892 	%argrw{"wr"}
	add		$tmp893 $tmp885 $tmp889 	%argrw{"wrr"}
	compref		$tmp895 ___604_pointPosition $const35 	%argrw{"wrr"}
	compref		$tmp896 ___598_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp897 $tmp895 $tmp896 	%argrw{"wrr"}
	abs		$tmp894 $tmp897 	%argrw{"wr"}
	add		___604_distanceToPoint $tmp893 $tmp894 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:82
#   else if (params.metric == "chebychev") {
	eq		$tmp898 params.metric $const59 	%line{82} %argrw{"wrr"}
	if		$tmp898 2491 2515 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:83
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp900 ___604_pointPosition $const11 	%line{83} %argrw{"wrr"}
	compref		$tmp901 ___598_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp902 $tmp900 $tmp901 	%argrw{"wrr"}
	abs		$tmp899 $tmp902 	%argrw{"wr"}
	compref		$tmp905 ___604_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp906 ___598_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp907 $tmp905 $tmp906 	%argrw{"wrr"}
	abs		$tmp904 $tmp907 	%argrw{"wr"}
	compref		$tmp909 ___604_pointPosition $const35 	%argrw{"wrr"}
	compref		$tmp910 ___598_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp911 $tmp909 $tmp910 	%argrw{"wrr"}
	abs		$tmp908 $tmp911 	%argrw{"wr"}
	max		$tmp903 $tmp904 $tmp908 	%argrw{"wrr"}
	max		___604_distanceToPoint $tmp899 $tmp903 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:85
#   else if (params.metric == "minkowski") {
	eq		$tmp912 params.metric $const60 	%line{85} %argrw{"wrr"}
	if		$tmp912 2513 2515 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	compref		$tmp915 ___604_pointPosition $const11 	%line{86} %argrw{"wrr"}
	compref		$tmp916 ___598_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp917 $tmp915 $tmp916 	%argrw{"wrr"}
	abs		$tmp914 $tmp917 	%argrw{"wr"}
	pow		$tmp913 $tmp914 params.exponent 	%argrw{"wrr"}
	compref		$tmp920 ___604_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp921 ___598_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp922 $tmp920 $tmp921 	%argrw{"wrr"}
	abs		$tmp919 $tmp922 	%argrw{"wr"}
	pow		$tmp918 $tmp919 params.exponent 	%argrw{"wrr"}
	add		$tmp923 $tmp913 $tmp918 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:87
#                    pow(abs(a[2] - b[2]), params.exponent),
	compref		$tmp926 ___604_pointPosition $const35 	%line{87} %argrw{"wrr"}
	compref		$tmp927 ___598_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp928 $tmp926 $tmp927 	%argrw{"wrr"}
	abs		$tmp925 $tmp928 	%argrw{"wr"}
	pow		$tmp924 $tmp925 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	add		$tmp929 $tmp923 $tmp924 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	div		$tmp930 $const4 params.exponent 	%line{88} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	pow		___604_distanceToPoint $tmp929 $tmp930 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	return	%line{88}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:91
#     return 0.0;
	assign		___604_distanceToPoint $const1 	%line{91} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:594
#         if (distanceToPoint < distanceF1) {
	lt		$tmp931 ___604_distanceToPoint ___598_distanceF1 	%line{594} %argrw{"wrr"}
	if		$tmp931 2523 2528 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:595
#           distanceF2 = distanceF1;
	assign		___598_distanceF2 ___598_distanceF1 	%line{595} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:596
#           distanceF1 = distanceToPoint;
	assign		___598_distanceF1 ___604_distanceToPoint 	%line{596} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:597
#           offsetF2 = offsetF1;
	assign		___598_offsetF2 ___598_offsetF1 	%line{597} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:598
#           offsetF1 = cellOffset;
	assign		___598_offsetF1 ___604_cellOffset 	%line{598} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:599
#           positionF2 = positionF1;
	assign		___598_positionF2 ___598_positionF1 	%line{599} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:600
#           positionF1 = pointPosition;
	assign		___598_positionF1 ___604_pointPosition 	%line{600} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:602
#         else if (distanceToPoint < distanceF2) {
	lt		$tmp932 ___604_distanceToPoint ___598_distanceF2 	%line{602} %argrw{"wrr"}
	if		$tmp932 2528 2528 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:603
#           distanceF2 = distanceToPoint;
	assign		___598_distanceF2 ___604_distanceToPoint 	%line{603} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:604
#           offsetF2 = cellOffset;
	assign		___598_offsetF2 ___604_cellOffset 	%line{604} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:605
#           positionF2 = pointPosition;
	assign		___598_positionF2 ___604_pointPosition 	%line{605} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:589
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp933 ___603_i 	%line{589} %argrw{"wr"}
	add		___603_i ___603_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:588
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp934 ___601_j 	%line{588} %argrw{"wr"}
	add		___601_j ___601_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:587
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp935 ___599_k 	%line{587} %argrw{"wr"}
	add		___599_k ___599_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:612
#   octave.Distance = distanceF2;
	assign		___598_octave.Distance ___598_distanceF2 	%line{612} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:613
#   octave.Color = hash_vector3_to_color(cellPosition + offsetF2);
	add		$tmp936 ___598_cellPosition ___598_offsetF2 	%line{613} %argrw{"wrr"}
	functioncall	$const62 2554 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:73
#   return color(hash_vector3_to_float(k),
	functioncall	$const25 2539 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{73} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp937 $tmp936 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:74
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp939.x $tmp936 $const11 	%line{74} %argrw{"wrr"}
	compref		$tmp939.y $tmp936 $const15 	%argrw{"wrr"}
	compref		$tmp939.z $tmp936 $const35 	%argrw{"wrr"}
	assign		$tmp939.w $const4 	%argrw{"wr"}
	functioncall	$const36 2546 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp940 $tmp939.x $tmp939.y $tmp939.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp938 $tmp940 $tmp939.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:75
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp942.x $tmp936 $const11 	%line{75} %argrw{"wrr"}
	compref		$tmp942.y $tmp936 $const15 	%argrw{"wrr"}
	compref		$tmp942.z $tmp936 $const35 	%argrw{"wrr"}
	assign		$tmp942.w $const5 	%argrw{"wr"}
	functioncall	$const36 2553 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp943 $tmp942.x $tmp942.y $tmp942.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp941 $tmp943 $tmp942.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:73
#   return color(hash_vector3_to_float(k),
	color		___598_octave.Color $tmp937 $tmp938 $tmp941 	%line{73} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:613
#   octave.Color = hash_vector3_to_color(cellPosition + offsetF2);
	assign		___598_octave.Color ___598_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{613} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:614
#   octave.Position = voronoi_position(positionF2 + cellPosition);
	add		$tmp944 ___598_positionF2 ___598_cellPosition 	%line{614} %argrw{"wrr"}
	functioncall	$const49 2561 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:505
#   return vector4(coord.x, coord.y, coord.z, 0.0);
	compref		___598_octave.Position.x $tmp944 $const11 	%line{505} %argrw{"wrr"}
	compref		___598_octave.Position.y $tmp944 $const15 	%argrw{"wrr"}
	compref		___598_octave.Position.z $tmp944 $const35 	%argrw{"wrr"}
	assign		___598_octave.Position.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:615
#   return octave;
	assign		___748_octave.Distance ___598_octave.Distance 	%line{615} %argrw{"wr"}
	assign		___748_octave.Color ___598_octave.Color 	%argrw{"wr"}
	assign		___748_octave.Position.x ___598_octave.Position.x 	%argrw{"wr"}
	assign		___748_octave.Position.y ___598_octave.Position.y 	%argrw{"wr"}
	assign		___748_octave.Position.z ___598_octave.Position.z 	%argrw{"wr"}
	assign		___748_octave.Position.w ___598_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	eq		$tmp945 params.feature $const50 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"wrr"}
	neq		$tmp946 $tmp945 $const11 	%argrw{"wrr"}
	if		$tmp946 2573 2573 	%argrw{"r"}
	neq		$tmp947 params.smoothness $const1 	%argrw{"wrr"}
	neq		$tmp948 $tmp947 $const11 	%argrw{"wrr"}
	assign		$tmp946 $tmp948 	%argrw{"wr"}
	if		$tmp946 2742 2893 	%argrw{"r"}
	mul		$tmp949 coord ___746_scale 	%argrw{"wrr"}
	functioncall	$const51 2742 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:541
#   vector3 cellPosition = floor(coord);
	floor		___591_cellPosition $tmp949 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{541} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:542
#   vector3 localPosition = coord - cellPosition;
	sub		___591_localPosition $tmp949 ___591_cellPosition 	%line{542} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:544
#   float smoothDistance = 0.0;
	assign		___591_smoothDistance $const1 	%line{544} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:545
#   vector3 smoothColor = vector3(0.0, 0.0, 0.0);
	assign		___591_smoothColor $const33 	%line{545} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:546
#   vector3 smoothPosition = vector3(0.0, 0.0, 0.0);
	assign		___591_smoothPosition $const33 	%line{546} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:547
#   float h = -1.0;
	assign		___591_h $const14 	%line{547} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:548
#   for (int k = -2; k <= 2; k++) {
	for		$tmp951 2584 2586 2725 2727 	%line{548} %argrw{"r"}
	assign		___592_k $const52 	%argrw{"wr"}
	le		$tmp950 ___592_k $const35 	%argrw{"wrr"}
	neq		$tmp951 $tmp950 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:549
#     for (int j = -2; j <= 2; j++) {
	for		$tmp953 2588 2590 2723 2725 	%line{549} %argrw{"r"}
	assign		___594_j $const52 	%argrw{"wr"}
	le		$tmp952 ___594_j $const35 	%argrw{"wrr"}
	neq		$tmp953 $tmp952 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:550
#       for (int i = -2; i <= 2; i++) {
	for		$tmp955 2592 2594 2721 2723 	%line{550} %argrw{"r"}
	assign		___596_i $const52 	%argrw{"wr"}
	le		$tmp954 ___596_i $const35 	%argrw{"wrr"}
	neq		$tmp955 $tmp954 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:551
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp956 ___596_i 	%line{551} %argrw{"wr"}
	assign		$tmp957 ___594_j 	%argrw{"wr"}
	assign		$tmp958 ___592_k 	%argrw{"wr"}
	point		___597_cellOffset $tmp956 $tmp957 $tmp958 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:552
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp960 ___591_cellPosition ___597_cellOffset 	%line{552} %argrw{"wrr"}
	functioncall	$const34 2617 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 2602 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp961 $tmp960 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp963.x $tmp960 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp963.y $tmp960 $const15 	%argrw{"wrr"}
	compref		$tmp963.z $tmp960 $const35 	%argrw{"wrr"}
	assign		$tmp963.w $const4 	%argrw{"wr"}
	functioncall	$const36 2609 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp964 $tmp963.x $tmp963.y $tmp963.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp962 $tmp964 $tmp963.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp966.x $tmp960 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp966.y $tmp960 $const15 	%argrw{"wrr"}
	compref		$tmp966.z $tmp960 $const35 	%argrw{"wrr"}
	assign		$tmp966.w $const5 	%argrw{"wr"}
	functioncall	$const36 2616 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp967 $tmp966.x $tmp966.y $tmp966.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp965 $tmp967 $tmp966.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp959 $tmp961 $tmp962 $tmp965 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:552
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp968 $tmp959 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{552} %argrw{"wrr"}
	add		___597_pointPosition ___597_cellOffset $tmp968 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:554
#         float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 2682 	%line{554} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:76
#   if (params.metric == "euclidean") {
	eq		$tmp969 params.metric $const57 	%line{76} %argrw{"wrr"}
	if		$tmp969 2624 2682 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:77
#     return distance(a, b);
	distance	___597_distanceToPoint ___597_pointPosition ___591_localPosition 	%line{77} %argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:79
#   else if (params.metric == "manhattan") {
	eq		$tmp970 params.metric $const58 	%line{79} %argrw{"wrr"}
	if		$tmp970 2641 2682 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:80
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp972 ___597_pointPosition $const11 	%line{80} %argrw{"wrr"}
	compref		$tmp973 ___591_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp974 $tmp972 $tmp973 	%argrw{"wrr"}
	abs		$tmp971 $tmp974 	%argrw{"wr"}
	compref		$tmp976 ___597_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp977 ___591_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp978 $tmp976 $tmp977 	%argrw{"wrr"}
	abs		$tmp975 $tmp978 	%argrw{"wr"}
	add		$tmp979 $tmp971 $tmp975 	%argrw{"wrr"}
	compref		$tmp981 ___597_pointPosition $const35 	%argrw{"wrr"}
	compref		$tmp982 ___591_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp983 $tmp981 $tmp982 	%argrw{"wrr"}
	abs		$tmp980 $tmp983 	%argrw{"wr"}
	add		___597_distanceToPoint $tmp979 $tmp980 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:82
#   else if (params.metric == "chebychev") {
	eq		$tmp984 params.metric $const59 	%line{82} %argrw{"wrr"}
	if		$tmp984 2658 2682 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:83
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp986 ___597_pointPosition $const11 	%line{83} %argrw{"wrr"}
	compref		$tmp987 ___591_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp988 $tmp986 $tmp987 	%argrw{"wrr"}
	abs		$tmp985 $tmp988 	%argrw{"wr"}
	compref		$tmp991 ___597_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp992 ___591_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp993 $tmp991 $tmp992 	%argrw{"wrr"}
	abs		$tmp990 $tmp993 	%argrw{"wr"}
	compref		$tmp995 ___597_pointPosition $const35 	%argrw{"wrr"}
	compref		$tmp996 ___591_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp997 $tmp995 $tmp996 	%argrw{"wrr"}
	abs		$tmp994 $tmp997 	%argrw{"wr"}
	max		$tmp989 $tmp990 $tmp994 	%argrw{"wrr"}
	max		___597_distanceToPoint $tmp985 $tmp989 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:85
#   else if (params.metric == "minkowski") {
	eq		$tmp998 params.metric $const60 	%line{85} %argrw{"wrr"}
	if		$tmp998 2680 2682 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	compref		$tmp1001 ___597_pointPosition $const11 	%line{86} %argrw{"wrr"}
	compref		$tmp1002 ___591_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp1003 $tmp1001 $tmp1002 	%argrw{"wrr"}
	abs		$tmp1000 $tmp1003 	%argrw{"wr"}
	pow		$tmp999 $tmp1000 params.exponent 	%argrw{"wrr"}
	compref		$tmp1006 ___597_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp1007 ___591_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp1008 $tmp1006 $tmp1007 	%argrw{"wrr"}
	abs		$tmp1005 $tmp1008 	%argrw{"wr"}
	pow		$tmp1004 $tmp1005 params.exponent 	%argrw{"wrr"}
	add		$tmp1009 $tmp999 $tmp1004 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:87
#                    pow(abs(a[2] - b[2]), params.exponent),
	compref		$tmp1012 ___597_pointPosition $const35 	%line{87} %argrw{"wrr"}
	compref		$tmp1013 ___591_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp1014 $tmp1012 $tmp1013 	%argrw{"wrr"}
	abs		$tmp1011 $tmp1014 	%argrw{"wr"}
	pow		$tmp1010 $tmp1011 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	add		$tmp1015 $tmp1009 $tmp1010 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	div		$tmp1016 $const4 params.exponent 	%line{88} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	pow		___597_distanceToPoint $tmp1015 $tmp1016 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	return	%line{88}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:91
#     return 0.0;
	assign		___597_distanceToPoint $const1 	%line{91} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:555
#         h = h == -1.0 ?
	eq		$tmp1017 ___591_h $const14 	%line{555} %argrw{"wrr"}
	if		$tmp1017 2685 2690 	%argrw{"r"}
	assign		___591_h $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:558
#                     0.0, 1.0, 0.5 + 0.5 * (smoothDistance - distanceToPoint) / params.smoothness);
	sub		$tmp1018 ___591_smoothDistance ___597_distanceToPoint 	%line{558} %argrw{"wrr"}
	mul		$tmp1019 $const6 $tmp1018 	%argrw{"wrr"}
	div		$tmp1020 $tmp1019 params.smoothness 	%argrw{"wrr"}
	add		$tmp1021 $const6 $tmp1020 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:557
#                 smoothstep(
	smoothstep	___591_h $const1 $const4 $tmp1021 	%line{557} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:559
#         float correctionFactor = params.smoothness * h * (1.0 - h);
	mul		$tmp1022 params.smoothness ___591_h 	%line{559} %argrw{"wrr"}
	sub		$tmp1023 $const4 ___591_h 	%argrw{"wrr"}
	mul		___597_correctionFactor $tmp1022 $tmp1023 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:560
#         smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp1024 ___591_smoothDistance ___597_distanceToPoint ___591_h 	%line{560} %argrw{"wrrr"}
	sub		___591_smoothDistance $tmp1024 ___597_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:561
#         correctionFactor /= 1.0 + 3.0 * params.smoothness;
	mul		$tmp1025 $const53 params.smoothness 	%line{561} %argrw{"wrr"}
	add		$tmp1026 $const4 $tmp1025 	%argrw{"wrr"}
	div		___597_correctionFactor ___597_correctionFactor $tmp1026 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:562
#         color cellColor = hash_vector3_to_color(cellPosition + cellOffset);
	add		$tmp1027 ___591_cellPosition ___597_cellOffset 	%line{562} %argrw{"wrr"}
	functioncall	$const62 2717 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:73
#   return color(hash_vector3_to_float(k),
	functioncall	$const25 2702 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{73} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp1028 $tmp1027 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:74
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp1030.x $tmp1027 $const11 	%line{74} %argrw{"wrr"}
	compref		$tmp1030.y $tmp1027 $const15 	%argrw{"wrr"}
	compref		$tmp1030.z $tmp1027 $const35 	%argrw{"wrr"}
	assign		$tmp1030.w $const4 	%argrw{"wr"}
	functioncall	$const36 2709 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1031 $tmp1030.x $tmp1030.y $tmp1030.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1029 $tmp1031 $tmp1030.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:75
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp1033.x $tmp1027 $const11 	%line{75} %argrw{"wrr"}
	compref		$tmp1033.y $tmp1027 $const15 	%argrw{"wrr"}
	compref		$tmp1033.z $tmp1027 $const35 	%argrw{"wrr"}
	assign		$tmp1033.w $const5 	%argrw{"wr"}
	functioncall	$const36 2716 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1034 $tmp1033.x $tmp1033.y $tmp1033.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1032 $tmp1034 $tmp1033.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:73
#   return color(hash_vector3_to_float(k),
	color		___597_cellColor $tmp1028 $tmp1029 $tmp1032 	%line{73} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:563
#         smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp1035 ___591_smoothColor ___597_cellColor ___591_h 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{563} %argrw{"wrrr"}
	sub		___591_smoothColor $tmp1035 ___597_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:564
#         smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	mix		$tmp1036 ___591_smoothPosition ___597_pointPosition ___591_h 	%line{564} %argrw{"wrrr"}
	sub		___591_smoothPosition $tmp1036 ___597_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:550
#       for (int i = -2; i <= 2; i++) {
	assign		$tmp1037 ___596_i 	%line{550} %argrw{"wr"}
	add		___596_i ___596_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:549
#     for (int j = -2; j <= 2; j++) {
	assign		$tmp1038 ___594_j 	%line{549} %argrw{"wr"}
	add		___594_j ___594_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:548
#   for (int k = -2; k <= 2; k++) {
	assign		$tmp1039 ___592_k 	%line{548} %argrw{"wr"}
	add		___592_k ___592_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:570
#   octave.Distance = smoothDistance;
	assign		___591_octave.Distance ___591_smoothDistance 	%line{570} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:571
#   octave.Color = smoothColor;
	assign		___591_octave.Color ___591_smoothColor 	%line{571} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:572
#   octave.Position = voronoi_position(cellPosition + smoothPosition);
	add		$tmp1040 ___591_cellPosition ___591_smoothPosition 	%line{572} %argrw{"wrr"}
	functioncall	$const49 2735 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:505
#   return vector4(coord.x, coord.y, coord.z, 0.0);
	compref		___591_octave.Position.x $tmp1040 $const11 	%line{505} %argrw{"wrr"}
	compref		___591_octave.Position.y $tmp1040 $const15 	%argrw{"wrr"}
	compref		___591_octave.Position.z $tmp1040 $const35 	%argrw{"wrr"}
	assign		___591_octave.Position.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:573
#   return octave;
	assign		___748_octave.Distance ___591_octave.Distance 	%line{573} %argrw{"wr"}
	assign		___748_octave.Color ___591_octave.Color 	%argrw{"wr"}
	assign		___748_octave.Position.x ___591_octave.Position.x 	%argrw{"wr"}
	assign		___748_octave.Position.y ___591_octave.Position.y 	%argrw{"wr"}
	assign		___748_octave.Position.z ___591_octave.Position.z 	%argrw{"wr"}
	assign		___748_octave.Position.w ___591_octave.Position.w 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	mul		$tmp1041 coord ___746_scale 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"wrr"}
	functioncall	$const54 2893 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:510
#   vector3 cellPosition = floor(coord);
	floor		___583_cellPosition $tmp1041 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{510} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:511
#   vector3 localPosition = coord - cellPosition;
	sub		___583_localPosition $tmp1041 ___583_cellPosition 	%line{511} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:513
#   float minDistance = FLT_MAX;
	assign		___583_minDistance $const20 	%line{513} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:514
#   vector3 targetOffset = vector3(0.0, 0.0, 0.0);
	assign		___583_targetOffset $const33 	%line{514} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:515
#   vector3 targetPosition = vector3(0.0, 0.0, 0.0);
	assign		___583_targetPosition $const33 	%line{515} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:516
#   for (int k = -1; k <= 1; k++) {
	for		$tmp1043 2751 2753 2858 2860 	%line{516} %argrw{"r"}
	assign		___584_k $const21 	%argrw{"wr"}
	le		$tmp1042 ___584_k $const15 	%argrw{"wrr"}
	neq		$tmp1043 $tmp1042 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:517
#     for (int j = -1; j <= 1; j++) {
	for		$tmp1045 2755 2757 2856 2858 	%line{517} %argrw{"r"}
	assign		___586_j $const21 	%argrw{"wr"}
	le		$tmp1044 ___586_j $const15 	%argrw{"wrr"}
	neq		$tmp1045 $tmp1044 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:518
#       for (int i = -1; i <= 1; i++) {
	for		$tmp1047 2759 2761 2854 2856 	%line{518} %argrw{"r"}
	assign		___588_i $const21 	%argrw{"wr"}
	le		$tmp1046 ___588_i $const15 	%argrw{"wrr"}
	neq		$tmp1047 $tmp1046 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:519
#         vector3 cellOffset = vector3(i, j, k);
	assign		$tmp1048 ___588_i 	%line{519} %argrw{"wr"}
	assign		$tmp1049 ___586_j 	%argrw{"wr"}
	assign		$tmp1050 ___584_k 	%argrw{"wr"}
	point		___589_cellOffset $tmp1048 $tmp1049 $tmp1050 	%argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:520
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	add		$tmp1052 ___583_cellPosition ___589_cellOffset 	%line{520} %argrw{"wrr"}
	functioncall	$const34 2784 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	functioncall	$const25 2769 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{42} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp1053 $tmp1052 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:43
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp1055.x $tmp1052 $const11 	%line{43} %argrw{"wrr"}
	compref		$tmp1055.y $tmp1052 $const15 	%argrw{"wrr"}
	compref		$tmp1055.z $tmp1052 $const35 	%argrw{"wrr"}
	assign		$tmp1055.w $const4 	%argrw{"wr"}
	functioncall	$const36 2776 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1056 $tmp1055.x $tmp1055.y $tmp1055.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1054 $tmp1056 $tmp1055.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:44
#                  hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp1058.x $tmp1052 $const11 	%line{44} %argrw{"wrr"}
	compref		$tmp1058.y $tmp1052 $const15 	%argrw{"wrr"}
	compref		$tmp1058.z $tmp1052 $const35 	%argrw{"wrr"}
	assign		$tmp1058.w $const5 	%argrw{"wr"}
	functioncall	$const36 2783 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1059 $tmp1058.x $tmp1058.y $tmp1058.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1057 $tmp1059 $tmp1058.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:42
#   return vector3(hash_vector3_to_float(k),
	point		$tmp1051 $tmp1053 $tmp1054 $tmp1057 	%line{42} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:520
#         vector3 pointPosition = cellOffset + hash_vector3_to_vector3(cellPosition + cellOffset) *
	mul		$tmp1060 $tmp1051 params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{520} %argrw{"wrr"}
	add		___589_pointPosition ___589_cellOffset $tmp1060 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:522
#         float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 2849 	%line{522} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:76
#   if (params.metric == "euclidean") {
	eq		$tmp1061 params.metric $const57 	%line{76} %argrw{"wrr"}
	if		$tmp1061 2791 2849 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:77
#     return distance(a, b);
	distance	___589_distanceToPoint ___589_pointPosition ___583_localPosition 	%line{77} %argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:79
#   else if (params.metric == "manhattan") {
	eq		$tmp1062 params.metric $const58 	%line{79} %argrw{"wrr"}
	if		$tmp1062 2808 2849 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:80
#     return abs(a[0] - b[0]) + abs(a[1] - b[1]) + abs(a[2] - b[2]);
	compref		$tmp1064 ___589_pointPosition $const11 	%line{80} %argrw{"wrr"}
	compref		$tmp1065 ___583_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp1066 $tmp1064 $tmp1065 	%argrw{"wrr"}
	abs		$tmp1063 $tmp1066 	%argrw{"wr"}
	compref		$tmp1068 ___589_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp1069 ___583_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp1070 $tmp1068 $tmp1069 	%argrw{"wrr"}
	abs		$tmp1067 $tmp1070 	%argrw{"wr"}
	add		$tmp1071 $tmp1063 $tmp1067 	%argrw{"wrr"}
	compref		$tmp1073 ___589_pointPosition $const35 	%argrw{"wrr"}
	compref		$tmp1074 ___583_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp1075 $tmp1073 $tmp1074 	%argrw{"wrr"}
	abs		$tmp1072 $tmp1075 	%argrw{"wr"}
	add		___589_distanceToPoint $tmp1071 $tmp1072 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:82
#   else if (params.metric == "chebychev") {
	eq		$tmp1076 params.metric $const59 	%line{82} %argrw{"wrr"}
	if		$tmp1076 2825 2849 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:83
#     return max(abs(a[0] - b[0]), max(abs(a[1] - b[1]), abs(a[2] - b[2])));
	compref		$tmp1078 ___589_pointPosition $const11 	%line{83} %argrw{"wrr"}
	compref		$tmp1079 ___583_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp1080 $tmp1078 $tmp1079 	%argrw{"wrr"}
	abs		$tmp1077 $tmp1080 	%argrw{"wr"}
	compref		$tmp1083 ___589_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp1084 ___583_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp1085 $tmp1083 $tmp1084 	%argrw{"wrr"}
	abs		$tmp1082 $tmp1085 	%argrw{"wr"}
	compref		$tmp1087 ___589_pointPosition $const35 	%argrw{"wrr"}
	compref		$tmp1088 ___583_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp1089 $tmp1087 $tmp1088 	%argrw{"wrr"}
	abs		$tmp1086 $tmp1089 	%argrw{"wr"}
	max		$tmp1081 $tmp1082 $tmp1086 	%argrw{"wrr"}
	max		___589_distanceToPoint $tmp1077 $tmp1081 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:85
#   else if (params.metric == "minkowski") {
	eq		$tmp1090 params.metric $const60 	%line{85} %argrw{"wrr"}
	if		$tmp1090 2847 2849 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	compref		$tmp1093 ___589_pointPosition $const11 	%line{86} %argrw{"wrr"}
	compref		$tmp1094 ___583_localPosition $const11 	%argrw{"wrr"}
	sub		$tmp1095 $tmp1093 $tmp1094 	%argrw{"wrr"}
	abs		$tmp1092 $tmp1095 	%argrw{"wr"}
	pow		$tmp1091 $tmp1092 params.exponent 	%argrw{"wrr"}
	compref		$tmp1098 ___589_pointPosition $const15 	%argrw{"wrr"}
	compref		$tmp1099 ___583_localPosition $const15 	%argrw{"wrr"}
	sub		$tmp1100 $tmp1098 $tmp1099 	%argrw{"wrr"}
	abs		$tmp1097 $tmp1100 	%argrw{"wr"}
	pow		$tmp1096 $tmp1097 params.exponent 	%argrw{"wrr"}
	add		$tmp1101 $tmp1091 $tmp1096 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:87
#                    pow(abs(a[2] - b[2]), params.exponent),
	compref		$tmp1104 ___589_pointPosition $const35 	%line{87} %argrw{"wrr"}
	compref		$tmp1105 ___583_localPosition $const35 	%argrw{"wrr"}
	sub		$tmp1106 $tmp1104 $tmp1105 	%argrw{"wrr"}
	abs		$tmp1103 $tmp1106 	%argrw{"wr"}
	pow		$tmp1102 $tmp1103 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	add		$tmp1107 $tmp1101 $tmp1102 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	div		$tmp1108 $const4 params.exponent 	%line{88} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:86
#     return pow(pow(abs(a[0] - b[0]), params.exponent) + pow(abs(a[1] - b[1]), params.exponent) +
	pow		___589_distanceToPoint $tmp1107 $tmp1108 	%line{86} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:88
#                1.0 / params.exponent);
	return	%line{88}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:91
#     return 0.0;
	assign		___589_distanceToPoint $const1 	%line{91} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:523
#         if (distanceToPoint < minDistance) {
	lt		$tmp1109 ___589_distanceToPoint ___583_minDistance 	%line{523} %argrw{"wrr"}
	if		$tmp1109 2854 2854 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:524
#           targetOffset = cellOffset;
	assign		___583_targetOffset ___589_cellOffset 	%line{524} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:525
#           minDistance = distanceToPoint;
	assign		___583_minDistance ___589_distanceToPoint 	%line{525} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:526
#           targetPosition = pointPosition;
	assign		___583_targetPosition ___589_pointPosition 	%line{526} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:518
#       for (int i = -1; i <= 1; i++) {
	assign		$tmp1110 ___588_i 	%line{518} %argrw{"wr"}
	add		___588_i ___588_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:517
#     for (int j = -1; j <= 1; j++) {
	assign		$tmp1111 ___586_j 	%line{517} %argrw{"wr"}
	add		___586_j ___586_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:516
#   for (int k = -1; k <= 1; k++) {
	assign		$tmp1112 ___584_k 	%line{516} %argrw{"wr"}
	add		___584_k ___584_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:533
#   octave.Distance = minDistance;
	assign		___583_octave.Distance ___583_minDistance 	%line{533} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:534
#   octave.Color = hash_vector3_to_color(cellPosition + targetOffset);
	add		$tmp1113 ___583_cellPosition ___583_targetOffset 	%line{534} %argrw{"wrr"}
	functioncall	$const62 2880 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:73
#   return color(hash_vector3_to_float(k),
	functioncall	$const25 2865 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{73} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:25
#   return hashnoise(k);
	hashnoise	$tmp1114 $tmp1113 	%line{25} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:74
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 1.0)),
	compref		$tmp1116.x $tmp1113 $const11 	%line{74} %argrw{"wrr"}
	compref		$tmp1116.y $tmp1113 $const15 	%argrw{"wrr"}
	compref		$tmp1116.z $tmp1113 $const35 	%argrw{"wrr"}
	assign		$tmp1116.w $const4 	%argrw{"wr"}
	functioncall	$const36 2872 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1117 $tmp1116.x $tmp1116.y $tmp1116.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1115 $tmp1117 $tmp1116.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:75
#                hash_vector4_to_float(vector4(k[0], k[1], k[2], 2.0)));
	compref		$tmp1119.x $tmp1113 $const11 	%line{75} %argrw{"wrr"}
	compref		$tmp1119.y $tmp1113 $const15 	%argrw{"wrr"}
	compref		$tmp1119.z $tmp1113 $const35 	%argrw{"wrr"}
	assign		$tmp1119.w $const5 	%argrw{"wr"}
	functioncall	$const36 2879 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1120 $tmp1119.x $tmp1119.y $tmp1119.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1118 $tmp1120 $tmp1119.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:73
#   return color(hash_vector3_to_float(k),
	color		___583_octave.Color $tmp1114 $tmp1115 $tmp1118 	%line{73} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:534
#   octave.Color = hash_vector3_to_color(cellPosition + targetOffset);
	assign		___583_octave.Color ___583_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{534} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:535
#   octave.Position = voronoi_position(targetPosition + cellPosition);
	add		$tmp1121 ___583_targetPosition ___583_cellPosition 	%line{535} %argrw{"wrr"}
	functioncall	$const49 2887 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:505
#   return vector4(coord.x, coord.y, coord.z, 0.0);
	compref		___583_octave.Position.x $tmp1121 $const11 	%line{505} %argrw{"wrr"}
	compref		___583_octave.Position.y $tmp1121 $const15 	%argrw{"wrr"}
	compref		___583_octave.Position.z $tmp1121 $const35 	%argrw{"wrr"}
	assign		___583_octave.Position.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:536
#   return octave;
	assign		___748_octave.Distance ___583_octave.Distance 	%line{536} %argrw{"wr"}
	assign		___748_octave.Color ___583_octave.Color 	%argrw{"wr"}
	assign		___748_octave.Position.x ___583_octave.Position.x 	%argrw{"wr"}
	assign		___748_octave.Position.y ___583_octave.Position.y 	%argrw{"wr"}
	assign		___748_octave.Position.z ___583_octave.Position.z 	%argrw{"wr"}
	assign		___748_octave.Position.w ___583_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	if		___746_zero_input 2902 2964 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"r"}
	assign		___746_max_amplitude $const4 	%argrw{"wr"}
	assign		___746_Output.Distance ___748_octave.Distance 	%argrw{"wr"}
	assign		___746_Output.Color ___748_octave.Color 	%argrw{"wr"}
	assign		___746_Output.Position.x ___748_octave.Position.x 	%argrw{"wr"}
	assign		___746_Output.Position.y ___748_octave.Position.y 	%argrw{"wr"}
	assign		___746_Output.Position.z ___748_octave.Position.z 	%argrw{"wr"}
	assign		___746_Output.Position.w ___748_octave.Position.w 	%argrw{"wr"}
	break
	le		$tmp1122 ___747_i params.detail 	%argrw{"wrr"}
	if		$tmp1122 2929 2964 	%argrw{"r"}
	add		___746_max_amplitude ___746_max_amplitude ___746_amplitude 	%argrw{"wrr"}
	mul		$tmp1123 ___748_octave.Distance ___746_amplitude 	%argrw{"wrr"}
	add		___746_Output.Distance ___746_Output.Distance $tmp1123 	%argrw{"wrr"}
	assign		___746_Output.Distance ___746_Output.Distance 	%argrw{"wr"}
	mul		$tmp1124 ___748_octave.Color ___746_amplitude 	%argrw{"wrr"}
	add		___746_Output.Color ___746_Output.Color $tmp1124 	%argrw{"wrr"}
	assign		___746_Output.Color ___746_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 2922 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___746_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp1126.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp1126.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1126.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1126.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2922 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1125.x ___748_octave.Position.x $tmp1126.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1125.y ___748_octave.Position.y $tmp1126.y 	%argrw{"wrr"}
	mul		$tmp1125.z ___748_octave.Position.z $tmp1126.z 	%argrw{"wrr"}
	mul		$tmp1125.w ___748_octave.Position.w $tmp1126.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	functioncall	$const55 2927 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___746_Output.Position.x ___746_Output.Position.x $tmp1125.x ___746_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___746_Output.Position.y ___746_Output.Position.y $tmp1125.y ___746_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___746_Output.Position.z ___746_Output.Position.z $tmp1125.z ___746_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___746_Output.Position.w ___746_Output.Position.w $tmp1125.w ___746_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	mul		___746_scale ___746_scale params.lacunarity 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"wrr"}
	mul		___746_amplitude ___746_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp1127 params.detail 	%argrw{"wr"}
	sub		___754_remainder params.detail $tmp1127 	%argrw{"wrr"}
	neq		$tmp1128 ___754_remainder $const1 	%argrw{"wrr"}
	if		$tmp1128 2964 2964 	%argrw{"r"}
	add		$tmp1129 ___746_max_amplitude ___746_amplitude 	%argrw{"wrr"}
	mix		___746_max_amplitude ___746_max_amplitude $tmp1129 ___754_remainder 	%argrw{"wrrr"}
	mul		$tmp1130 ___748_octave.Distance ___746_amplitude 	%argrw{"wrr"}
	add		$tmp1131 ___746_Output.Distance $tmp1130 	%argrw{"wrr"}
	mix		___746_Output.Distance ___746_Output.Distance $tmp1131 ___754_remainder 	%argrw{"wrrr"}
	assign		___746_Output.Distance ___746_Output.Distance 	%argrw{"wr"}
	mul		$tmp1132 ___748_octave.Color ___746_amplitude 	%argrw{"wrr"}
	add		$tmp1133 ___746_Output.Color $tmp1132 	%argrw{"wrr"}
	mix		___746_Output.Color ___746_Output.Color $tmp1133 ___754_remainder 	%argrw{"wrrr"}
	assign		___746_Output.Color ___746_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 2954 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___746_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp1136.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp1136.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1136.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1136.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 2954 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1135.x ___748_octave.Position.x $tmp1136.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1135.y ___748_octave.Position.y $tmp1136.y 	%argrw{"wrr"}
	mul		$tmp1135.z ___748_octave.Position.z $tmp1136.z 	%argrw{"wrr"}
	mul		$tmp1135.w ___748_octave.Position.w $tmp1136.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	functioncall	$const55 2959 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		$tmp1134.x ___746_Output.Position.x $tmp1135.x ___746_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		$tmp1134.y ___746_Output.Position.y $tmp1135.y ___746_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		$tmp1134.z ___746_Output.Position.z $tmp1135.z ___746_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		$tmp1134.w ___746_Output.Position.w $tmp1135.w ___746_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	functioncall	$const55 2964 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___746_Output.Position.x ___746_Output.Position.x $tmp1134.x ___754_remainder 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___746_Output.Position.y ___746_Output.Position.y $tmp1134.y ___754_remainder 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___746_Output.Position.z ___746_Output.Position.z $tmp1134.z ___754_remainder 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___746_Output.Position.w ___746_Output.Position.w $tmp1134.w ___754_remainder 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	add		___747_i ___747_i $const15 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"wrr"}
	if		params.normalize 2971 2971 	%argrw{"r"}
	mul		$tmp1137 ___746_max_amplitude params.max_distance 	%argrw{"wrr"}
	div		___746_Output.Distance ___746_Output.Distance $tmp1137 	%argrw{"wrr"}
	assign		___746_Output.Distance ___746_Output.Distance 	%argrw{"wr"}
	div		___746_Output.Color ___746_Output.Color ___746_max_amplitude 	%argrw{"wrr"}
	assign		___746_Output.Color ___746_Output.Color 	%argrw{"wr"}
	functioncall	$const56 2989 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:125
#   return vector4((b != 0.0) ? a.x / b : 0.0,
	neq		$tmp1138 params.scale $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{125} %argrw{"wrr"}
	if		$tmp1138 2975 2976 	%argrw{"r"}
	div		___746_Output.Position.x ___746_Output.Position.x params.scale 	%argrw{"wrr"}
	assign		___746_Output.Position.x $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:126
#                  (b != 0.0) ? a.y / b : 0.0,
	neq		$tmp1139 params.scale $const1 	%line{126} %argrw{"wrr"}
	if		$tmp1139 2979 2980 	%argrw{"r"}
	div		___746_Output.Position.y ___746_Output.Position.y params.scale 	%argrw{"wrr"}
	assign		___746_Output.Position.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:127
#                  (b != 0.0) ? a.z / b : 0.0,
	neq		$tmp1140 params.scale $const1 	%line{127} %argrw{"wrr"}
	if		$tmp1140 2983 2984 	%argrw{"r"}
	div		___746_Output.Position.z ___746_Output.Position.z params.scale 	%argrw{"wrr"}
	assign		___746_Output.Position.z $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:128
#                  (b != 0.0) ? a.w / b : 0.0);
	neq		$tmp1141 params.scale $const1 	%line{128} %argrw{"wrr"}
	if		$tmp1141 2987 2988 	%argrw{"r"}
	div		___746_Output.Position.w ___746_Output.Position.w params.scale 	%argrw{"wrr"}
	assign		___746_Output.Position.w $const1 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:133
# FRACTAL_VORONOI_X_FX(vector3)
	assign		___797_Output.Distance ___746_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{133} %argrw{"wr"}
	assign		___797_Output.Color ___746_Output.Color 	%argrw{"wr"}
	assign		___797_Output.Position.x ___746_Output.Position.x 	%argrw{"wr"}
	assign		___797_Output.Position.y ___746_Output.Position.y 	%argrw{"wr"}
	assign		___797_Output.Position.z ___746_Output.Position.z 	%argrw{"wr"}
	assign		___797_Output.Position.w ___746_Output.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:120
#       Distance = Output.Distance;
	assign		Distance ___797_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{120} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:121
#       Color = Output.Color;
	assign		Color ___797_Output.Color 	%line{121} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:122
#       Position = vector3(Output.Position.x, Output.Position.y, Output.Position.z);
	point		Position ___797_Output.Position.x ___797_Output.Position.y ___797_Output.Position.z 	%line{122} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:124
#     else if (dimensions == "4D") {
	eq		$tmp1142 dimensions $const37 	%line{124} %argrw{"wrr"}
	if		$tmp1142 3953 3954 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:125
#       params.max_distance = voronoi_distance(vector4(0.0, 0.0, 0.0, 0.0),
	assign		$tmp1144.x $const1 	%line{125} %argrw{"wr"}
	assign		$tmp1144.y $const1 	%argrw{"wr"}
	assign		$tmp1144.z $const1 	%argrw{"wr"}
	assign		$tmp1144.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:126
#                                              vector4(0.5 + 0.5 * params.randomness,
	mul		$tmp1146 $const6 params.randomness 	%line{126} %argrw{"wrr"}
	add		$tmp1145.x $const6 $tmp1146 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:127
#                                                      0.5 + 0.5 * params.randomness,
	mul		$tmp1147 $const6 params.randomness 	%line{127} %argrw{"wrr"}
	add		$tmp1145.y $const6 $tmp1147 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:128
#                                                      0.5 + 0.5 * params.randomness,
	mul		$tmp1148 $const6 params.randomness 	%line{128} %argrw{"wrr"}
	add		$tmp1145.z $const6 $tmp1148 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:129
#                                                      0.5 + 0.5 * params.randomness),
	mul		$tmp1149 $const6 params.randomness 	%line{129} %argrw{"wrr"}
	add		$tmp1145.w $const6 $tmp1149 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:125
#       params.max_distance = voronoi_distance(vector4(0.0, 0.0, 0.0, 0.0),
	functioncall	$const47 3081 	%line{125} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:97
#   if (params.metric == "euclidean") {
	eq		$tmp1150 params.metric $const57 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{97} %argrw{"wrr"}
	if		$tmp1150 3031 3081 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	functioncall	$const42 3030 	%line{98} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3021 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1151.x $tmp1144.x $tmp1145.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1151.y $tmp1144.y $tmp1145.y 	%argrw{"wrr"}
	sub		$tmp1151.z $tmp1144.z $tmp1145.z 	%argrw{"wrr"}
	sub		$tmp1151.w $tmp1144.w $tmp1145.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 3030 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1152 $tmp1151.x $tmp1151.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1153 $tmp1151.y $tmp1151.y 	%argrw{"wrr"}
	add		$tmp1154 $tmp1152 $tmp1153 	%argrw{"wrr"}
	mul		$tmp1155 $tmp1151.z $tmp1151.z 	%argrw{"wrr"}
	add		$tmp1156 $tmp1154 $tmp1155 	%argrw{"wrr"}
	mul		$tmp1157 $tmp1151.w $tmp1151.w 	%argrw{"wrr"}
	add		$tmp1158 $tmp1156 $tmp1157 	%argrw{"wrr"}
	sqrt		$tmp1143 $tmp1158 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{98}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:100
#   else if (params.metric == "manhattan") {
	eq		$tmp1159 params.metric $const58 	%line{100} %argrw{"wrr"}
	if		$tmp1159 3045 3081 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:101
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp1161 $tmp1144.x $tmp1145.x 	%line{101} %argrw{"wrr"}
	abs		$tmp1160 $tmp1161 	%argrw{"wr"}
	sub		$tmp1163 $tmp1144.y $tmp1145.y 	%argrw{"wrr"}
	abs		$tmp1162 $tmp1163 	%argrw{"wr"}
	add		$tmp1164 $tmp1160 $tmp1162 	%argrw{"wrr"}
	sub		$tmp1166 $tmp1144.z $tmp1145.z 	%argrw{"wrr"}
	abs		$tmp1165 $tmp1166 	%argrw{"wr"}
	add		$tmp1167 $tmp1164 $tmp1165 	%argrw{"wrr"}
	sub		$tmp1169 $tmp1144.w $tmp1145.w 	%argrw{"wrr"}
	abs		$tmp1168 $tmp1169 	%argrw{"wr"}
	add		$tmp1143 $tmp1167 $tmp1168 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:103
#   else if (params.metric == "chebychev") {
	eq		$tmp1170 params.metric $const59 	%line{103} %argrw{"wrr"}
	if		$tmp1170 3059 3081 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:104
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp1172 $tmp1144.x $tmp1145.x 	%line{104} %argrw{"wrr"}
	abs		$tmp1171 $tmp1172 	%argrw{"wr"}
	sub		$tmp1175 $tmp1144.y $tmp1145.y 	%argrw{"wrr"}
	abs		$tmp1174 $tmp1175 	%argrw{"wr"}
	sub		$tmp1178 $tmp1144.z $tmp1145.z 	%argrw{"wrr"}
	abs		$tmp1177 $tmp1178 	%argrw{"wr"}
	sub		$tmp1180 $tmp1144.w $tmp1145.w 	%argrw{"wrr"}
	abs		$tmp1179 $tmp1180 	%argrw{"wr"}
	max		$tmp1176 $tmp1177 $tmp1179 	%argrw{"wrr"}
	max		$tmp1173 $tmp1174 $tmp1176 	%argrw{"wrr"}
	max		$tmp1143 $tmp1171 $tmp1173 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:106
#   else if (params.metric == "minkowski") {
	eq		$tmp1181 params.metric $const60 	%line{106} %argrw{"wrr"}
	if		$tmp1181 3079 3081 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	sub		$tmp1184 $tmp1144.x $tmp1145.x 	%line{107} %argrw{"wrr"}
	abs		$tmp1183 $tmp1184 	%argrw{"wr"}
	pow		$tmp1182 $tmp1183 params.exponent 	%argrw{"wrr"}
	sub		$tmp1187 $tmp1144.y $tmp1145.y 	%argrw{"wrr"}
	abs		$tmp1186 $tmp1187 	%argrw{"wr"}
	pow		$tmp1185 $tmp1186 params.exponent 	%argrw{"wrr"}
	add		$tmp1188 $tmp1182 $tmp1185 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1191 $tmp1144.z $tmp1145.z 	%line{108} %argrw{"wrr"}
	abs		$tmp1190 $tmp1191 	%argrw{"wr"}
	pow		$tmp1189 $tmp1190 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	add		$tmp1192 $tmp1188 $tmp1189 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1195 $tmp1144.w $tmp1145.w 	%line{108} %argrw{"wrr"}
	abs		$tmp1194 $tmp1195 	%argrw{"wr"}
	pow		$tmp1193 $tmp1194 params.exponent 	%argrw{"wrr"}
	add		$tmp1196 $tmp1192 $tmp1193 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	div		$tmp1197 $const4 params.exponent 	%line{109} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	pow		$tmp1143 $tmp1196 $tmp1197 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	return	%line{109}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:112
#     return 0.0;
	assign		$tmp1143 $const1 	%line{112} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:131
#                             ((params.feature == "f2") ? 2.0 : 1.0);
	eq		$tmp1199 params.feature $const43 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{131} %argrw{"wrr"}
	if		$tmp1199 3084 3085 	%argrw{"r"}
	assign		$tmp1198 $const5 	%argrw{"wr"}
	assign		$tmp1198 $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:130
#                                              params) *
	mul		params.max_distance $tmp1143 $tmp1198 	%line{130} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:125
#       params.max_distance = voronoi_distance(vector4(0.0, 0.0, 0.0, 0.0),
	assign		params.max_distance params.max_distance 	%line{125} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:132
#       Output = fractal_voronoi_x_fx(params, vector4(coord.x, coord.y, coord.z, w));
	compref		$tmp1200.x coord $const11 	%line{132} %argrw{"wrr"}
	compref		$tmp1200.y coord $const15 	%argrw{"wrr"}
	compref		$tmp1200.z coord $const35 	%argrw{"wrr"}
	assign		$tmp1200.w w 	%argrw{"wr"}
	functioncall	$const44 3949 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	assign		___765_amplitude $const4 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"wr"}
	assign		___765_max_amplitude $const1 	%argrw{"wr"}
	assign		___765_scale $const4 	%argrw{"wr"}
	assign		___765_Output.Distance $const1 	%argrw{"wr"}
	assign		___765_Output.Color $const45 	%argrw{"wr"}
	assign		___765_Output.Position.x $const1 	%argrw{"wr"}
	assign		___765_Output.Position.y $const1 	%argrw{"wr"}
	assign		___765_Output.Position.z $const1 	%argrw{"wr"}
	assign		___765_Output.Position.w $const1 	%argrw{"wr"}
	eq		$tmp1201 params.detail $const1 	%argrw{"wrr"}
	neq		$tmp1202 $tmp1201 $const11 	%argrw{"wrr"}
	if		$tmp1202 3104 3107 	%argrw{"r"}
	eq		$tmp1203 params.roughness $const1 	%argrw{"wrr"}
	neq		$tmp1204 $tmp1203 $const11 	%argrw{"wrr"}
	assign		$tmp1202 $tmp1204 	%argrw{"wr"}
	assign		___765_zero_input $tmp1202 	%argrw{"wr"}
	for		$tmp1207 3110 3113 3918 3919 	%argrw{"r"}
	assign		___766_i $const11 	%argrw{"wr"}
	ceil		$tmp1205 params.detail 	%argrw{"wr"}
	le		$tmp1206 ___766_i $tmp1205 	%argrw{"wrr"}
	neq		$tmp1207 $tmp1206 $const11 	%argrw{"wrr"}
	eq		$tmp1208 params.feature $const43 	%argrw{"wrr"}
	if		$tmp1208 3369 3847 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3125 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1210.x ___765_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1210.y ___765_scale 	%argrw{"wr"}
	assign		$tmp1210.z ___765_scale 	%argrw{"wr"}
	assign		$tmp1210.w ___765_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3125 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1209.x $tmp1200.x $tmp1210.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1209.y $tmp1200.y $tmp1210.y 	%argrw{"wrr"}
	mul		$tmp1209.z $tmp1200.z $tmp1210.z 	%argrw{"wrr"}
	mul		$tmp1209.w $tmp1200.w $tmp1210.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	functioncall	$const46 3369 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:793
#   vector4 cellPosition = floor(coord);
	functioncall	$const18 3131 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{793} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:166
#     return vector4 (floor(in.x),
	floor		___658_cellPosition.x $tmp1209.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{166} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:167
#                     floor(in.y),
	floor		___658_cellPosition.y $tmp1209.y 	%line{167} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:168
#                     floor(in.z),
	floor		___658_cellPosition.z $tmp1209.z 	%line{168} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:169
#                     floor(in.w));
	floor		___658_cellPosition.w $tmp1209.w 	%line{169} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3136 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___658_localPosition.x $tmp1209.x ___658_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___658_localPosition.y $tmp1209.y ___658_cellPosition.y 	%argrw{"wrr"}
	sub		___658_localPosition.z $tmp1209.z ___658_cellPosition.z 	%argrw{"wrr"}
	sub		___658_localPosition.w $tmp1209.w ___658_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:796
#   float distanceF1 = FLT_MAX;
	assign		___658_distanceF1 $const20 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{796} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:797
#   float distanceF2 = FLT_MAX;
	assign		___658_distanceF2 $const20 	%line{797} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:798
#   vector4 offsetF1 = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___658_offsetF1.x $const1 	%line{798} %argrw{"wr"}
	assign		___658_offsetF1.y $const1 	%argrw{"wr"}
	assign		___658_offsetF1.z $const1 	%argrw{"wr"}
	assign		___658_offsetF1.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:799
#   vector4 positionF1 = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___658_positionF1.x $const1 	%line{799} %argrw{"wr"}
	assign		___658_positionF1.y $const1 	%argrw{"wr"}
	assign		___658_positionF1.z $const1 	%argrw{"wr"}
	assign		___658_positionF1.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:800
#   vector4 offsetF2 = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___658_offsetF2.x $const1 	%line{800} %argrw{"wr"}
	assign		___658_offsetF2.y $const1 	%argrw{"wr"}
	assign		___658_offsetF2.z $const1 	%argrw{"wr"}
	assign		___658_offsetF2.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:801
#   vector4 positionF2 = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___658_positionF2.x $const1 	%line{801} %argrw{"wr"}
	assign		___658_positionF2.y $const1 	%argrw{"wr"}
	assign		___658_positionF2.z $const1 	%argrw{"wr"}
	assign		___658_positionF2.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:802
#   for (int u = -1; u <= 1; u++) {
	for		$tmp1212 3156 3158 3325 3327 	%line{802} %argrw{"r"}
	assign		___659_u $const21 	%argrw{"wr"}
	le		$tmp1211 ___659_u $const15 	%argrw{"wrr"}
	neq		$tmp1212 $tmp1211 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:803
#     for (int k = -1; k <= 1; k++) {
	for		$tmp1214 3160 3162 3323 3325 	%line{803} %argrw{"r"}
	assign		___661_k $const21 	%argrw{"wr"}
	le		$tmp1213 ___661_k $const15 	%argrw{"wrr"}
	neq		$tmp1214 $tmp1213 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:804
#       for (int j = -1; j <= 1; j++) {
	for		$tmp1216 3164 3166 3321 3323 	%line{804} %argrw{"r"}
	assign		___663_j $const21 	%argrw{"wr"}
	le		$tmp1215 ___663_j $const15 	%argrw{"wrr"}
	neq		$tmp1216 $tmp1215 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:805
#         for (int i = -1; i <= 1; i++) {
	for		$tmp1218 3168 3170 3319 3321 	%line{805} %argrw{"r"}
	assign		___665_i $const21 	%argrw{"wr"}
	le		$tmp1217 ___665_i $const15 	%argrw{"wrr"}
	neq		$tmp1218 $tmp1217 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:806
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___666_cellOffset.x ___665_i 	%line{806} %argrw{"wr"}
	assign		___666_cellOffset.y ___663_j 	%argrw{"wr"}
	assign		___666_cellOffset.z ___661_k 	%argrw{"wr"}
	assign		___666_cellOffset.w ___659_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3179 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1221.x ___658_cellPosition.x ___666_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1221.y ___658_cellPosition.y ___666_cellOffset.y 	%argrw{"wrr"}
	add		$tmp1221.z ___658_cellPosition.z ___666_cellOffset.z 	%argrw{"wrr"}
	add		$tmp1221.w ___658_cellPosition.w ___666_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:807
#           vector4 pointPosition = cellOffset + hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 3204 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{807} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 3183 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1222 $tmp1221.x $tmp1221.y $tmp1221.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1220.x $tmp1222 $tmp1221.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp1223.x $tmp1221.w 	%line{50} %argrw{"wr"}
	assign		$tmp1223.y $tmp1221.x 	%argrw{"wr"}
	assign		$tmp1223.z $tmp1221.y 	%argrw{"wr"}
	assign		$tmp1223.w $tmp1221.z 	%argrw{"wr"}
	functioncall	$const36 3190 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1224 $tmp1223.x $tmp1223.y $tmp1223.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1220.y $tmp1224 $tmp1223.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp1225.x $tmp1221.z 	%line{51} %argrw{"wr"}
	assign		$tmp1225.y $tmp1221.w 	%argrw{"wr"}
	assign		$tmp1225.z $tmp1221.x 	%argrw{"wr"}
	assign		$tmp1225.w $tmp1221.y 	%argrw{"wr"}
	functioncall	$const36 3197 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1226 $tmp1225.x $tmp1225.y $tmp1225.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1220.z $tmp1226 $tmp1225.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp1227.x $tmp1221.y 	%line{52} %argrw{"wr"}
	assign		$tmp1227.y $tmp1221.z 	%argrw{"wr"}
	assign		$tmp1227.z $tmp1221.w 	%argrw{"wr"}
	assign		$tmp1227.w $tmp1221.x 	%argrw{"wr"}
	functioncall	$const36 3204 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1228 $tmp1227.x $tmp1227.y $tmp1227.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1220.w $tmp1228 $tmp1227.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3214 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1229.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1229.y params.randomness 	%argrw{"wr"}
	assign		$tmp1229.z params.randomness 	%argrw{"wr"}
	assign		$tmp1229.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3214 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1219.x $tmp1220.x $tmp1229.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1219.y $tmp1220.y $tmp1229.y 	%argrw{"wrr"}
	mul		$tmp1219.z $tmp1220.z $tmp1229.z 	%argrw{"wrr"}
	mul		$tmp1219.w $tmp1220.w $tmp1229.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3219 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___666_pointPosition.x ___666_cellOffset.x $tmp1219.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___666_pointPosition.y ___666_cellOffset.y $tmp1219.y 	%argrw{"wrr"}
	add		___666_pointPosition.z ___666_cellOffset.z $tmp1219.z 	%argrw{"wrr"}
	add		___666_pointPosition.w ___666_cellOffset.w $tmp1219.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:809
#           float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 3288 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{809} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:97
#   if (params.metric == "euclidean") {
	eq		$tmp1230 params.metric $const57 	%line{97} %argrw{"wrr"}
	if		$tmp1230 3238 3288 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	functioncall	$const42 3237 	%line{98} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3228 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1231.x ___666_pointPosition.x ___658_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1231.y ___666_pointPosition.y ___658_localPosition.y 	%argrw{"wrr"}
	sub		$tmp1231.z ___666_pointPosition.z ___658_localPosition.z 	%argrw{"wrr"}
	sub		$tmp1231.w ___666_pointPosition.w ___658_localPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 3237 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1232 $tmp1231.x $tmp1231.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1233 $tmp1231.y $tmp1231.y 	%argrw{"wrr"}
	add		$tmp1234 $tmp1232 $tmp1233 	%argrw{"wrr"}
	mul		$tmp1235 $tmp1231.z $tmp1231.z 	%argrw{"wrr"}
	add		$tmp1236 $tmp1234 $tmp1235 	%argrw{"wrr"}
	mul		$tmp1237 $tmp1231.w $tmp1231.w 	%argrw{"wrr"}
	add		$tmp1238 $tmp1236 $tmp1237 	%argrw{"wrr"}
	sqrt		___666_distanceToPoint $tmp1238 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{98}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:100
#   else if (params.metric == "manhattan") {
	eq		$tmp1239 params.metric $const58 	%line{100} %argrw{"wrr"}
	if		$tmp1239 3252 3288 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:101
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp1241 ___666_pointPosition.x ___658_localPosition.x 	%line{101} %argrw{"wrr"}
	abs		$tmp1240 $tmp1241 	%argrw{"wr"}
	sub		$tmp1243 ___666_pointPosition.y ___658_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1242 $tmp1243 	%argrw{"wr"}
	add		$tmp1244 $tmp1240 $tmp1242 	%argrw{"wrr"}
	sub		$tmp1246 ___666_pointPosition.z ___658_localPosition.z 	%argrw{"wrr"}
	abs		$tmp1245 $tmp1246 	%argrw{"wr"}
	add		$tmp1247 $tmp1244 $tmp1245 	%argrw{"wrr"}
	sub		$tmp1249 ___666_pointPosition.w ___658_localPosition.w 	%argrw{"wrr"}
	abs		$tmp1248 $tmp1249 	%argrw{"wr"}
	add		___666_distanceToPoint $tmp1247 $tmp1248 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:103
#   else if (params.metric == "chebychev") {
	eq		$tmp1250 params.metric $const59 	%line{103} %argrw{"wrr"}
	if		$tmp1250 3266 3288 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:104
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp1252 ___666_pointPosition.x ___658_localPosition.x 	%line{104} %argrw{"wrr"}
	abs		$tmp1251 $tmp1252 	%argrw{"wr"}
	sub		$tmp1255 ___666_pointPosition.y ___658_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1254 $tmp1255 	%argrw{"wr"}
	sub		$tmp1258 ___666_pointPosition.z ___658_localPosition.z 	%argrw{"wrr"}
	abs		$tmp1257 $tmp1258 	%argrw{"wr"}
	sub		$tmp1260 ___666_pointPosition.w ___658_localPosition.w 	%argrw{"wrr"}
	abs		$tmp1259 $tmp1260 	%argrw{"wr"}
	max		$tmp1256 $tmp1257 $tmp1259 	%argrw{"wrr"}
	max		$tmp1253 $tmp1254 $tmp1256 	%argrw{"wrr"}
	max		___666_distanceToPoint $tmp1251 $tmp1253 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:106
#   else if (params.metric == "minkowski") {
	eq		$tmp1261 params.metric $const60 	%line{106} %argrw{"wrr"}
	if		$tmp1261 3286 3288 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	sub		$tmp1264 ___666_pointPosition.x ___658_localPosition.x 	%line{107} %argrw{"wrr"}
	abs		$tmp1263 $tmp1264 	%argrw{"wr"}
	pow		$tmp1262 $tmp1263 params.exponent 	%argrw{"wrr"}
	sub		$tmp1267 ___666_pointPosition.y ___658_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1266 $tmp1267 	%argrw{"wr"}
	pow		$tmp1265 $tmp1266 params.exponent 	%argrw{"wrr"}
	add		$tmp1268 $tmp1262 $tmp1265 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1271 ___666_pointPosition.z ___658_localPosition.z 	%line{108} %argrw{"wrr"}
	abs		$tmp1270 $tmp1271 	%argrw{"wr"}
	pow		$tmp1269 $tmp1270 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	add		$tmp1272 $tmp1268 $tmp1269 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1275 ___666_pointPosition.w ___658_localPosition.w 	%line{108} %argrw{"wrr"}
	abs		$tmp1274 $tmp1275 	%argrw{"wr"}
	pow		$tmp1273 $tmp1274 params.exponent 	%argrw{"wrr"}
	add		$tmp1276 $tmp1272 $tmp1273 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	div		$tmp1277 $const4 params.exponent 	%line{109} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	pow		___666_distanceToPoint $tmp1276 $tmp1277 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	return	%line{109}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:112
#     return 0.0;
	assign		___666_distanceToPoint $const1 	%line{112} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:810
#           if (distanceToPoint < distanceF1) {
	lt		$tmp1278 ___666_distanceToPoint ___658_distanceF1 	%line{810} %argrw{"wrr"}
	if		$tmp1278 3308 3319 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:811
#             distanceF2 = distanceF1;
	assign		___658_distanceF2 ___658_distanceF1 	%line{811} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:812
#             distanceF1 = distanceToPoint;
	assign		___658_distanceF1 ___666_distanceToPoint 	%line{812} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:813
#             offsetF2 = offsetF1;
	assign		___658_offsetF2.x ___658_offsetF1.x 	%line{813} %argrw{"wr"}
	assign		___658_offsetF2.y ___658_offsetF1.y 	%argrw{"wr"}
	assign		___658_offsetF2.z ___658_offsetF1.z 	%argrw{"wr"}
	assign		___658_offsetF2.w ___658_offsetF1.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:814
#             offsetF1 = cellOffset;
	assign		___658_offsetF1.x ___666_cellOffset.x 	%line{814} %argrw{"wr"}
	assign		___658_offsetF1.y ___666_cellOffset.y 	%argrw{"wr"}
	assign		___658_offsetF1.z ___666_cellOffset.z 	%argrw{"wr"}
	assign		___658_offsetF1.w ___666_cellOffset.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:815
#             positionF2 = positionF1;
	assign		___658_positionF2.x ___658_positionF1.x 	%line{815} %argrw{"wr"}
	assign		___658_positionF2.y ___658_positionF1.y 	%argrw{"wr"}
	assign		___658_positionF2.z ___658_positionF1.z 	%argrw{"wr"}
	assign		___658_positionF2.w ___658_positionF1.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:816
#             positionF1 = pointPosition;
	assign		___658_positionF1.x ___666_pointPosition.x 	%line{816} %argrw{"wr"}
	assign		___658_positionF1.y ___666_pointPosition.y 	%argrw{"wr"}
	assign		___658_positionF1.z ___666_pointPosition.z 	%argrw{"wr"}
	assign		___658_positionF1.w ___666_pointPosition.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:818
#           else if (distanceToPoint < distanceF2) {
	lt		$tmp1279 ___666_distanceToPoint ___658_distanceF2 	%line{818} %argrw{"wrr"}
	if		$tmp1279 3319 3319 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:819
#             distanceF2 = distanceToPoint;
	assign		___658_distanceF2 ___666_distanceToPoint 	%line{819} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:820
#             offsetF2 = cellOffset;
	assign		___658_offsetF2.x ___666_cellOffset.x 	%line{820} %argrw{"wr"}
	assign		___658_offsetF2.y ___666_cellOffset.y 	%argrw{"wr"}
	assign		___658_offsetF2.z ___666_cellOffset.z 	%argrw{"wr"}
	assign		___658_offsetF2.w ___666_cellOffset.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:821
#             positionF2 = pointPosition;
	assign		___658_positionF2.x ___666_pointPosition.x 	%line{821} %argrw{"wr"}
	assign		___658_positionF2.y ___666_pointPosition.y 	%argrw{"wr"}
	assign		___658_positionF2.z ___666_pointPosition.z 	%argrw{"wr"}
	assign		___658_positionF2.w ___666_pointPosition.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:805
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp1280 ___665_i 	%line{805} %argrw{"wr"}
	add		___665_i ___665_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:804
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp1281 ___663_j 	%line{804} %argrw{"wr"}
	add		___663_j ___663_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:803
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp1282 ___661_k 	%line{803} %argrw{"wr"}
	add		___661_k ___661_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:802
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp1283 ___659_u 	%line{802} %argrw{"wr"}
	add		___659_u ___659_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:829
#   octave.Distance = distanceF2;
	assign		___658_octave.Distance ___658_distanceF2 	%line{829} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3333 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1284.x ___658_cellPosition.x ___658_offsetF2.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1284.y ___658_cellPosition.y ___658_offsetF2.y 	%argrw{"wrr"}
	add		$tmp1284.z ___658_cellPosition.z ___658_offsetF2.z 	%argrw{"wrr"}
	add		$tmp1284.w ___658_cellPosition.w ___658_offsetF2.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:830
#   octave.Color = hash_vector4_to_color(cellPosition + offsetF2);
	functioncall	$const63 3352 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{830} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:80
#   return color(hash_vector4_to_float(k),
	functioncall	$const36 3337 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{80} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1286 $tmp1284.x $tmp1284.y $tmp1284.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1285 $tmp1286 $tmp1284.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:81
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp1288.x $tmp1284.z 	%line{81} %argrw{"wr"}
	assign		$tmp1288.y $tmp1284.x 	%argrw{"wr"}
	assign		$tmp1288.z $tmp1284.w 	%argrw{"wr"}
	assign		$tmp1288.w $tmp1284.y 	%argrw{"wr"}
	functioncall	$const36 3344 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1289 $tmp1288.x $tmp1288.y $tmp1288.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1287 $tmp1289 $tmp1288.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:82
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp1291.x $tmp1284.w 	%line{82} %argrw{"wr"}
	assign		$tmp1291.y $tmp1284.z 	%argrw{"wr"}
	assign		$tmp1291.z $tmp1284.y 	%argrw{"wr"}
	assign		$tmp1291.w $tmp1284.x 	%argrw{"wr"}
	functioncall	$const36 3351 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1292 $tmp1291.x $tmp1291.y $tmp1291.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1290 $tmp1292 $tmp1291.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:80
#   return color(hash_vector4_to_float(k),
	color		___658_octave.Color $tmp1285 $tmp1287 $tmp1290 	%line{80} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:830
#   octave.Color = hash_vector4_to_color(cellPosition + offsetF2);
	assign		___658_octave.Color ___658_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{830} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3358 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1293.x ___658_positionF2.x ___658_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1293.y ___658_positionF2.y ___658_cellPosition.y 	%argrw{"wrr"}
	add		$tmp1293.z ___658_positionF2.z ___658_cellPosition.z 	%argrw{"wrr"}
	add		$tmp1293.w ___658_positionF2.w ___658_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:831
#   octave.Position = voronoi_position(positionF2 + cellPosition);
	functioncall	$const49 3363 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{831} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:715
#   return coord;
	assign		___658_octave.Position.x $tmp1293.x 	%line{715} %argrw{"wr"}
	assign		___658_octave.Position.y $tmp1293.y 	%argrw{"wr"}
	assign		___658_octave.Position.z $tmp1293.z 	%argrw{"wr"}
	assign		___658_octave.Position.w $tmp1293.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:832
#   return octave;
	assign		___767_octave.Distance ___658_octave.Distance 	%line{832} %argrw{"wr"}
	assign		___767_octave.Color ___658_octave.Color 	%argrw{"wr"}
	assign		___767_octave.Position.x ___658_octave.Position.x 	%argrw{"wr"}
	assign		___767_octave.Position.y ___658_octave.Position.y 	%argrw{"wr"}
	assign		___767_octave.Position.z ___658_octave.Position.z 	%argrw{"wr"}
	assign		___767_octave.Position.w ___658_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	eq		$tmp1294 params.feature $const50 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"wrr"}
	neq		$tmp1295 $tmp1294 $const11 	%argrw{"wrr"}
	if		$tmp1295 3375 3375 	%argrw{"r"}
	neq		$tmp1296 params.smoothness $const1 	%argrw{"wrr"}
	neq		$tmp1297 $tmp1296 $const11 	%argrw{"wrr"}
	assign		$tmp1295 $tmp1297 	%argrw{"wr"}
	if		$tmp1295 3622 3847 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3386 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1299.x ___765_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1299.y ___765_scale 	%argrw{"wr"}
	assign		$tmp1299.z ___765_scale 	%argrw{"wr"}
	assign		$tmp1299.w ___765_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3386 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1298.x $tmp1200.x $tmp1299.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1298.y $tmp1200.y $tmp1299.y 	%argrw{"wrr"}
	mul		$tmp1298.z $tmp1200.z $tmp1299.z 	%argrw{"wrr"}
	mul		$tmp1298.w $tmp1200.w $tmp1299.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	functioncall	$const51 3622 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:753
#   vector4 cellPosition = floor(coord);
	functioncall	$const18 3392 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{753} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:166
#     return vector4 (floor(in.x),
	floor		___649_cellPosition.x $tmp1298.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{166} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:167
#                     floor(in.y),
	floor		___649_cellPosition.y $tmp1298.y 	%line{167} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:168
#                     floor(in.z),
	floor		___649_cellPosition.z $tmp1298.z 	%line{168} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:169
#                     floor(in.w));
	floor		___649_cellPosition.w $tmp1298.w 	%line{169} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3397 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___649_localPosition.x $tmp1298.x ___649_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___649_localPosition.y $tmp1298.y ___649_cellPosition.y 	%argrw{"wrr"}
	sub		___649_localPosition.z $tmp1298.z ___649_cellPosition.z 	%argrw{"wrr"}
	sub		___649_localPosition.w $tmp1298.w ___649_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:756
#   float smoothDistance = 0.0;
	assign		___649_smoothDistance $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{756} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:757
#   vector3 smoothColor = vector3(0.0, 0.0, 0.0);
	assign		___649_smoothColor $const33 	%line{757} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:758
#   vector4 smoothPosition = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___649_smoothPosition.x $const1 	%line{758} %argrw{"wr"}
	assign		___649_smoothPosition.y $const1 	%argrw{"wr"}
	assign		___649_smoothPosition.z $const1 	%argrw{"wr"}
	assign		___649_smoothPosition.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:759
#   float h = -1.0;
	assign		___649_h $const14 	%line{759} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:760
#   for (int u = -2; u <= 2; u++) {
	for		$tmp1301 3406 3408 3601 3603 	%line{760} %argrw{"r"}
	assign		___650_u $const52 	%argrw{"wr"}
	le		$tmp1300 ___650_u $const35 	%argrw{"wrr"}
	neq		$tmp1301 $tmp1300 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:761
#     for (int k = -2; k <= 2; k++) {
	for		$tmp1303 3410 3412 3599 3601 	%line{761} %argrw{"r"}
	assign		___652_k $const52 	%argrw{"wr"}
	le		$tmp1302 ___652_k $const35 	%argrw{"wrr"}
	neq		$tmp1303 $tmp1302 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:762
#       for (int j = -2; j <= 2; j++) {
	for		$tmp1305 3414 3416 3597 3599 	%line{762} %argrw{"r"}
	assign		___654_j $const52 	%argrw{"wr"}
	le		$tmp1304 ___654_j $const35 	%argrw{"wrr"}
	neq		$tmp1305 $tmp1304 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:763
#         for (int i = -2; i <= 2; i++) {
	for		$tmp1307 3418 3420 3595 3597 	%line{763} %argrw{"r"}
	assign		___656_i $const52 	%argrw{"wr"}
	le		$tmp1306 ___656_i $const35 	%argrw{"wrr"}
	neq		$tmp1307 $tmp1306 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:764
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___657_cellOffset.x ___656_i 	%line{764} %argrw{"wr"}
	assign		___657_cellOffset.y ___654_j 	%argrw{"wr"}
	assign		___657_cellOffset.z ___652_k 	%argrw{"wr"}
	assign		___657_cellOffset.w ___650_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3429 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1310.x ___649_cellPosition.x ___657_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1310.y ___649_cellPosition.y ___657_cellOffset.y 	%argrw{"wrr"}
	add		$tmp1310.z ___649_cellPosition.z ___657_cellOffset.z 	%argrw{"wrr"}
	add		$tmp1310.w ___649_cellPosition.w ___657_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:765
#           vector4 pointPosition = cellOffset + hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 3454 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{765} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 3433 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1311 $tmp1310.x $tmp1310.y $tmp1310.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1309.x $tmp1311 $tmp1310.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp1312.x $tmp1310.w 	%line{50} %argrw{"wr"}
	assign		$tmp1312.y $tmp1310.x 	%argrw{"wr"}
	assign		$tmp1312.z $tmp1310.y 	%argrw{"wr"}
	assign		$tmp1312.w $tmp1310.z 	%argrw{"wr"}
	functioncall	$const36 3440 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1313 $tmp1312.x $tmp1312.y $tmp1312.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1309.y $tmp1313 $tmp1312.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp1314.x $tmp1310.z 	%line{51} %argrw{"wr"}
	assign		$tmp1314.y $tmp1310.w 	%argrw{"wr"}
	assign		$tmp1314.z $tmp1310.x 	%argrw{"wr"}
	assign		$tmp1314.w $tmp1310.y 	%argrw{"wr"}
	functioncall	$const36 3447 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1315 $tmp1314.x $tmp1314.y $tmp1314.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1309.z $tmp1315 $tmp1314.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp1316.x $tmp1310.y 	%line{52} %argrw{"wr"}
	assign		$tmp1316.y $tmp1310.z 	%argrw{"wr"}
	assign		$tmp1316.z $tmp1310.w 	%argrw{"wr"}
	assign		$tmp1316.w $tmp1310.x 	%argrw{"wr"}
	functioncall	$const36 3454 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1317 $tmp1316.x $tmp1316.y $tmp1316.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1309.w $tmp1317 $tmp1316.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3464 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1318.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1318.y params.randomness 	%argrw{"wr"}
	assign		$tmp1318.z params.randomness 	%argrw{"wr"}
	assign		$tmp1318.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3464 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1308.x $tmp1309.x $tmp1318.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1308.y $tmp1309.y $tmp1318.y 	%argrw{"wrr"}
	mul		$tmp1308.z $tmp1309.z $tmp1318.z 	%argrw{"wrr"}
	mul		$tmp1308.w $tmp1309.w $tmp1318.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3469 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___657_pointPosition.x ___657_cellOffset.x $tmp1308.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___657_pointPosition.y ___657_cellOffset.y $tmp1308.y 	%argrw{"wrr"}
	add		___657_pointPosition.z ___657_cellOffset.z $tmp1308.z 	%argrw{"wrr"}
	add		___657_pointPosition.w ___657_cellOffset.w $tmp1308.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:767
#           float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 3538 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{767} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:97
#   if (params.metric == "euclidean") {
	eq		$tmp1319 params.metric $const57 	%line{97} %argrw{"wrr"}
	if		$tmp1319 3488 3538 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	functioncall	$const42 3487 	%line{98} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3478 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1320.x ___657_pointPosition.x ___649_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1320.y ___657_pointPosition.y ___649_localPosition.y 	%argrw{"wrr"}
	sub		$tmp1320.z ___657_pointPosition.z ___649_localPosition.z 	%argrw{"wrr"}
	sub		$tmp1320.w ___657_pointPosition.w ___649_localPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 3487 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1321 $tmp1320.x $tmp1320.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1322 $tmp1320.y $tmp1320.y 	%argrw{"wrr"}
	add		$tmp1323 $tmp1321 $tmp1322 	%argrw{"wrr"}
	mul		$tmp1324 $tmp1320.z $tmp1320.z 	%argrw{"wrr"}
	add		$tmp1325 $tmp1323 $tmp1324 	%argrw{"wrr"}
	mul		$tmp1326 $tmp1320.w $tmp1320.w 	%argrw{"wrr"}
	add		$tmp1327 $tmp1325 $tmp1326 	%argrw{"wrr"}
	sqrt		___657_distanceToPoint $tmp1327 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{98}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:100
#   else if (params.metric == "manhattan") {
	eq		$tmp1328 params.metric $const58 	%line{100} %argrw{"wrr"}
	if		$tmp1328 3502 3538 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:101
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp1330 ___657_pointPosition.x ___649_localPosition.x 	%line{101} %argrw{"wrr"}
	abs		$tmp1329 $tmp1330 	%argrw{"wr"}
	sub		$tmp1332 ___657_pointPosition.y ___649_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1331 $tmp1332 	%argrw{"wr"}
	add		$tmp1333 $tmp1329 $tmp1331 	%argrw{"wrr"}
	sub		$tmp1335 ___657_pointPosition.z ___649_localPosition.z 	%argrw{"wrr"}
	abs		$tmp1334 $tmp1335 	%argrw{"wr"}
	add		$tmp1336 $tmp1333 $tmp1334 	%argrw{"wrr"}
	sub		$tmp1338 ___657_pointPosition.w ___649_localPosition.w 	%argrw{"wrr"}
	abs		$tmp1337 $tmp1338 	%argrw{"wr"}
	add		___657_distanceToPoint $tmp1336 $tmp1337 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:103
#   else if (params.metric == "chebychev") {
	eq		$tmp1339 params.metric $const59 	%line{103} %argrw{"wrr"}
	if		$tmp1339 3516 3538 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:104
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp1341 ___657_pointPosition.x ___649_localPosition.x 	%line{104} %argrw{"wrr"}
	abs		$tmp1340 $tmp1341 	%argrw{"wr"}
	sub		$tmp1344 ___657_pointPosition.y ___649_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1343 $tmp1344 	%argrw{"wr"}
	sub		$tmp1347 ___657_pointPosition.z ___649_localPosition.z 	%argrw{"wrr"}
	abs		$tmp1346 $tmp1347 	%argrw{"wr"}
	sub		$tmp1349 ___657_pointPosition.w ___649_localPosition.w 	%argrw{"wrr"}
	abs		$tmp1348 $tmp1349 	%argrw{"wr"}
	max		$tmp1345 $tmp1346 $tmp1348 	%argrw{"wrr"}
	max		$tmp1342 $tmp1343 $tmp1345 	%argrw{"wrr"}
	max		___657_distanceToPoint $tmp1340 $tmp1342 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:106
#   else if (params.metric == "minkowski") {
	eq		$tmp1350 params.metric $const60 	%line{106} %argrw{"wrr"}
	if		$tmp1350 3536 3538 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	sub		$tmp1353 ___657_pointPosition.x ___649_localPosition.x 	%line{107} %argrw{"wrr"}
	abs		$tmp1352 $tmp1353 	%argrw{"wr"}
	pow		$tmp1351 $tmp1352 params.exponent 	%argrw{"wrr"}
	sub		$tmp1356 ___657_pointPosition.y ___649_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1355 $tmp1356 	%argrw{"wr"}
	pow		$tmp1354 $tmp1355 params.exponent 	%argrw{"wrr"}
	add		$tmp1357 $tmp1351 $tmp1354 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1360 ___657_pointPosition.z ___649_localPosition.z 	%line{108} %argrw{"wrr"}
	abs		$tmp1359 $tmp1360 	%argrw{"wr"}
	pow		$tmp1358 $tmp1359 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	add		$tmp1361 $tmp1357 $tmp1358 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1364 ___657_pointPosition.w ___649_localPosition.w 	%line{108} %argrw{"wrr"}
	abs		$tmp1363 $tmp1364 	%argrw{"wr"}
	pow		$tmp1362 $tmp1363 params.exponent 	%argrw{"wrr"}
	add		$tmp1365 $tmp1361 $tmp1362 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	div		$tmp1366 $const4 params.exponent 	%line{109} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	pow		___657_distanceToPoint $tmp1365 $tmp1366 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	return	%line{109}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:112
#     return 0.0;
	assign		___657_distanceToPoint $const1 	%line{112} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:768
#           h = h == -1.0 ?
	eq		$tmp1367 ___649_h $const14 	%line{768} %argrw{"wrr"}
	if		$tmp1367 3541 3546 	%argrw{"r"}
	assign		___649_h $const4 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:772
#                              0.5 + 0.5 * (smoothDistance - distanceToPoint) / params.smoothness);
	sub		$tmp1368 ___649_smoothDistance ___657_distanceToPoint 	%line{772} %argrw{"wrr"}
	mul		$tmp1369 $const6 $tmp1368 	%argrw{"wrr"}
	div		$tmp1370 $tmp1369 params.smoothness 	%argrw{"wrr"}
	add		$tmp1371 $const6 $tmp1370 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:770
#                   smoothstep(0.0,
	smoothstep	___649_h $const1 $const4 $tmp1371 	%line{770} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:773
#           float correctionFactor = params.smoothness * h * (1.0 - h);
	mul		$tmp1372 params.smoothness ___649_h 	%line{773} %argrw{"wrr"}
	sub		$tmp1373 $const4 ___649_h 	%argrw{"wrr"}
	mul		___657_correctionFactor $tmp1372 $tmp1373 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:774
#           smoothDistance = mix(smoothDistance, distanceToPoint, h) - correctionFactor;
	mix		$tmp1374 ___649_smoothDistance ___657_distanceToPoint ___649_h 	%line{774} %argrw{"wrrr"}
	sub		___649_smoothDistance $tmp1374 ___657_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:775
#           correctionFactor /= 1.0 + 3.0 * params.smoothness;
	mul		$tmp1375 $const53 params.smoothness 	%line{775} %argrw{"wrr"}
	add		$tmp1376 $const4 $tmp1375 	%argrw{"wrr"}
	div		___657_correctionFactor ___657_correctionFactor $tmp1376 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3559 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1377.x ___649_cellPosition.x ___657_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1377.y ___649_cellPosition.y ___657_cellOffset.y 	%argrw{"wrr"}
	add		$tmp1377.z ___649_cellPosition.z ___657_cellOffset.z 	%argrw{"wrr"}
	add		$tmp1377.w ___649_cellPosition.w ___657_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:776
#           color cellColor = hash_vector4_to_color(cellPosition + cellOffset);
	functioncall	$const63 3578 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{776} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:80
#   return color(hash_vector4_to_float(k),
	functioncall	$const36 3563 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{80} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1379 $tmp1377.x $tmp1377.y $tmp1377.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1378 $tmp1379 $tmp1377.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:81
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp1381.x $tmp1377.z 	%line{81} %argrw{"wr"}
	assign		$tmp1381.y $tmp1377.x 	%argrw{"wr"}
	assign		$tmp1381.z $tmp1377.w 	%argrw{"wr"}
	assign		$tmp1381.w $tmp1377.y 	%argrw{"wr"}
	functioncall	$const36 3570 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1382 $tmp1381.x $tmp1381.y $tmp1381.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1380 $tmp1382 $tmp1381.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:82
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp1384.x $tmp1377.w 	%line{82} %argrw{"wr"}
	assign		$tmp1384.y $tmp1377.z 	%argrw{"wr"}
	assign		$tmp1384.z $tmp1377.y 	%argrw{"wr"}
	assign		$tmp1384.w $tmp1377.x 	%argrw{"wr"}
	functioncall	$const36 3577 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1385 $tmp1384.x $tmp1384.y $tmp1384.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1383 $tmp1385 $tmp1384.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:80
#   return color(hash_vector4_to_float(k),
	color		___657_cellColor $tmp1378 $tmp1380 $tmp1383 	%line{80} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:777
#           smoothColor = mix(smoothColor, cellColor, h) - correctionFactor;
	mix		$tmp1386 ___649_smoothColor ___657_cellColor ___649_h 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{777} %argrw{"wrrr"}
	sub		___649_smoothColor $tmp1386 ___657_correctionFactor 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:778
#           smoothPosition = mix(smoothPosition, pointPosition, h) - correctionFactor;
	functioncall	$const55 3585 	%line{778} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		$tmp1387.x ___649_smoothPosition.x ___657_pointPosition.x ___649_h 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		$tmp1387.y ___649_smoothPosition.y ___657_pointPosition.y ___649_h 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		$tmp1387.z ___649_smoothPosition.z ___657_pointPosition.z ___649_h 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		$tmp1387.w ___649_smoothPosition.w ___657_pointPosition.w ___649_h 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3595 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:66
#     return a - vector4(b, b, b, b);
	assign		$tmp1388.x ___657_correctionFactor 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{66} %argrw{"wr"}
	assign		$tmp1388.y ___657_correctionFactor 	%argrw{"wr"}
	assign		$tmp1388.z ___657_correctionFactor 	%argrw{"wr"}
	assign		$tmp1388.w ___657_correctionFactor 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3595 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___649_smoothPosition.x $tmp1387.x $tmp1388.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___649_smoothPosition.y $tmp1387.y $tmp1388.y 	%argrw{"wrr"}
	sub		___649_smoothPosition.z $tmp1387.z $tmp1388.z 	%argrw{"wrr"}
	sub		___649_smoothPosition.w $tmp1387.w $tmp1388.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:763
#         for (int i = -2; i <= 2; i++) {
	assign		$tmp1389 ___656_i 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{763} %argrw{"wr"}
	add		___656_i ___656_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:762
#       for (int j = -2; j <= 2; j++) {
	assign		$tmp1390 ___654_j 	%line{762} %argrw{"wr"}
	add		___654_j ___654_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:761
#     for (int k = -2; k <= 2; k++) {
	assign		$tmp1391 ___652_k 	%line{761} %argrw{"wr"}
	add		___652_k ___652_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:760
#   for (int u = -2; u <= 2; u++) {
	assign		$tmp1392 ___650_u 	%line{760} %argrw{"wr"}
	add		___650_u ___650_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:785
#   octave.Distance = smoothDistance;
	assign		___649_octave.Distance ___649_smoothDistance 	%line{785} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:786
#   octave.Color = smoothColor;
	assign		___649_octave.Color ___649_smoothColor 	%line{786} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3610 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1393.x ___649_cellPosition.x ___649_smoothPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1393.y ___649_cellPosition.y ___649_smoothPosition.y 	%argrw{"wrr"}
	add		$tmp1393.z ___649_cellPosition.z ___649_smoothPosition.z 	%argrw{"wrr"}
	add		$tmp1393.w ___649_cellPosition.w ___649_smoothPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:787
#   octave.Position = voronoi_position(cellPosition + smoothPosition);
	functioncall	$const49 3615 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{787} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:715
#   return coord;
	assign		___649_octave.Position.x $tmp1393.x 	%line{715} %argrw{"wr"}
	assign		___649_octave.Position.y $tmp1393.y 	%argrw{"wr"}
	assign		___649_octave.Position.z $tmp1393.z 	%argrw{"wr"}
	assign		___649_octave.Position.w $tmp1393.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:788
#   return octave;
	assign		___767_octave.Distance ___649_octave.Distance 	%line{788} %argrw{"wr"}
	assign		___767_octave.Color ___649_octave.Color 	%argrw{"wr"}
	assign		___767_octave.Position.x ___649_octave.Position.x 	%argrw{"wr"}
	assign		___767_octave.Position.y ___649_octave.Position.y 	%argrw{"wr"}
	assign		___767_octave.Position.z ___649_octave.Position.z 	%argrw{"wr"}
	assign		___767_octave.Position.w ___649_octave.Position.w 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3632 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1395.x ___765_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1395.y ___765_scale 	%argrw{"wr"}
	assign		$tmp1395.z ___765_scale 	%argrw{"wr"}
	assign		$tmp1395.w ___765_scale 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3632 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1394.x $tmp1200.x $tmp1395.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1394.y $tmp1200.y $tmp1395.y 	%argrw{"wrr"}
	mul		$tmp1394.z $tmp1200.z $tmp1395.z 	%argrw{"wrr"}
	mul		$tmp1394.w $tmp1200.w $tmp1395.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	functioncall	$const54 3847 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:720
#   vector4 cellPosition = floor(coord);
	functioncall	$const18 3638 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{720} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:166
#     return vector4 (floor(in.x),
	floor		___639_cellPosition.x $tmp1394.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{166} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:167
#                     floor(in.y),
	floor		___639_cellPosition.y $tmp1394.y 	%line{167} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:168
#                     floor(in.z),
	floor		___639_cellPosition.z $tmp1394.z 	%line{168} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:169
#                     floor(in.w));
	floor		___639_cellPosition.w $tmp1394.w 	%line{169} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3643 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		___639_localPosition.x $tmp1394.x ___639_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		___639_localPosition.y $tmp1394.y ___639_cellPosition.y 	%argrw{"wrr"}
	sub		___639_localPosition.z $tmp1394.z ___639_cellPosition.z 	%argrw{"wrr"}
	sub		___639_localPosition.w $tmp1394.w ___639_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:723
#   float minDistance = FLT_MAX;
	assign		___639_minDistance $const20 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{723} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:724
#   vector4 targetOffset = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___639_targetOffset.x $const1 	%line{724} %argrw{"wr"}
	assign		___639_targetOffset.y $const1 	%argrw{"wr"}
	assign		___639_targetOffset.z $const1 	%argrw{"wr"}
	assign		___639_targetOffset.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:725
#   vector4 targetPosition = vector4(0.0, 0.0, 0.0, 0.0);
	assign		___639_targetPosition.x $const1 	%line{725} %argrw{"wr"}
	assign		___639_targetPosition.y $const1 	%argrw{"wr"}
	assign		___639_targetPosition.z $const1 	%argrw{"wr"}
	assign		___639_targetPosition.w $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:726
#   for (int u = -1; u <= 1; u++) {
	for		$tmp1397 3654 3656 3803 3805 	%line{726} %argrw{"r"}
	assign		___640_u $const21 	%argrw{"wr"}
	le		$tmp1396 ___640_u $const15 	%argrw{"wrr"}
	neq		$tmp1397 $tmp1396 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:727
#     for (int k = -1; k <= 1; k++) {
	for		$tmp1399 3658 3660 3801 3803 	%line{727} %argrw{"r"}
	assign		___642_k $const21 	%argrw{"wr"}
	le		$tmp1398 ___642_k $const15 	%argrw{"wrr"}
	neq		$tmp1399 $tmp1398 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:728
#       for (int j = -1; j <= 1; j++) {
	for		$tmp1401 3662 3664 3799 3801 	%line{728} %argrw{"r"}
	assign		___644_j $const21 	%argrw{"wr"}
	le		$tmp1400 ___644_j $const15 	%argrw{"wrr"}
	neq		$tmp1401 $tmp1400 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:729
#         for (int i = -1; i <= 1; i++) {
	for		$tmp1403 3666 3668 3797 3799 	%line{729} %argrw{"r"}
	assign		___646_i $const21 	%argrw{"wr"}
	le		$tmp1402 ___646_i $const15 	%argrw{"wrr"}
	neq		$tmp1403 $tmp1402 $const11 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:730
#           vector4 cellOffset = vector4(i, j, k, u);
	assign		___647_cellOffset.x ___646_i 	%line{730} %argrw{"wr"}
	assign		___647_cellOffset.y ___644_j 	%argrw{"wr"}
	assign		___647_cellOffset.z ___642_k 	%argrw{"wr"}
	assign		___647_cellOffset.w ___640_u 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3677 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1406.x ___639_cellPosition.x ___647_cellOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1406.y ___639_cellPosition.y ___647_cellOffset.y 	%argrw{"wrr"}
	add		$tmp1406.z ___639_cellPosition.z ___647_cellOffset.z 	%argrw{"wrr"}
	add		$tmp1406.w ___639_cellPosition.w ___647_cellOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:731
#           vector4 pointPosition = cellOffset + hash_vector4_to_vector4(cellPosition + cellOffset) *
	functioncall	$const38 3702 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{731} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:49
#   return vector4(hash_vector4_to_float(k),
	functioncall	$const36 3681 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{49} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1407 $tmp1406.x $tmp1406.y $tmp1406.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1405.x $tmp1407 $tmp1406.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:50
#                  hash_vector4_to_float(vector4(k.w, k.x, k.y, k.z)),
	assign		$tmp1408.x $tmp1406.w 	%line{50} %argrw{"wr"}
	assign		$tmp1408.y $tmp1406.x 	%argrw{"wr"}
	assign		$tmp1408.z $tmp1406.y 	%argrw{"wr"}
	assign		$tmp1408.w $tmp1406.z 	%argrw{"wr"}
	functioncall	$const36 3688 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1409 $tmp1408.x $tmp1408.y $tmp1408.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1405.y $tmp1409 $tmp1408.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:51
#                  hash_vector4_to_float(vector4(k.z, k.w, k.x, k.y)),
	assign		$tmp1410.x $tmp1406.z 	%line{51} %argrw{"wr"}
	assign		$tmp1410.y $tmp1406.w 	%argrw{"wr"}
	assign		$tmp1410.z $tmp1406.x 	%argrw{"wr"}
	assign		$tmp1410.w $tmp1406.y 	%argrw{"wr"}
	functioncall	$const36 3695 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1411 $tmp1410.x $tmp1410.y $tmp1410.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1405.z $tmp1411 $tmp1410.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:52
#                  hash_vector4_to_float(vector4(k.y, k.z, k.w, k.x)));
	assign		$tmp1412.x $tmp1406.y 	%line{52} %argrw{"wr"}
	assign		$tmp1412.y $tmp1406.z 	%argrw{"wr"}
	assign		$tmp1412.z $tmp1406.w 	%argrw{"wr"}
	assign		$tmp1412.w $tmp1406.x 	%argrw{"wr"}
	functioncall	$const36 3702 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1413 $tmp1412.x $tmp1412.y $tmp1412.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1405.w $tmp1413 $tmp1412.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3712 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1414.x params.randomness 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1414.y params.randomness 	%argrw{"wr"}
	assign		$tmp1414.z params.randomness 	%argrw{"wr"}
	assign		$tmp1414.w params.randomness 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3712 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1404.x $tmp1405.x $tmp1414.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1404.y $tmp1405.y $tmp1414.y 	%argrw{"wrr"}
	mul		$tmp1404.z $tmp1405.z $tmp1414.z 	%argrw{"wrr"}
	mul		$tmp1404.w $tmp1405.w $tmp1414.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3717 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___647_pointPosition.x ___647_cellOffset.x $tmp1404.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		___647_pointPosition.y ___647_cellOffset.y $tmp1404.y 	%argrw{"wrr"}
	add		___647_pointPosition.z ___647_cellOffset.z $tmp1404.z 	%argrw{"wrr"}
	add		___647_pointPosition.w ___647_cellOffset.w $tmp1404.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:733
#           float distanceToPoint = voronoi_distance(pointPosition, localPosition, params);
	functioncall	$const47 3786 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{733} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:97
#   if (params.metric == "euclidean") {
	eq		$tmp1415 params.metric $const57 	%line{97} %argrw{"wrr"}
	if		$tmp1415 3736 3786 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	functioncall	$const42 3735 	%line{98} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const19 3726 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:56
#     return vector4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
	sub		$tmp1416.x ___647_pointPosition.x ___639_localPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{56} %argrw{"wrr"}
	sub		$tmp1416.y ___647_pointPosition.y ___639_localPosition.y 	%argrw{"wrr"}
	sub		$tmp1416.z ___647_pointPosition.z ___639_localPosition.z 	%argrw{"wrr"}
	sub		$tmp1416.w ___647_pointPosition.w ___639_localPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:46
#   return length(a - b);
	functioncall	$const30 3735 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{46} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:224
#     return sqrt (a.x*a.x + a.y*a.y + a.z*a.z + a.w*a.w);
	mul		$tmp1417 $tmp1416.x $tmp1416.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{224} %argrw{"wrr"}
	mul		$tmp1418 $tmp1416.y $tmp1416.y 	%argrw{"wrr"}
	add		$tmp1419 $tmp1417 $tmp1418 	%argrw{"wrr"}
	mul		$tmp1420 $tmp1416.z $tmp1416.z 	%argrw{"wrr"}
	add		$tmp1421 $tmp1419 $tmp1420 	%argrw{"wrr"}
	mul		$tmp1422 $tmp1416.w $tmp1416.w 	%argrw{"wrr"}
	add		$tmp1423 $tmp1421 $tmp1422 	%argrw{"wrr"}
	sqrt		___647_distanceToPoint $tmp1423 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:98
#     return distance(a, b);
	return	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{98}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:100
#   else if (params.metric == "manhattan") {
	eq		$tmp1424 params.metric $const58 	%line{100} %argrw{"wrr"}
	if		$tmp1424 3750 3786 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:101
#     return abs(a.x - b.x) + abs(a.y - b.y) + abs(a.z - b.z) + abs(a.w - b.w);
	sub		$tmp1426 ___647_pointPosition.x ___639_localPosition.x 	%line{101} %argrw{"wrr"}
	abs		$tmp1425 $tmp1426 	%argrw{"wr"}
	sub		$tmp1428 ___647_pointPosition.y ___639_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1427 $tmp1428 	%argrw{"wr"}
	add		$tmp1429 $tmp1425 $tmp1427 	%argrw{"wrr"}
	sub		$tmp1431 ___647_pointPosition.z ___639_localPosition.z 	%argrw{"wrr"}
	abs		$tmp1430 $tmp1431 	%argrw{"wr"}
	add		$tmp1432 $tmp1429 $tmp1430 	%argrw{"wrr"}
	sub		$tmp1434 ___647_pointPosition.w ___639_localPosition.w 	%argrw{"wrr"}
	abs		$tmp1433 $tmp1434 	%argrw{"wr"}
	add		___647_distanceToPoint $tmp1432 $tmp1433 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:103
#   else if (params.metric == "chebychev") {
	eq		$tmp1435 params.metric $const59 	%line{103} %argrw{"wrr"}
	if		$tmp1435 3764 3786 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:104
#     return max(abs(a.x - b.x), max(abs(a.y - b.y), max(abs(a.z - b.z), abs(a.w - b.w))));
	sub		$tmp1437 ___647_pointPosition.x ___639_localPosition.x 	%line{104} %argrw{"wrr"}
	abs		$tmp1436 $tmp1437 	%argrw{"wr"}
	sub		$tmp1440 ___647_pointPosition.y ___639_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1439 $tmp1440 	%argrw{"wr"}
	sub		$tmp1443 ___647_pointPosition.z ___639_localPosition.z 	%argrw{"wrr"}
	abs		$tmp1442 $tmp1443 	%argrw{"wr"}
	sub		$tmp1445 ___647_pointPosition.w ___639_localPosition.w 	%argrw{"wrr"}
	abs		$tmp1444 $tmp1445 	%argrw{"wr"}
	max		$tmp1441 $tmp1442 $tmp1444 	%argrw{"wrr"}
	max		$tmp1438 $tmp1439 $tmp1441 	%argrw{"wrr"}
	max		___647_distanceToPoint $tmp1436 $tmp1438 	%argrw{"wrr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:106
#   else if (params.metric == "minkowski") {
	eq		$tmp1446 params.metric $const60 	%line{106} %argrw{"wrr"}
	if		$tmp1446 3784 3786 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	sub		$tmp1449 ___647_pointPosition.x ___639_localPosition.x 	%line{107} %argrw{"wrr"}
	abs		$tmp1448 $tmp1449 	%argrw{"wr"}
	pow		$tmp1447 $tmp1448 params.exponent 	%argrw{"wrr"}
	sub		$tmp1452 ___647_pointPosition.y ___639_localPosition.y 	%argrw{"wrr"}
	abs		$tmp1451 $tmp1452 	%argrw{"wr"}
	pow		$tmp1450 $tmp1451 params.exponent 	%argrw{"wrr"}
	add		$tmp1453 $tmp1447 $tmp1450 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1456 ___647_pointPosition.z ___639_localPosition.z 	%line{108} %argrw{"wrr"}
	abs		$tmp1455 $tmp1456 	%argrw{"wr"}
	pow		$tmp1454 $tmp1455 params.exponent 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	add		$tmp1457 $tmp1453 $tmp1454 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:108
#                    pow(abs(a.z - b.z), params.exponent) + pow(abs(a.w - b.w), params.exponent),
	sub		$tmp1460 ___647_pointPosition.w ___639_localPosition.w 	%line{108} %argrw{"wrr"}
	abs		$tmp1459 $tmp1460 	%argrw{"wr"}
	pow		$tmp1458 $tmp1459 params.exponent 	%argrw{"wrr"}
	add		$tmp1461 $tmp1457 $tmp1458 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	div		$tmp1462 $const4 params.exponent 	%line{109} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:107
#     return pow(pow(abs(a.x - b.x), params.exponent) + pow(abs(a.y - b.y), params.exponent) +
	pow		___647_distanceToPoint $tmp1461 $tmp1462 	%line{107} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:109
#                1.0 / params.exponent);
	return	%line{109}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:112
#     return 0.0;
	assign		___647_distanceToPoint $const1 	%line{112} %argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:734
#           if (distanceToPoint < minDistance) {
	lt		$tmp1463 ___647_distanceToPoint ___639_minDistance 	%line{734} %argrw{"wrr"}
	if		$tmp1463 3797 3797 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:735
#             targetOffset = cellOffset;
	assign		___639_targetOffset.x ___647_cellOffset.x 	%line{735} %argrw{"wr"}
	assign		___639_targetOffset.y ___647_cellOffset.y 	%argrw{"wr"}
	assign		___639_targetOffset.z ___647_cellOffset.z 	%argrw{"wr"}
	assign		___639_targetOffset.w ___647_cellOffset.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:736
#             minDistance = distanceToPoint;
	assign		___639_minDistance ___647_distanceToPoint 	%line{736} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:737
#             targetPosition = pointPosition;
	assign		___639_targetPosition.x ___647_pointPosition.x 	%line{737} %argrw{"wr"}
	assign		___639_targetPosition.y ___647_pointPosition.y 	%argrw{"wr"}
	assign		___639_targetPosition.z ___647_pointPosition.z 	%argrw{"wr"}
	assign		___639_targetPosition.w ___647_pointPosition.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:729
#         for (int i = -1; i <= 1; i++) {
	assign		$tmp1464 ___646_i 	%line{729} %argrw{"wr"}
	add		___646_i ___646_i $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:728
#       for (int j = -1; j <= 1; j++) {
	assign		$tmp1465 ___644_j 	%line{728} %argrw{"wr"}
	add		___644_j ___644_j $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:727
#     for (int k = -1; k <= 1; k++) {
	assign		$tmp1466 ___642_k 	%line{727} %argrw{"wr"}
	add		___642_k ___642_k $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:726
#   for (int u = -1; u <= 1; u++) {
	assign		$tmp1467 ___640_u 	%line{726} %argrw{"wr"}
	add		___640_u ___640_u $const15 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:745
#   octave.Distance = minDistance;
	assign		___639_octave.Distance ___639_minDistance 	%line{745} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3811 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1468.x ___639_cellPosition.x ___639_targetOffset.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1468.y ___639_cellPosition.y ___639_targetOffset.y 	%argrw{"wrr"}
	add		$tmp1468.z ___639_cellPosition.z ___639_targetOffset.z 	%argrw{"wrr"}
	add		$tmp1468.w ___639_cellPosition.w ___639_targetOffset.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:746
#   octave.Color = hash_vector4_to_color(cellPosition + targetOffset);
	functioncall	$const63 3830 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{746} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:80
#   return color(hash_vector4_to_float(k),
	functioncall	$const36 3815 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h"} %line{80} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1470 $tmp1468.x $tmp1468.y $tmp1468.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1469 $tmp1470 $tmp1468.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:81
#                hash_vector4_to_float(vector4(k.z, k.x, k.w, k.y)),
	assign		$tmp1472.x $tmp1468.z 	%line{81} %argrw{"wr"}
	assign		$tmp1472.y $tmp1468.x 	%argrw{"wr"}
	assign		$tmp1472.z $tmp1468.w 	%argrw{"wr"}
	assign		$tmp1472.w $tmp1468.y 	%argrw{"wr"}
	functioncall	$const36 3822 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1473 $tmp1472.x $tmp1472.y $tmp1472.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1471 $tmp1473 $tmp1472.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:82
#                hash_vector4_to_float(vector4(k.w, k.z, k.y, k.x)));
	assign		$tmp1475.x $tmp1468.w 	%line{82} %argrw{"wr"}
	assign		$tmp1475.y $tmp1468.z 	%argrw{"wr"}
	assign		$tmp1475.z $tmp1468.y 	%argrw{"wr"}
	assign		$tmp1475.w $tmp1468.x 	%argrw{"wr"}
	functioncall	$const36 3829 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:30
#   return hashnoise(vector3(k.x, k.y, k.z), k.w);
	point		$tmp1476 $tmp1475.x $tmp1475.y $tmp1475.z 	%line{30} %argrw{"wrrr"}
	hashnoise	$tmp1474 $tmp1476 $tmp1475.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_hash.h:80
#   return color(hash_vector4_to_float(k),
	color		___639_octave.Color $tmp1469 $tmp1471 $tmp1474 	%line{80} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:746
#   octave.Color = hash_vector4_to_color(cellPosition + targetOffset);
	assign		___639_octave.Color ___639_octave.Color 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{746} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const22 3836 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1477.x ___639_targetPosition.x ___639_cellPosition.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1477.y ___639_targetPosition.y ___639_cellPosition.y 	%argrw{"wrr"}
	add		$tmp1477.z ___639_targetPosition.z ___639_cellPosition.z 	%argrw{"wrr"}
	add		$tmp1477.w ___639_targetPosition.w ___639_cellPosition.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:747
#   octave.Position = voronoi_position(targetPosition + cellPosition);
	functioncall	$const49 3841 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{747} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:715
#   return coord;
	assign		___639_octave.Position.x $tmp1477.x 	%line{715} %argrw{"wr"}
	assign		___639_octave.Position.y $tmp1477.y 	%argrw{"wr"}
	assign		___639_octave.Position.z $tmp1477.z 	%argrw{"wr"}
	assign		___639_octave.Position.w $tmp1477.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:748
#   return octave;
	assign		___767_octave.Distance ___639_octave.Distance 	%line{748} %argrw{"wr"}
	assign		___767_octave.Color ___639_octave.Color 	%argrw{"wr"}
	assign		___767_octave.Position.x ___639_octave.Position.x 	%argrw{"wr"}
	assign		___767_octave.Position.y ___639_octave.Position.y 	%argrw{"wr"}
	assign		___767_octave.Position.z ___639_octave.Position.z 	%argrw{"wr"}
	assign		___767_octave.Position.w ___639_octave.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	if		___765_zero_input 3856 3918 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
	assign		___765_max_amplitude $const4 	%argrw{"wr"}
	assign		___765_Output.Distance ___767_octave.Distance 	%argrw{"wr"}
	assign		___765_Output.Color ___767_octave.Color 	%argrw{"wr"}
	assign		___765_Output.Position.x ___767_octave.Position.x 	%argrw{"wr"}
	assign		___765_Output.Position.y ___767_octave.Position.y 	%argrw{"wr"}
	assign		___765_Output.Position.z ___767_octave.Position.z 	%argrw{"wr"}
	assign		___765_Output.Position.w ___767_octave.Position.w 	%argrw{"wr"}
	break
	le		$tmp1478 ___766_i params.detail 	%argrw{"wrr"}
	if		$tmp1478 3883 3918 	%argrw{"r"}
	add		___765_max_amplitude ___765_max_amplitude ___765_amplitude 	%argrw{"wrr"}
	mul		$tmp1479 ___767_octave.Distance ___765_amplitude 	%argrw{"wrr"}
	add		___765_Output.Distance ___765_Output.Distance $tmp1479 	%argrw{"wrr"}
	assign		___765_Output.Distance ___765_Output.Distance 	%argrw{"wr"}
	mul		$tmp1480 ___767_octave.Color ___765_amplitude 	%argrw{"wrr"}
	add		___765_Output.Color ___765_Output.Color $tmp1480 	%argrw{"wrr"}
	assign		___765_Output.Color ___765_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 3876 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___765_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp1482.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp1482.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1482.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1482.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3876 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1481.x ___767_octave.Position.x $tmp1482.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1481.y ___767_octave.Position.y $tmp1482.y 	%argrw{"wrr"}
	mul		$tmp1481.z ___767_octave.Position.z $tmp1482.z 	%argrw{"wrr"}
	mul		$tmp1481.w ___767_octave.Position.w $tmp1482.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	functioncall	$const55 3881 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___765_Output.Position.x ___765_Output.Position.x $tmp1481.x ___765_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___765_Output.Position.y ___765_Output.Position.y $tmp1481.y ___765_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___765_Output.Position.z ___765_Output.Position.z $tmp1481.z ___765_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___765_Output.Position.w ___765_Output.Position.w $tmp1481.w ___765_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	mul		___765_scale ___765_scale params.lacunarity 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"wrr"}
	mul		___765_amplitude ___765_amplitude params.roughness 	%argrw{"wrr"}
	floor		$tmp1483 params.detail 	%argrw{"wr"}
	sub		___773_remainder params.detail $tmp1483 	%argrw{"wrr"}
	neq		$tmp1484 ___773_remainder $const1 	%argrw{"wrr"}
	if		$tmp1484 3918 3918 	%argrw{"r"}
	add		$tmp1485 ___765_max_amplitude ___765_amplitude 	%argrw{"wrr"}
	mix		___765_max_amplitude ___765_max_amplitude $tmp1485 ___773_remainder 	%argrw{"wrrr"}
	mul		$tmp1486 ___767_octave.Distance ___765_amplitude 	%argrw{"wrr"}
	add		$tmp1487 ___765_Output.Distance $tmp1486 	%argrw{"wrr"}
	mix		___765_Output.Distance ___765_Output.Distance $tmp1487 ___773_remainder 	%argrw{"wrrr"}
	assign		___765_Output.Distance ___765_Output.Distance 	%argrw{"wr"}
	mul		$tmp1488 ___767_octave.Color ___765_amplitude 	%argrw{"wrr"}
	add		$tmp1489 ___765_Output.Color $tmp1488 	%argrw{"wrr"}
	mix		___765_Output.Color ___765_Output.Color $tmp1489 ___773_remainder 	%argrw{"wrrr"}
	assign		___765_Output.Color ___765_Output.Color 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const28 3908 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:117
#     float b_inv = 1/b;
	div		___438_b_inv $const4 ___765_scale 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{117} %argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:118
#     return a * vector4(b_inv, b_inv, b_inv, b_inv);
	assign		$tmp1492.x ___438_b_inv 	%line{118} %argrw{"wr"}
	assign		$tmp1492.y ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1492.z ___438_b_inv 	%argrw{"wr"}
	assign		$tmp1492.w ___438_b_inv 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:143
# 
	functioncall	$const17 3908 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{143} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1491.x ___767_octave.Position.x $tmp1492.x 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1491.y ___767_octave.Position.y $tmp1492.y 	%argrw{"wrr"}
	mul		$tmp1491.z ___767_octave.Position.z $tmp1492.z 	%argrw{"wrr"}
	mul		$tmp1491.w ___767_octave.Position.w $tmp1492.w 	%argrw{"wrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	functioncall	$const55 3913 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		$tmp1490.x ___765_Output.Position.x $tmp1491.x ___765_amplitude 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		$tmp1490.y ___765_Output.Position.y $tmp1491.y ___765_amplitude 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		$tmp1490.z ___765_Output.Position.z $tmp1491.z ___765_amplitude 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		$tmp1490.w ___765_Output.Position.w $tmp1491.w ___765_amplitude 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	functioncall	$const55 3918 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"r"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:206
#     return vector4 (mix( value1.x, value2.x, x),
	mix		___765_Output.Position.x ___765_Output.Position.x $tmp1490.x ___773_remainder 	%filename{"F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h"} %line{206} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:207
#                     mix( value1.y, value2.y, x),
	mix		___765_Output.Position.y ___765_Output.Position.y $tmp1490.y ___773_remainder 	%line{207} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:208
#                     mix( value1.z, value2.z, x),
	mix		___765_Output.Position.z ___765_Output.Position.z $tmp1490.z ___773_remainder 	%line{208} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/lib/legacy/windows_x64/osl/share/OSL/shaders\\vector4.h:209
#                     mix( value1.w, value2.w, x));
	mix		___765_Output.Position.w ___765_Output.Position.w $tmp1490.w ___773_remainder 	%line{209} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	add		___766_i ___766_i $const15 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"wrr"}
	if		params.normalize 3925 3925 	%argrw{"r"}
	mul		$tmp1493 ___765_max_amplitude params.max_distance 	%argrw{"wrr"}
	div		___765_Output.Distance ___765_Output.Distance $tmp1493 	%argrw{"wrr"}
	assign		___765_Output.Distance ___765_Output.Distance 	%argrw{"wr"}
	div		___765_Output.Color ___765_Output.Color ___765_max_amplitude 	%argrw{"wrr"}
	assign		___765_Output.Color ___765_Output.Color 	%argrw{"wr"}
	functioncall	$const56 3943 	%argrw{"r"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:125
#   return vector4((b != 0.0) ? a.x / b : 0.0,
	neq		$tmp1494 params.scale $const1 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h"} %line{125} %argrw{"wrr"}
	if		$tmp1494 3929 3930 	%argrw{"r"}
	div		___765_Output.Position.x ___765_Output.Position.x params.scale 	%argrw{"wrr"}
	assign		___765_Output.Position.x $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:126
#                  (b != 0.0) ? a.y / b : 0.0,
	neq		$tmp1495 params.scale $const1 	%line{126} %argrw{"wrr"}
	if		$tmp1495 3933 3934 	%argrw{"r"}
	div		___765_Output.Position.y ___765_Output.Position.y params.scale 	%argrw{"wrr"}
	assign		___765_Output.Position.y $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:127
#                  (b != 0.0) ? a.z / b : 0.0,
	neq		$tmp1496 params.scale $const1 	%line{127} %argrw{"wrr"}
	if		$tmp1496 3937 3938 	%argrw{"r"}
	div		___765_Output.Position.z ___765_Output.Position.z params.scale 	%argrw{"wrr"}
	assign		___765_Output.Position.z $const1 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi.h:128
#                  (b != 0.0) ? a.w / b : 0.0);
	neq		$tmp1497 params.scale $const1 	%line{128} %argrw{"wrr"}
	if		$tmp1497 3941 3942 	%argrw{"r"}
	div		___765_Output.Position.w ___765_Output.Position.w params.scale 	%argrw{"wrr"}
	assign		___765_Output.Position.w $const1 	%argrw{"wr"}
	return
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h:139
# FRACTAL_VORONOI_X_FX(vector4)
	assign		___797_Output.Distance ___765_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders\\node_fractal_voronoi.h"} %line{139} %argrw{"wr"}
	assign		___797_Output.Color ___765_Output.Color 	%argrw{"wr"}
	assign		___797_Output.Position.x ___765_Output.Position.x 	%argrw{"wr"}
	assign		___797_Output.Position.y ___765_Output.Position.y 	%argrw{"wr"}
	assign		___797_Output.Position.z ___765_Output.Position.z 	%argrw{"wr"}
	assign		___797_Output.Position.w ___765_Output.Position.w 	%argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:133
#       Distance = Output.Distance;
	assign		Distance ___797_Output.Distance 	%filename{"F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl"} %line{133} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:134
#       Color = Output.Color;
	assign		Color ___797_Output.Color 	%line{134} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:135
#       Position = vector3(Output.Position.x, Output.Position.y, Output.Position.z);
	point		Position ___797_Output.Position.x ___797_Output.Position.y ___797_Output.Position.z 	%line{135} %argrw{"wrrr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:136
#       WOut = Output.Position.w;
	assign		WOut ___797_Output.Position.w 	%line{136} %argrw{"wr"}
# F:/Repositories/cycles_repo/cycles/src/kernel/osl/shaders/node_voronoi_texture.osl:139
#       error("Unknown dimension!");
	error		$const39 	%line{139} %argrw{"r"}
	end
