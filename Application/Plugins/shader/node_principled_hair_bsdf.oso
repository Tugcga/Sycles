OpenShadingLanguage 1.00
# Compiled by oslc 1.13.7.0
# options: -q -O2 -IC:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders -IC:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders -o C:/Users/blender/git/blender-vdev/build_release/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.oso
shader node_principled_hair_bsdf
param	color	Color	0.0175129995 0.00576299988 0.00205900008		%read{77,81} %write{2147483647,-1}
param	float	Melanin	0.800000012		%read{27,27} %write{2147483647,-1}
param	float	MelaninRedness	1		%read{32,34} %write{2147483647,-1}
param	float	RandomColor	0		%read{25,25} %write{2147483647,-1}
param	color	Tint	1 1 1		%read{52,56} %write{2147483647,-1}
param	color	AbsorptionCoefficient	0.245530993 0.519999981 1.36500001		%read{20,20} %write{2147483647,-1}
param	normal	Normal	0 0 0		%read{92,97} %write{0,0} %initexpr
param	string	model	"Huang"		%read{90,90} %write{2147483647,-1}
param	string	parametrization	"Direct Coloring"		%read{18,62} %write{2147483647,-1}
param	float	Offset	0		%read{96,97} %write{2,2} %initexpr
param	float	Roughness	0.300000012		%read{16,16} %write{2147483647,-1}
param	float	RadialRoughness	0.300000012		%read{17,17} %write{2147483647,-1}
param	float	RandomRoughness	0		%read{10,10} %write{2147483647,-1}
param	float	Coat	0		%read{13,13} %write{2147483647,-1}
param	float	IOR	1.54999995		%read{96,97} %write{2147483647,-1}
param	string	AttrRandom	"geom:curve_random"		%read{7,7} %write{2147483647,-1}
param	float	Random	0		%read{4,6} %write{2147483647,-1}
param	float	AspectRatio	0.850000024		%read{93,96} %write{2147483647,-1}
param	float	Rlobe	1		%read{96,96} %write{2147483647,-1}
param	float	TTlobe	1		%read{96,96} %write{2147483647,-1}
param	float	TRTlobe	1		%read{96,96} %write{2147483647,-1}
oparam	closure color	BSDF			%read{2147483647,-1} %write{96,97}
global	normal	Ng	%read{0,0} %write{2147483647,-1}
local	float	___364_x	%read{41,74} %write{40,65}
local	float	___364_roughness_fac	%read{59,84} %write{50,75}
local	color	___364_sigma	%read{60,85} %write{59,84}
local	float	random_value	%read{8,23} %write{3,7}
local	float	factor_random_roughness	%read{16,17} %write{11,11}
local	float	m0_roughness	%read{97,97} %write{15,15}
local	float	roughness	%read{96,97} %write{16,16}
local	float	radial_roughness	%read{40,97} %write{17,17}
local	color	sigma	%read{96,97} %write{20,89}
local	float	___368_factor_random_color	%read{27,27} %write{26,26}
local	float	___368_melanin	%read{28,34} %write{27,31}
local	float	___368_eumelanin	%read{36,36} %write{33,33}
local	float	___368_pheomelanin	%read{37,37} %write{34,34}
local	color	___368_melanin_sigma	%read{61,61} %write{38,38}
local	color	___368_tint_sigma	%read{61,61} %write{60,60}
local	normal	___371_major_axis	%read{96,96} %write{92,95}
const	int	$const1	2		%read{56,81} %write{2147483647,-1}
const	float	$const2	2		%read{2,24} %write{2147483647,-1}
const	string	$const3	"radians"		%read{1,1} %write{2147483647,-1}
const	float	$const4	0.0174532924		%read{2,2} %write{2147483647,-1}
const	float	$const5	0		%read{3,87} %write{2147483647,-1}
temp	int	$tmp1	%read{5,5} %write{4,4}
temp	int	$tmp2	%read{2147483647,-1} %write{7,7}
const	float	$const6	1		%read{11,93} %write{2147483647,-1}
const	float	$const7	0.5		%read{8,23} %write{2147483647,-1}
temp	float	$tmp3	%read{9,9} %write{8,8}
temp	float	$tmp4	%read{10,10} %write{9,9}
temp	float	$tmp5	%read{11,11} %write{10,10}
temp	float	$tmp6	%read{15,15} %write{14,14}
const	string	$const8	"clamp"		%read{12,12} %write{2147483647,-1}
temp	float	$tmp7	%read{14,14} %write{13,13}
const	string	$const9	"Absorption coefficient"		%read{18,18} %write{2147483647,-1}
temp	int	$tmp8	%read{19,19} %write{18,18}
const	string	$const10	"Melanin concentration"		%read{21,21} %write{2147483647,-1}
temp	int	$tmp9	%read{22,22} %write{21,21}
temp	float	$tmp10	%read{24,24} %write{23,23}
temp	float	$tmp11	%read{25,25} %write{24,24}
temp	float	$tmp12	%read{26,26} %write{25,25}
temp	float	$tmp13	%read{31,31} %write{30,30}
temp	float	$tmp14	%read{30,30} %write{29,29}
temp	float	$tmp15	%read{29,29} %write{28,28}
const	float	$const11	9.99999975e-05		%read{29,29} %write{2147483647,-1}
temp	float	$tmp16	%read{33,33} %write{32,32}
const	string	$const12	"sigma_from_concentration"		%read{35,86} %write{2147483647,-1}
const	color	$const13	0.505999982 0.841000021 1.653		%read{36,87} %write{2147483647,-1}
temp	color	$tmp18	%read{38,38} %write{36,36}
const	color	$const14	0.342999995 0.73299998 1.92400002		%read{37,88} %write{2147483647,-1}
temp	color	$tmp20	%read{38,38} %write{37,37}
const	string	$const15	"sigma_from_reflectance"		%read{39,64} %write{2147483647,-1}
const	float	$const16	0.245000005		%read{41,66} %write{2147483647,-1}
temp	float	$tmp21	%read{42,42} %write{41,41}
const	float	$const17	5.57399988		%read{42,67} %write{2147483647,-1}
temp	float	$tmp22	%read{43,43} %write{42,42}
temp	float	$tmp23	%read{44,44} %write{43,43}
const	float	$const18	10.7299995		%read{44,69} %write{2147483647,-1}
temp	float	$tmp24	%read{45,45} %write{44,44}
temp	float	$tmp25	%read{46,46} %write{45,45}
const	float	$const19	2.53200006		%read{46,71} %write{2147483647,-1}
temp	float	$tmp26	%read{47,47} %write{46,46}
temp	float	$tmp27	%read{48,48} %write{47,47}
const	float	$const20	0.215000004		%read{48,73} %write{2147483647,-1}
temp	float	$tmp28	%read{49,49} %write{48,48}
temp	float	$tmp29	%read{50,50} %write{49,49}
const	float	$const21	5.96899986		%read{50,75} %write{2147483647,-1}
temp	color	$tmp30	%read{59,59} %write{58,58}
const	string	$const22	"log3"		%read{51,76} %write{2147483647,-1}
temp	float	$tmp31	%read{58,58} %write{53,53}
const	int	$const23	0		%read{52,77} %write{2147483647,-1}
temp	float	$tmp32	%read{53,53} %write{52,52}
temp	float	$tmp33	%read{58,58} %write{55,55}
const	int	$const24	1		%read{54,79} %write{2147483647,-1}
temp	float	$tmp34	%read{55,55} %write{54,54}
temp	float	$tmp35	%read{58,58} %write{57,57}
temp	float	$tmp36	%read{57,57} %write{56,56}
const	string	$const25	"Direct coloring"		%read{62,62} %write{2147483647,-1}
temp	int	$tmp37	%read{63,63} %write{62,62}
temp	float	$tmp38	%read{67,67} %write{66,66}
temp	float	$tmp39	%read{68,68} %write{67,67}
temp	float	$tmp40	%read{69,69} %write{68,68}
temp	float	$tmp41	%read{70,70} %write{69,69}
temp	float	$tmp42	%read{71,71} %write{70,70}
temp	float	$tmp43	%read{72,72} %write{71,71}
temp	float	$tmp44	%read{73,73} %write{72,72}
temp	float	$tmp45	%read{74,74} %write{73,73}
temp	float	$tmp46	%read{75,75} %write{74,74}
temp	color	$tmp47	%read{84,84} %write{83,83}
temp	float	$tmp48	%read{83,83} %write{78,78}
temp	float	$tmp49	%read{78,78} %write{77,77}
temp	float	$tmp50	%read{83,83} %write{80,80}
temp	float	$tmp51	%read{80,80} %write{79,79}
temp	float	$tmp52	%read{83,83} %write{82,82}
temp	float	$tmp53	%read{82,82} %write{81,81}
const	float	$const26	0.805437505		%read{88,88} %write{2147483647,-1}
temp	color	$tmp55	%read{89,89} %write{87,87}
temp	color	$tmp57	%read{89,89} %write{88,88}
const	string	$const27	"Huang"		%read{90,90} %write{2147483647,-1}
temp	int	$tmp58	%read{91,91} %write{90,90}
temp	int	$tmp59	%read{94,94} %write{93,93}
temp	int	$tmp60	%read{2147483647,-1} %write{95,95}
const	string	$const28	"geom:N"		%read{95,95} %write{2147483647,-1}
const	string	$const29	"hair_huang"		%read{96,96} %write{2147483647,-1}
const	string	$const30	"hair_chiang"		%read{97,97} %write{2147483647,-1}
code Normal
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:32
#                                  normal Normal = Ng,
	assign		Normal Ng 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl"} %line{32} %argrw{"wr"}
code Offset
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:35
#                                  float Offset = radians(2),
	functioncall	$const3 3 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl"} %line{35} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		Offset $const2 $const4 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
code ___main___
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:51
#   float random_value = 0.0;
	assign		random_value $const5 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl"} %line{51} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:53
#   if (isconnected(Random)) {
	isconnected	$tmp1 Random 	%line{53} %argrw{"wr"}
	if		$tmp1 7 8 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:54
#     random_value = Random;
	assign		random_value Random 	%line{54} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:57
#     getattribute(AttrRandom, random_value);
	getattribute	$tmp2 AttrRandom random_value 	%line{57} %argrw{"wrw"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:61
#   float factor_random_roughness = 1.0 + 2.0 * (random_value - 0.5) * RandomRoughness;
	sub		$tmp3 random_value $const7 	%line{61} %argrw{"wrr"}
	mul		$tmp4 $const2 $tmp3 	%argrw{"wrr"}
	mul		$tmp5 $tmp4 RandomRoughness 	%argrw{"wrr"}
	add		factor_random_roughness $const6 $tmp5 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:62
#   float m0_roughness = 1.0 - clamp(Coat, 0.0, 1.0);
	functioncall	$const8 15 	%line{62} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp7 Coat $const6 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp6 $tmp7 $const5 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:62
#   float m0_roughness = 1.0 - clamp(Coat, 0.0, 1.0);
	sub		m0_roughness $const6 $tmp6 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl"} %line{62} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:63
#   float roughness = Roughness * factor_random_roughness;
	mul		roughness Roughness factor_random_roughness 	%line{63} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:64
#   float radial_roughness = RadialRoughness * factor_random_roughness;
	mul		radial_roughness RadialRoughness factor_random_roughness 	%line{64} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:69
#   if (parametrization == "Absorption coefficient") {
	eq		$tmp8 parametrization $const9 	%line{69} %argrw{"wrr"}
	if		$tmp8 21 90 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:70
#     sigma = AbsorptionCoefficient;
	assign		sigma AbsorptionCoefficient 	%line{70} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:72
#   else if (parametrization == "Melanin concentration") {
	eq		$tmp9 parametrization $const10 	%line{72} %argrw{"wrr"}
	if		$tmp9 62 90 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:74
#     float factor_random_color = 1.0 + 2.0 * (random_value - 0.5) * RandomColor;
	sub		$tmp10 random_value $const7 	%line{74} %argrw{"wrr"}
	mul		$tmp11 $const2 $tmp10 	%argrw{"wrr"}
	mul		$tmp12 $tmp11 RandomColor 	%argrw{"wrr"}
	add		___368_factor_random_color $const6 $tmp12 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:75
#     float melanin = Melanin * factor_random_color;
	mul		___368_melanin Melanin ___368_factor_random_color 	%line{75} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:78
#     melanin = -log(max(1.0 - melanin, 0.0001));
	sub		$tmp15 $const6 ___368_melanin 	%line{78} %argrw{"wrr"}
	max		$tmp14 $tmp15 $const11 	%argrw{"wrr"}
	log		$tmp13 $tmp14 	%argrw{"wr"}
	neg		___368_melanin $tmp13 	%argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:81
#     float eumelanin = melanin * (1.0 - MelaninRedness);
	sub		$tmp16 $const6 MelaninRedness 	%line{81} %argrw{"wrr"}
	mul		___368_eumelanin ___368_melanin $tmp16 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:82
#     float pheomelanin = melanin * MelaninRedness;
	mul		___368_pheomelanin ___368_melanin MelaninRedness 	%line{82} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:83
#     color melanin_sigma = sigma_from_concentration(eumelanin, pheomelanin);
	functioncall	$const12 39 	%line{83} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:14
#   return eumelanin * color(0.506, 0.841, 1.653) + pheomelanin * color(0.343, 0.733, 1.924);
	mul		$tmp18 ___368_eumelanin $const13 	%line{14} %argrw{"wrr"}
	mul		$tmp20 ___368_pheomelanin $const14 	%argrw{"wrr"}
	add		___368_melanin_sigma $tmp18 $tmp20 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:86
#     color tint_sigma = sigma_from_reflectance(Tint, radial_roughness);
	functioncall	$const15 61 	%line{86} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:19
#   float x = azimuthal_roughness;
	assign		___364_x radial_roughness 	%line{19} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:20
#   float roughness_fac = (((((0.245 * x) + 5.574) * x - 10.73) * x + 2.532) * x - 0.215) * x +
	mul		$tmp21 $const16 ___364_x 	%line{20} %argrw{"wrr"}
	add		$tmp22 $tmp21 $const17 	%argrw{"wrr"}
	mul		$tmp23 $tmp22 ___364_x 	%argrw{"wrr"}
	sub		$tmp24 $tmp23 $const18 	%argrw{"wrr"}
	mul		$tmp25 $tmp24 ___364_x 	%argrw{"wrr"}
	add		$tmp26 $tmp25 $const19 	%argrw{"wrr"}
	mul		$tmp27 $tmp26 ___364_x 	%argrw{"wrr"}
	sub		$tmp28 $tmp27 $const20 	%argrw{"wrr"}
	mul		$tmp29 $tmp28 ___364_x 	%argrw{"wrr"}
	add		___364_roughness_fac $tmp29 $const21 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:22
#   color sigma = log3(c) / roughness_fac;
	functioncall	$const22 59 	%line{22} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:9
#   return color(log(a[0]), log(a[1]), log(a[2]));
	compref		$tmp32 Tint $const23 	%line{9} %argrw{"wrr"}
	log		$tmp31 $tmp32 	%argrw{"wr"}
	compref		$tmp34 Tint $const24 	%argrw{"wrr"}
	log		$tmp33 $tmp34 	%argrw{"wr"}
	compref		$tmp36 Tint $const1 	%argrw{"wrr"}
	log		$tmp35 $tmp36 	%argrw{"wr"}
	color		$tmp30 $tmp31 $tmp33 $tmp35 	%argrw{"wrrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:22
#   color sigma = log3(c) / roughness_fac;
	div		___364_sigma $tmp30 ___364_roughness_fac 	%line{22} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:23
#   return sigma * sigma;
	mul		___368_tint_sigma ___364_sigma ___364_sigma 	%line{23} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:87
#     sigma = melanin_sigma + tint_sigma;
	add		sigma ___368_melanin_sigma ___368_tint_sigma 	%line{87} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:89
#   else if (parametrization == "Direct coloring") {
	eq		$tmp37 parametrization $const25 	%line{89} %argrw{"wrr"}
	if		$tmp37 86 90 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:90
#     sigma = sigma_from_reflectance(Color, radial_roughness);
	functioncall	$const15 86 	%line{90} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:19
#   float x = azimuthal_roughness;
	assign		___364_x radial_roughness 	%line{19} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:20
#   float roughness_fac = (((((0.245 * x) + 5.574) * x - 10.73) * x + 2.532) * x - 0.215) * x +
	mul		$tmp38 $const16 ___364_x 	%line{20} %argrw{"wrr"}
	add		$tmp39 $tmp38 $const17 	%argrw{"wrr"}
	mul		$tmp40 $tmp39 ___364_x 	%argrw{"wrr"}
	sub		$tmp41 $tmp40 $const18 	%argrw{"wrr"}
	mul		$tmp42 $tmp41 ___364_x 	%argrw{"wrr"}
	add		$tmp43 $tmp42 $const19 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 ___364_x 	%argrw{"wrr"}
	sub		$tmp45 $tmp44 $const20 	%argrw{"wrr"}
	mul		$tmp46 $tmp45 ___364_x 	%argrw{"wrr"}
	add		___364_roughness_fac $tmp46 $const21 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:22
#   color sigma = log3(c) / roughness_fac;
	functioncall	$const22 84 	%line{22} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:9
#   return color(log(a[0]), log(a[1]), log(a[2]));
	compref		$tmp49 Color $const23 	%line{9} %argrw{"wrr"}
	log		$tmp48 $tmp49 	%argrw{"wr"}
	compref		$tmp51 Color $const24 	%argrw{"wrr"}
	log		$tmp50 $tmp51 	%argrw{"wr"}
	compref		$tmp53 Color $const1 	%argrw{"wrr"}
	log		$tmp52 $tmp53 	%argrw{"wr"}
	color		$tmp47 $tmp48 $tmp50 $tmp52 	%argrw{"wrrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:22
#   color sigma = log3(c) / roughness_fac;
	div		___364_sigma $tmp47 ___364_roughness_fac 	%line{22} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:23
#   return sigma * sigma;
	mul		sigma ___364_sigma ___364_sigma 	%line{23} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:94
#     sigma = sigma_from_concentration(0.0, 0.8054375);
	functioncall	$const12 90 	%line{94} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:14
#   return eumelanin * color(0.506, 0.841, 1.653) + pheomelanin * color(0.343, 0.733, 1.924);
	mul		$tmp55 $const5 $const13 	%line{14} %argrw{"wrr"}
	mul		$tmp57 $const26 $const14 	%argrw{"wrr"}
	add		sigma $tmp55 $tmp57 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:97
#   if (model == "Huang") {
	eq		$tmp58 model $const27 	%line{97} %argrw{"wrr"}
	if		$tmp58 97 98 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:98
#     normal major_axis = Normal;
	assign		___371_major_axis Normal 	%line{98} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:99
#     if (AspectRatio != 1.0) {
	neq		$tmp59 AspectRatio $const6 	%line{99} %argrw{"wrr"}
	if		$tmp59 96 96 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:100
#       getattribute("geom:N", major_axis);
	getattribute	$tmp60 $const28 ___371_major_axis 	%line{100} %argrw{"wrw"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:102
#     BSDF = hair_huang(
	closure		BSDF $const29 ___371_major_axis sigma roughness Offset IOR AspectRatio Rlobe TTlobe TRTlobe 	%line{102} %argrw{"wrrrrrrrrrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_principled_hair_bsdf.osl:106
#     BSDF = hair_chiang(Normal, sigma, roughness, radial_roughness, m0_roughness, Offset, IOR);
	closure		BSDF $const30 Normal sigma roughness radial_roughness m0_roughness Offset IOR 	%line{106} %argrw{"wrrrrrrrr"}
	end
