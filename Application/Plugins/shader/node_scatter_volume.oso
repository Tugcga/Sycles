OpenShadingLanguage 1.00
# Compiled by oslc 1.14.4.0dev
# options: -q -O2 -IC:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders -IC:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders -o C:/Users/blender/git/blender-vdev/build_release/intern/cycles/kernel/osl/shaders/node_scatter_volume.oso
shader node_scatter_volume
param	string	phase	"Henyey-Greenstein"		%read{1,10} %write{2147483647,-1}
param	color	Color	0.800000012 0.800000012 0.800000012		%read{102,102} %write{2147483647,-1}
param	float	Density	1		%read{101,101} %write{2147483647,-1}
param	float	Anisotropy	0		%read{6,100} %write{2147483647,-1}
param	float	IOR	1.33000004		%read{3,3} %write{2147483647,-1}
param	float	Backscatter	0.100000001		%read{3,3} %write{2147483647,-1}
param	float	Alpha	0.5		%read{6,6} %write{2147483647,-1}
param	float	Diameter	20		%read{13,13} %write{2147483647,-1}
oparam	closure color	Volume			%read{2147483647,-1} %write{103,103}
local	float	___366_d	%read{14,89} %write{13,13}
local	float	___368_log_d	%read{30,53} %write{29,29}
local	float	___368_a	%read{35,35} %write{32,32}
local	float	___368_b	%read{35,35} %write{34,34}
local	float	___368_c	%read{44,44} %write{40,40}
local	float	___369_log_d	%read{59,74} %write{58,58}
local	float	___369_temp	%read{74,74} %write{62,62}
local	closure color	scatter	%read{103,103} %write{0,100}
local	float	___373_param.g_HG	%read{93,93} %write{17,80} %mystruct{___373_param} %mystructfield{0}
local	float	___373_param.g_D	%read{94,94} %write{21,84} %mystruct{___373_param} %mystructfield{1}
local	float	___373_param.alpha	%read{94,94} %write{22,88} %mystruct{___373_param} %mystructfield{2}
local	float	___373_param.mixture	%read{96,98} %write{25,92} %mystruct{___373_param} %mystructfield{3}
const	int	$const1	0		%read{0,0} %write{2147483647,-1}
const	string	$const2	"Fournier-Forand"		%read{1,1} %write{2147483647,-1}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	string	$const3	"fournier_forand"		%read{3,3} %write{2147483647,-1}
const	string	$const4	"Draine"		%read{4,4} %write{2147483647,-1}
temp	int	$tmp2	%read{5,5} %write{4,4}
const	string	$const5	"draine"		%read{6,94} %write{2147483647,-1}
const	string	$const6	"Rayleigh"		%read{7,7} %write{2147483647,-1}
temp	int	$tmp3	%read{8,8} %write{7,7}
const	string	$const7	"rayleigh"		%read{9,9} %write{2147483647,-1}
const	string	$const8	"Mie"		%read{10,10} %write{2147483647,-1}
temp	int	$tmp4	%read{11,11} %write{10,10}
const	string	$const9	"phase_mie_fitted_parameters"		%read{12,12} %write{2147483647,-1}
const	float	$const10	0		%read{13,101} %write{2147483647,-1}
const	float	$const11	0.100000001		%read{14,14} %write{2147483647,-1}
temp	int	$tmp5	%read{15,15} %write{14,14}
const	float	$const12	13.8000002		%read{16,16} %write{2147483647,-1}
temp	float	$tmp6	%read{17,17} %write{16,16}
const	float	$const13	1.14559996		%read{18,18} %write{2147483647,-1}
temp	float	$tmp7	%read{21,21} %write{18,18}
temp	float	$tmp8	%read{21,21} %write{20,20}
const	float	$const14	9.29043961		%read{19,19} %write{2147483647,-1}
temp	float	$tmp9	%read{20,20} %write{19,19}
const	float	$const15	250		%read{22,47} %write{2147483647,-1}
const	float	$const16	0.252977014		%read{25,25} %write{2147483647,-1}
const	float	$const17	312.983002		%read{24,24} %write{2147483647,-1}
temp	float	$tmp10	%read{24,24} %write{23,23}
const	float	$const18	4.30000019		%read{23,23} %write{2147483647,-1}
temp	float	$tmp11	%read{25,25} %write{24,24}
const	float	$const19	1.5		%read{27,27} %write{2147483647,-1}
temp	int	$tmp12	%read{28,28} %write{27,27}
const	float	$const20	0.238603994		%read{30,30} %write{2147483647,-1}
temp	float	$tmp13	%read{32,32} %write{30,30}
const	float	$const21	1.00667		%read{31,31} %write{2147483647,-1}
temp	float	$tmp14	%read{32,32} %write{31,31}
const	float	$const22	0.507521987		%read{34,34} %write{2147483647,-1}
const	float	$const23	0.156770006		%read{33,33} %write{2147483647,-1}
temp	float	$tmp15	%read{34,34} %write{33,33}
const	float	$const24	1.19692004		%read{37,37} %write{2147483647,-1}
temp	float	$tmp16	%read{37,37} %write{36,36}
temp	float	$tmp17	%read{36,36} %write{35,35}
temp	float	$tmp18	%read{39,39} %write{37,37}
const	float	$const25	1.37932003		%read{38,38} %write{2147483647,-1}
temp	float	$tmp19	%read{39,39} %write{38,38}
temp	float	$tmp20	%read{40,40} %write{39,39}
const	float	$const26	0.0625834987		%read{40,40} %write{2147483647,-1}
const	float	$const27	0.861999989		%read{43,43} %write{2147483647,-1}
const	float	$const28	0.143000007		%read{41,41} %write{2147483647,-1}
temp	float	$tmp21	%read{42,42} %write{41,41}
temp	float	$tmp22	%read{43,43} %write{42,42}
const	float	$const29	0.379685014		%read{45,45} %write{2147483647,-1}
temp	float	$tmp23	%read{45,45} %write{44,44}
temp	float	$tmp24	%read{46,46} %write{45,45}
const	float	$const30	0.344213009		%read{46,46} %write{2147483647,-1}
const	float	$const31	0.146209002		%read{51,51} %write{2147483647,-1}
temp	float	$tmp25	%read{51,51} %write{50,50}
const	float	$const32	3.38706994		%read{48,48} %write{2147483647,-1}
temp	float	$tmp26	%read{49,49} %write{48,48}
const	float	$const33	2.11192989		%read{49,49} %write{2147483647,-1}
temp	float	$tmp27	%read{50,50} %write{49,49}
temp	float	$tmp28	%read{52,52} %write{51,51}
const	float	$const34	0.316071987		%read{52,52} %write{2147483647,-1}
temp	float	$tmp29	%read{54,54} %write{52,52}
const	float	$const35	0.0778917		%read{53,53} %write{2147483647,-1}
temp	float	$tmp30	%read{54,54} %write{53,53}
const	float	$const36	5		%read{56,56} %write{2147483647,-1}
temp	int	$tmp31	%read{57,57} %write{56,56}
const	float	$const37	5.68946981		%read{61,61} %write{2147483647,-1}
temp	float	$tmp32	%read{60,60} %write{59,59}
const	float	$const38	0.0292149		%read{60,60} %write{2147483647,-1}
temp	float	$tmp33	%read{61,61} %write{60,60}
temp	float	$tmp34	%read{62,62} %write{61,61}
const	float	$const39	0.0604931004		%read{64,64} %write{2147483647,-1}
temp	float	$tmp35	%read{64,64} %write{63,63}
temp	float	$tmp36	%read{65,65} %write{64,64}
const	float	$const40	0.940256		%read{65,65} %write{2147483647,-1}
const	float	$const41	0.500410974		%read{71,71} %write{2147483647,-1}
const	float	$const42	0.0812869966		%read{70,70} %write{2147483647,-1}
const	float	$const43	-2		%read{66,66} %write{2147483647,-1}
temp	float	$tmp37	%read{68,68} %write{66,66}
temp	float	$tmp38	%read{68,68} %write{67,67}
temp	float	$tmp39	%read{69,69} %write{68,68}
const	float	$const44	1.27550995		%read{69,69} %write{2147483647,-1}
temp	float	$tmp40	%read{70,70} %write{69,69}
temp	float	$tmp41	%read{71,71} %write{70,70}
const	float	$const45	7.30354023		%read{72,72} %write{2147483647,-1}
temp	float	$tmp42	%read{73,73} %write{72,72}
const	float	$const46	6.31675005		%read{73,73} %write{2147483647,-1}
const	float	$const47	0.0269140005		%read{75,75} %write{2147483647,-1}
temp	float	$tmp43	%read{75,75} %write{74,74}
temp	float	$tmp44	%read{76,76} %write{75,75}
const	float	$const48	0.376399994		%read{76,76} %write{2147483647,-1}
const	float	$const49	-0.0990566984		%read{79,79} %write{2147483647,-1}
const	float	$const50	1.67154002		%read{78,78} %write{2147483647,-1}
temp	float	$tmp45	%read{79,79} %write{78,78}
temp	float	$tmp46	%read{80,80} %write{79,79}
const	float	$const51	-2.20678997		%read{82,82} %write{2147483647,-1}
const	float	$const52	3.91029		%read{81,81} %write{2147483647,-1}
temp	float	$tmp47	%read{82,82} %write{81,81}
temp	float	$tmp48	%read{83,83} %write{82,82}
const	float	$const53	0.428934008		%read{83,83} %write{2147483647,-1}
temp	float	$tmp49	%read{84,84} %write{83,83}
const	float	$const54	3.62489009		%read{87,87} %write{2147483647,-1}
const	float	$const55	8.29288006		%read{86,86} %write{2147483647,-1}
const	float	$const56	5.52825022		%read{85,85} %write{2147483647,-1}
temp	float	$tmp50	%read{86,86} %write{85,85}
temp	float	$tmp51	%read{87,87} %write{86,86}
temp	float	$tmp52	%read{88,88} %write{87,87}
const	float	$const57	-0.599084973		%read{90,90} %write{2147483647,-1}
const	float	$const58	0.641583025		%read{89,89} %write{2147483647,-1}
temp	float	$tmp53	%read{90,90} %write{89,89}
temp	float	$tmp54	%read{91,91} %write{90,90}
const	float	$const59	0.665888011		%read{91,91} %write{2147483647,-1}
temp	float	$tmp55	%read{92,92} %write{91,91}
temp	closure color	$tmp56	%read{97,97} %write{93,93}
const	string	$const60	"henyey_greenstein"		%read{93,100} %write{2147483647,-1}
temp	closure color	$tmp57	%read{98,98} %write{94,94}
const	string	$const61	"mix"		%read{95,95} %write{2147483647,-1}
temp	float	$tmp58	%read{97,97} %write{96,96}
const	float	$const63	1		%read{96,96} %write{2147483647,-1}
temp	closure color	$tmp59	%read{99,99} %write{97,97}
temp	closure color	$tmp60	%read{99,99} %write{98,98}
temp	float	$tmp61	%read{102,102} %write{101,101}
temp	color	$tmp62	%read{103,103} %write{102,102}
code ___main___
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:61
#   closure color scatter = 0;
	assign		scatter $const1 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl"} %line{61} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:62
#   if (phase == "Fournier-Forand") {
	eq		$tmp1 phase $const2 	%line{62} %argrw{"wrr"}
	if		$tmp1 4 101 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:63
#     scatter = fournier_forand(Backscatter, IOR);
	closure		scatter $const3 Backscatter IOR 	%line{63} %argrw{"wrrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:65
#   else if (phase == "Draine") {
	eq		$tmp2 phase $const4 	%line{65} %argrw{"wrr"}
	if		$tmp2 7 101 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:66
#     scatter = draine(Anisotropy, Alpha);
	closure		scatter $const5 Anisotropy Alpha 	%line{66} %argrw{"wrrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:68
#   else if (phase == "Rayleigh") {
	eq		$tmp3 phase $const6 	%line{68} %argrw{"wrr"}
	if		$tmp3 10 101 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:69
#     scatter = rayleigh();
	closure		scatter $const7 	%line{69} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:71
#   else if (phase == "Mie") {
	eq		$tmp4 phase $const8 	%line{71} %argrw{"wrr"}
	if		$tmp4 100 101 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:74
#     MieParameters param = phase_mie_fitted_parameters(Diameter);
	functioncall	$const9 93 	%line{74} %argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:16
#   float d = max(Diameter, 0.0);
	max		___366_d Diameter $const10 	%line{16} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:17
#   if (d <= 0.1) {
	le		$tmp5 ___366_d $const11 	%line{17} %argrw{"wrr"}
	if		$tmp5 27 27 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:19
#     return {13.8 * d * d, 1.1456 * d * sin(9.29044 * d), 250.0, 0.252977 - 312.983 * pow(d, 4.3)};
	mul		$tmp6 $const12 ___366_d 	%line{19} %argrw{"wrr"}
	mul		___373_param.g_HG $tmp6 ___366_d 	%argrw{"wrr"}
	mul		$tmp7 $const13 ___366_d 	%argrw{"wrr"}
	mul		$tmp9 $const14 ___366_d 	%argrw{"wrr"}
	sin		$tmp8 $tmp9 	%argrw{"wr"}
	mul		___373_param.g_D $tmp7 $tmp8 	%argrw{"wrr"}
	assign		___373_param.alpha $const15 	%argrw{"wr"}
	pow		$tmp10 ___366_d $const18 	%argrw{"wrr"}
	mul		$tmp11 $const17 $tmp10 	%argrw{"wrr"}
	sub		___373_param.mixture $const16 $tmp11 	%argrw{"wrr"}
	return
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:22
#   if (d < 1.5) {
	lt		$tmp12 ___366_d $const19 	%line{22} %argrw{"wrr"}
	if		$tmp12 56 56 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:24
#     float log_d = log(d);
	log		___368_log_d ___366_d 	%line{24} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:25
#     float a = (log_d - 0.238604) * (log_d + 1.00667);
	sub		$tmp13 ___368_log_d $const20 	%line{25} %argrw{"wrr"}
	add		$tmp14 ___368_log_d $const21 	%argrw{"wrr"}
	mul		___368_a $tmp13 $tmp14 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:26
#     float b = 0.507522 - 0.15677 * log_d;
	mul		$tmp15 $const23 ___368_log_d 	%line{26} %argrw{"wrr"}
	sub		___368_b $const22 $tmp15 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:27
#     float c = 1.19692 * cos(a / b) + 1.37932 * log_d + 0.0625835;
	div		$tmp17 ___368_a ___368_b 	%line{27} %argrw{"wrr"}
	cos		$tmp16 $tmp17 	%argrw{"wr"}
	mul		$tmp18 $const24 $tmp16 	%argrw{"wrr"}
	mul		$tmp19 $const25 ___368_log_d 	%argrw{"wrr"}
	add		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
	add		___368_c $tmp20 $const26 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:28
#     return {0.862 - 0.143 * log_d * log_d,
	mul		$tmp21 $const28 ___368_log_d 	%line{28} %argrw{"wrr"}
	mul		$tmp22 $tmp21 ___368_log_d 	%argrw{"wrr"}
	sub		___373_param.g_HG $const27 $tmp22 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:29
#             0.379685 * cos(c) + 0.344213,
	cos		$tmp23 ___368_c 	%line{29} %argrw{"wr"}
	mul		$tmp24 $const29 $tmp23 	%argrw{"wrr"}
	add		___373_param.g_D $tmp24 $const30 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:28
#     return {0.862 - 0.143 * log_d * log_d,
	assign		___373_param.alpha $const15 	%line{28} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:31
#             0.146209 * cos(3.38707 * log_d + 2.11193) + 0.316072 + 0.0778917 * log_d};
	mul		$tmp26 $const32 ___368_log_d 	%line{31} %argrw{"wrr"}
	add		$tmp27 $tmp26 $const33 	%argrw{"wrr"}
	cos		$tmp25 $tmp27 	%argrw{"wr"}
	mul		$tmp28 $const31 $tmp25 	%argrw{"wrr"}
	add		$tmp29 $tmp28 $const34 	%argrw{"wrr"}
	mul		$tmp30 $const35 ___368_log_d 	%argrw{"wrr"}
	add		___373_param.mixture $tmp29 $tmp30 	%argrw{"wrr"}
	return
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:34
#   if (d < 5.0) {
	lt		$tmp31 ___366_d $const36 	%line{34} %argrw{"wrr"}
	if		$tmp31 78 78 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:36
#     float log_d = log(d);
	log		___369_log_d ___366_d 	%line{36} %argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:37
#     float temp = cos(5.68947 * (log(log_d) - 0.0292149));
	log		$tmp32 ___369_log_d 	%line{37} %argrw{"wr"}
	sub		$tmp33 $tmp32 $const38 	%argrw{"wrr"}
	mul		$tmp34 $const37 $tmp33 	%argrw{"wrr"}
	cos		___369_temp $tmp34 	%argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:38
#     return {0.0604931 * log(log_d) + 0.940256,
	log		$tmp35 ___369_log_d 	%line{38} %argrw{"wr"}
	mul		$tmp36 $const39 $tmp35 	%argrw{"wrr"}
	add		___373_param.g_HG $tmp36 $const40 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:39
#             0.500411 - (0.081287 / (-2.0 * log_d + tan(log_d) + 1.27551)),
	mul		$tmp37 $const43 ___369_log_d 	%line{39} %argrw{"wrr"}
	tan		$tmp38 ___369_log_d 	%argrw{"wr"}
	add		$tmp39 $tmp37 $tmp38 	%argrw{"wrr"}
	add		$tmp40 $tmp39 $const44 	%argrw{"wrr"}
	div		$tmp41 $const42 $tmp40 	%argrw{"wrr"}
	sub		___373_param.g_D $const41 $tmp41 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:40
#             7.30354 * log_d + 6.31675,
	mul		$tmp42 $const45 ___369_log_d 	%line{40} %argrw{"wrr"}
	add		___373_param.alpha $tmp42 $const46 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:41
#             0.026914 * (log_d - temp) + 0.3764};
	sub		$tmp43 ___369_log_d ___369_temp 	%line{41} %argrw{"wrr"}
	mul		$tmp44 $const47 $tmp43 	%argrw{"wrr"}
	add		___373_param.mixture $tmp44 $const48 	%argrw{"wrr"}
	return
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:45
#   return {exp(-0.0990567 / (d - 1.67154)),
	sub		$tmp45 ___366_d $const50 	%line{45} %argrw{"wrr"}
	div		$tmp46 $const49 $tmp45 	%argrw{"wrr"}
	exp		___373_param.g_HG $tmp46 	%argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:46
#           exp(-2.20679 / (d + 3.91029) - 0.428934),
	add		$tmp47 ___366_d $const52 	%line{46} %argrw{"wrr"}
	div		$tmp48 $const51 $tmp47 	%argrw{"wrr"}
	sub		$tmp49 $tmp48 $const53 	%argrw{"wrr"}
	exp		___373_param.g_D $tmp49 	%argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:47
#           exp(3.62489 - 8.29288 / (d + 5.52825)),
	add		$tmp50 ___366_d $const56 	%line{47} %argrw{"wrr"}
	div		$tmp51 $const55 $tmp50 	%argrw{"wrr"}
	sub		$tmp52 $const54 $tmp51 	%argrw{"wrr"}
	exp		___373_param.alpha $tmp52 	%argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:48
#           exp(-0.599085 / (d - 0.641583) - 0.665888)};
	sub		$tmp53 ___366_d $const58 	%line{48} %argrw{"wrr"}
	div		$tmp54 $const57 $tmp53 	%argrw{"wrr"}
	sub		$tmp55 $tmp54 $const59 	%argrw{"wrr"}
	exp		___373_param.mixture $tmp55 	%argrw{"wr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:75
#     scatter = mix(henyey_greenstein(param.g_HG), draine(param.g_D, param.alpha), param.mixture);
	closure		$tmp56 $const60 ___373_param.g_HG 	%line{75} %argrw{"wrr"}
	closure		$tmp57 $const5 ___373_param.g_D ___373_param.alpha 	%argrw{"wrrr"}
	functioncall	$const61 100 	%argrw{"r"}
# C:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders/stdosl.h:164
# closure color mix (closure color x, closure color y, float a) { return x*(1-a) + y*a; }
	sub		$tmp58 $const63 ___373_param.mixture 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/lib/windows_x64/osl/share/OSL/shaders/stdosl.h"} %line{164} %argrw{"wrr"}
	mul		$tmp59 $tmp56 $tmp58 	%argrw{"wrr"}
	mul		$tmp60 $tmp57 ___373_param.mixture 	%argrw{"wrr"}
	add		scatter $tmp59 $tmp60 	%argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:78
#     scatter = henyey_greenstein(Anisotropy);
	closure		scatter $const60 Anisotropy 	%filename{"C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl"} %line{78} %argrw{"wrr"}
# C:/Users/blender/git/blender-vdev/blender.git/intern/cycles/kernel/osl/shaders/node_scatter_volume.osl:81
#   Volume = (Color * max(Density, 0.0)) * scatter;
	max		$tmp61 Density $const10 	%line{81} %argrw{"wrr"}
	mul		$tmp62 Color $tmp61 	%argrw{"wrr"}
	mul		Volume scatter $tmp62 	%argrw{"wrr"}
	end
