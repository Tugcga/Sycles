OpenShadingLanguage 1.00
# Compiled by oslc 1.11.17
# options: -q -O2 -IF:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders -IF:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders -o F:/Repositories/blenderRepo/build_windows_Full_x64_vc16_Release/intern/cycles/kernel/osl/shaders/node_musgrave_texture.oso
shader node_musgrave_texture
param	int	use_mapping	0		%read{7,7} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{8,8} %write{2147483647,-1}
param	string	musgrave_type	"fBM"		%read{12,1070} %write{2147483647,-1}
param	string	dimensions	"3D"		%read{9,804} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{6,6} %write{0,0} %initexpr
param	float	W	0		%read{11,809} %write{2147483647,-1}
param	float	Dimension	2		%read{1,1} %write{2147483647,-1}
param	float	Scale	5		%read{11,814} %write{2147483647,-1}
param	float	Detail	2		%read{3,3} %write{2147483647,-1}
param	float	Lacunarity	2		%read{5,5} %write{2147483647,-1}
param	float	Offset	0		%read{125,1141} %write{2147483647,-1}
param	float	Gain	1		%read{130,1048} %write{2147483647,-1}
oparam	float	Fac	0		%read{2147483647,-1} %write{54,1148}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___446_f	%read{22,252} %write{22,247}
local	float	___447_f	%read{281,545} %write{281,540}
local	float	___448_f	%read{566,796} %write{566,791}
local	float	___449_f	%read{833,1140} %write{833,1135}
local	float	___508_p	%read{65,86} %write{58,80}
local	float	___508_value	%read{65,95} %write{59,94}
local	float	___508_pwr	%read{65,93} %write{60,80}
local	float	___508_pwHL	%read{65,80} %write{62,62}
local	int	___509_i	%read{65,80} %write{64,80}
local	float	___508_rmd	%read{83,92} %write{82,82}
local	float	___512_p	%read{22,45} %write{15,38}
local	float	___512_value	%read{22,54} %write{16,53}
local	float	___512_pwr	%read{22,43} %write{17,38}
local	float	___512_pwHL	%read{22,38} %write{19,19}
local	int	___513_i	%read{22,38} %write{21,38}
local	float	___512_rmd	%read{41,43} %write{40,40}
local	float	___516_p	%read{214,247} %write{209,241}
local	float	___516_pwHL	%read{212,241} %write{211,211}
local	float	___516_pwr	%read{224,254} %write{212,241}
local	float	___516_value	%read{224,258} %write{220,257}
local	int	___517_i	%read{224,241} %write{223,241}
local	float	___518_increment	%read{224,241} %write{224,241}
local	float	___516_rmd	%read{244,256} %write{243,243}
local	float	___519_increment	%read{256,256} %write{255,255}
local	float	___520_p	%read{107,148} %write{99,134}
local	float	___520_pwHL	%read{107,134} %write{101,101}
local	float	___520_pwr	%read{107,155} %write{102,134}
local	float	___520_value	%read{107,159} %write{103,158}
local	float	___520_weight	%read{107,156} %write{104,146}
local	int	___521_i	%read{107,134} %write{106,134}
local	float	___522_signal	%read{107,134} %write{107,134}
local	float	___520_rmd	%read{137,156} %write{136,136}
local	float	___524_signal	%read{157,157} %write{155,155}
local	float	___526_p	%read{168,204} %write{163,204}
local	float	___526_pwHL	%read{166,204} %write{165,165}
local	float	___526_pwr	%read{181,204} %write{166,204}
local	float	___526_signal	%read{176,204} %write{175,204}
local	float	___526_value	%read{181,205} %write{177,204}
local	float	___526_weight	%read{181,204} %write{178,204}
local	int	___527_i	%read{181,204} %write{180,204}
local	float	___529_p.x	%read{330,356} %write{322,350} %mystruct{___529_p} %mystructfield{0}
local	float	___529_p.y	%read{330,356} %write{323,350} %mystruct{___529_p} %mystructfield{1}
local	float	___529_value	%read{330,365} %write{324,364}
local	float	___529_pwr	%read{330,363} %write{325,350}
local	float	___529_pwHL	%read{330,350} %write{327,327}
local	int	___530_i	%read{330,350} %write{329,350}
local	float	___529_rmd	%read{353,362} %write{352,352}
local	float	___533_p.x	%read{281,309} %write{273,302} %mystruct{___533_p} %mystructfield{0}
local	float	___533_p.y	%read{281,309} %write{274,302} %mystruct{___533_p} %mystructfield{1}
local	float	___533_value	%read{281,318} %write{275,317}
local	float	___533_pwr	%read{281,307} %write{276,302}
local	float	___533_pwHL	%read{281,302} %write{278,278}
local	int	___534_i	%read{281,302} %write{280,302}
local	float	___533_rmd	%read{305,307} %write{304,304}
local	float	___537_p.x	%read{497,540} %write{491,534} %mystruct{___537_p} %mystructfield{0}
local	float	___537_p.y	%read{497,540} %write{492,534} %mystruct{___537_p} %mystructfield{1}
local	float	___537_pwHL	%read{495,534} %write{494,494}
local	float	___537_pwr	%read{512,547} %write{495,534}
local	float	___537_value	%read{512,551} %write{503,550}
local	int	___538_i	%read{512,534} %write{511,534}
local	float	___539_increment	%read{512,534} %write{512,534}
local	float	___537_rmd	%read{537,549} %write{536,536}
local	float	___540_increment	%read{549,549} %write{548,548}
local	float	___541_p.x	%read{378,424} %write{369,410} %mystruct{___541_p} %mystructfield{0}
local	float	___541_p.y	%read{378,424} %write{370,410} %mystruct{___541_p} %mystructfield{1}
local	float	___541_pwHL	%read{378,410} %write{372,372}
local	float	___541_pwr	%read{378,431} %write{373,410}
local	float	___541_value	%read{378,435} %write{374,434}
local	float	___541_weight	%read{378,432} %write{375,422}
local	int	___542_i	%read{378,410} %write{377,410}
local	float	___543_signal	%read{378,410} %write{378,410}
local	float	___541_rmd	%read{413,432} %write{412,412}
local	float	___545_signal	%read{433,433} %write{431,431}
local	float	___547_p.x	%read{445,486} %write{439,486} %mystruct{___547_p} %mystructfield{0}
local	float	___547_p.y	%read{445,486} %write{440,486} %mystruct{___547_p} %mystructfield{1}
local	float	___547_pwHL	%read{443,486} %write{442,442}
local	float	___547_pwr	%read{458,486} %write{443,486}
local	float	___547_signal	%read{453,486} %write{452,486}
local	float	___547_value	%read{458,487} %write{454,486}
local	float	___547_weight	%read{458,486} %write{455,486}
local	int	___548_i	%read{458,486} %write{457,486}
local	point	___550_p	%read{609,630} %write{602,624}
local	float	___550_value	%read{609,639} %write{603,638}
local	float	___550_pwr	%read{609,637} %write{604,624}
local	float	___550_pwHL	%read{609,624} %write{606,606}
local	int	___551_i	%read{609,624} %write{608,624}
local	float	___550_rmd	%read{627,636} %write{626,626}
local	point	___554_p	%read{566,589} %write{559,582}
local	float	___554_value	%read{566,598} %write{560,597}
local	float	___554_pwr	%read{566,587} %write{561,582}
local	float	___554_pwHL	%read{566,582} %write{563,563}
local	int	___555_i	%read{566,582} %write{565,582}
local	float	___554_rmd	%read{585,587} %write{584,584}
local	point	___558_p	%read{758,791} %write{753,785}
local	float	___558_pwHL	%read{756,785} %write{755,755}
local	float	___558_pwr	%read{768,798} %write{756,785}
local	float	___558_value	%read{768,802} %write{764,801}
local	int	___559_i	%read{768,785} %write{767,785}
local	float	___560_increment	%read{768,785} %write{768,785}
local	float	___558_rmd	%read{788,800} %write{787,787}
local	float	___561_increment	%read{800,800} %write{799,799}
local	point	___562_p	%read{651,692} %write{643,678}
local	float	___562_pwHL	%read{651,678} %write{645,645}
local	float	___562_pwr	%read{651,699} %write{646,678}
local	float	___562_value	%read{651,703} %write{647,702}
local	float	___562_weight	%read{651,700} %write{648,690}
local	int	___563_i	%read{651,678} %write{650,678}
local	float	___564_signal	%read{651,678} %write{651,678}
local	float	___562_rmd	%read{681,700} %write{680,680}
local	float	___566_signal	%read{701,701} %write{699,699}
local	point	___568_p	%read{712,748} %write{707,748}
local	float	___568_pwHL	%read{710,748} %write{709,709}
local	float	___568_pwr	%read{725,748} %write{710,748}
local	float	___568_signal	%read{720,748} %write{719,748}
local	float	___568_value	%read{725,749} %write{721,748}
local	float	___568_weight	%read{725,748} %write{722,748}
local	int	___569_i	%read{725,748} %write{724,748}
local	float	___571_p.x	%read{890,921} %write{880,915} %mystruct{___571_p} %mystructfield{0}
local	float	___571_p.y	%read{890,921} %write{881,915} %mystruct{___571_p} %mystructfield{1}
local	float	___571_p.z	%read{890,921} %write{882,915} %mystruct{___571_p} %mystructfield{2}
local	float	___571_p.w	%read{890,922} %write{883,915} %mystruct{___571_p} %mystructfield{3}
local	float	___571_value	%read{890,931} %write{884,930}
local	float	___571_pwr	%read{890,929} %write{885,915}
local	float	___571_pwHL	%read{890,915} %write{887,887}
local	int	___572_i	%read{890,915} %write{889,915}
local	float	___571_rmd	%read{918,928} %write{917,917}
local	float	___575_p.x	%read{833,866} %write{823,859} %mystruct{___575_p} %mystructfield{0}
local	float	___575_p.y	%read{833,866} %write{824,859} %mystruct{___575_p} %mystructfield{1}
local	float	___575_p.z	%read{833,866} %write{825,859} %mystruct{___575_p} %mystructfield{2}
local	float	___575_p.w	%read{833,867} %write{826,859} %mystruct{___575_p} %mystructfield{3}
local	float	___575_value	%read{833,876} %write{827,875}
local	float	___575_pwr	%read{833,864} %write{828,859}
local	float	___575_pwHL	%read{833,859} %write{830,830}
local	int	___576_i	%read{833,859} %write{832,859}
local	float	___575_rmd	%read{862,864} %write{861,861}
local	float	___579_p.x	%read{1081,1134} %write{1073,1128} %mystruct{___579_p} %mystructfield{0}
local	float	___579_p.y	%read{1081,1134} %write{1074,1128} %mystruct{___579_p} %mystructfield{1}
local	float	___579_p.z	%read{1081,1134} %write{1075,1128} %mystruct{___579_p} %mystructfield{2}
local	float	___579_p.w	%read{1082,1135} %write{1076,1128} %mystruct{___579_p} %mystructfield{3}
local	float	___579_pwHL	%read{1079,1128} %write{1078,1078}
local	float	___579_pwr	%read{1101,1142} %write{1079,1128}
local	float	___579_value	%read{1101,1146} %write{1088,1145}
local	int	___580_i	%read{1101,1128} %write{1100,1128}
local	float	___581_increment	%read{1101,1128} %write{1101,1128}
local	float	___579_rmd	%read{1131,1144} %write{1130,1130}
local	float	___582_increment	%read{1144,1144} %write{1143,1143}
local	float	___583_p.x	%read{946,997} %write{935,983} %mystruct{___583_p} %mystructfield{0}
local	float	___583_p.y	%read{946,997} %write{936,983} %mystruct{___583_p} %mystructfield{1}
local	float	___583_p.z	%read{946,997} %write{937,983} %mystruct{___583_p} %mystructfield{2}
local	float	___583_p.w	%read{946,998} %write{938,983} %mystruct{___583_p} %mystructfield{3}
local	float	___583_pwHL	%read{946,983} %write{940,940}
local	float	___583_pwr	%read{946,1005} %write{941,983}
local	float	___583_value	%read{946,1009} %write{942,1008}
local	float	___583_weight	%read{946,1006} %write{943,995}
local	int	___584_i	%read{946,983} %write{945,983}
local	float	___585_signal	%read{946,983} %write{946,983}
local	float	___583_rmd	%read{986,1006} %write{985,985}
local	float	___587_signal	%read{1007,1007} %write{1005,1005}
local	float	___589_p.x	%read{1021,1068} %write{1013,1068} %mystruct{___589_p} %mystructfield{0}
local	float	___589_p.y	%read{1021,1068} %write{1014,1068} %mystruct{___589_p} %mystructfield{1}
local	float	___589_p.z	%read{1021,1068} %write{1015,1068} %mystruct{___589_p} %mystructfield{2}
local	float	___589_p.w	%read{1022,1068} %write{1016,1068} %mystruct{___589_p} %mystructfield{3}
local	float	___589_pwHL	%read{1019,1068} %write{1018,1018}
local	float	___589_pwr	%read{1035,1068} %write{1019,1068}
local	float	___589_signal	%read{1030,1068} %write{1029,1068}
local	float	___589_value	%read{1035,1069} %write{1031,1068}
local	float	___589_weight	%read{1035,1068} %write{1032,1068}
local	int	___590_i	%read{1035,1068} %write{1034,1068}
local	float	dimension	%read{18,1077} %write{1,1}
local	float	octaves	%read{22,1130} %write{4,4}
local	float	lacunarity	%read{19,1128} %write{5,5}
local	point	s	%read{8,808} %write{6,8}
local	float	___592_p	%read{15,209} %write{11,11}
local	float	___599_p.x	%read{273,491} %write{268,268} %mystruct{___599_p} %mystructfield{0}
local	float	___599_p.y	%read{274,492} %write{269,269} %mystruct{___599_p} %mystructfield{1}
local	point	___606_p	%read{559,753} %write{555,555}
local	float	___613_p.x	%read{823,1073} %write{816,816} %mystruct{___613_p} %mystructfield{0}
local	float	___613_p.y	%read{824,1074} %write{817,817} %mystruct{___613_p} %mystructfield{1}
local	float	___613_p.z	%read{825,1075} %write{818,818} %mystruct{___613_p} %mystructfield{2}
local	float	___613_p.w	%read{826,1076} %write{819,819} %mystruct{___613_p} %mystructfield{3}
const	float	$const1	9.99999975e-06		%read{1,5} %write{2147483647,-1}
const	float	$const2	0		%read{4,1148} %write{2147483647,-1}
const	float	$const3	15		%read{3,3} %write{2147483647,-1}
const	string	$const4	"clamp"		%read{2,1049} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{3,3}
const	string	$const5	"1D"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp2	%read{10,10} %write{9,9}
const	string	$const6	"multifractal"		%read{12,820} %write{2147483647,-1}
temp	int	$tmp3	%read{13,13} %write{12,12}
const	string	$const7	"noise_musgrave_multi_fractal_1d"		%read{14,14} %write{2147483647,-1}
const	float	$const8	1		%read{16,1050} %write{2147483647,-1}
temp	float	$tmp4	%read{19,19} %write{18,18}
const	int	$const9	0		%read{21,1103} %write{2147483647,-1}
temp	int	$tmp5	%read{22,38} %write{22,38}
temp	int	$tmp6	%read{22,38} %write{22,38}
temp	int	$tmp7	%read{20,38} %write{21,38}
temp	float	$tmp8	%read{22,38} %write{22,38}
const	string	$const10	"safe_snoise"		%read{25,1133} %write{2147483647,-1}
const	string	$const11	"snoise"		%read{26,1135} %write{2147483647,-1}
temp	int	$tmp9	%read{22,38} %write{22,38}
temp	float	$tmp10	%read{22,38} %write{22,38}
temp	float	$tmp11	%read{22,38} %write{22,38}
const	int	$const12	1		%read{38,1128} %write{2147483647,-1}
temp	int	$tmp12	%read{2147483647,-1} %write{22,38}
temp	float	$tmp13	%read{40,40} %write{39,39}
temp	int	$tmp14	%read{42,42} %write{41,41}
temp	float	$tmp15	%read{51,51} %write{43,43}
temp	float	$tmp16	%read{51,51} %write{48,50}
temp	int	$tmp17	%read{47,47} %write{46,46}
temp	float	$tmp18	%read{52,52} %write{51,51}
temp	float	$tmp19	%read{53,53} %write{52,52}
const	string	$const13	"fBM"		%read{55,877} %write{2147483647,-1}
temp	int	$tmp20	%read{56,56} %write{55,55}
const	string	$const14	"noise_musgrave_fBm_1d"		%read{57,57} %write{2147483647,-1}
temp	float	$tmp21	%read{62,62} %write{61,61}
temp	int	$tmp22	%read{65,80} %write{65,80}
temp	int	$tmp23	%read{65,80} %write{65,80}
temp	int	$tmp24	%read{63,80} %write{64,80}
temp	float	$tmp25	%read{65,80} %write{65,80}
temp	int	$tmp26	%read{65,80} %write{65,80}
temp	float	$tmp27	%read{65,80} %write{65,80}
temp	int	$tmp28	%read{2147483647,-1} %write{65,80}
temp	float	$tmp29	%read{82,82} %write{81,81}
temp	int	$tmp30	%read{84,84} %write{83,83}
temp	float	$tmp31	%read{92,92} %write{89,91}
temp	int	$tmp32	%read{88,88} %write{87,87}
temp	float	$tmp33	%read{93,93} %write{92,92}
temp	float	$tmp34	%read{94,94} %write{93,93}
const	string	$const15	"hybrid_multifractal"		%read{96,932} %write{2147483647,-1}
temp	int	$tmp35	%read{97,97} %write{96,96}
const	string	$const16	"noise_musgrave_hybrid_multi_fractal_1d"		%read{98,98} %write{2147483647,-1}
temp	float	$tmp36	%read{101,101} %write{100,100}
const	float	$const17	0.00100000005		%read{107,989} %write{2147483647,-1}
temp	int	$tmp37	%read{107,134} %write{107,134}
temp	int	$tmp38	%read{107,134} %write{107,134}
temp	int	$tmp39	%read{107,134} %write{107,134}
temp	int	$tmp40	%read{107,134} %write{107,134}
temp	int	$tmp41	%read{107,134} %write{107,134}
temp	int	$tmp42	%read{105,134} %write{106,134}
temp	int	$tmp43	%read{107,134} %write{107,134}
temp	float	$tmp44	%read{107,134} %write{107,134}
temp	int	$tmp45	%read{107,134} %write{107,134}
temp	float	$tmp46	%read{107,134} %write{107,134}
temp	float	$tmp47	%read{107,134} %write{107,134}
temp	float	$tmp48	%read{107,134} %write{107,134}
temp	int	$tmp49	%read{2147483647,-1} %write{107,134}
temp	float	$tmp50	%read{136,136} %write{135,135}
temp	int	$tmp51	%read{138,138} %write{137,137}
temp	int	$tmp52	%read{139,143} %write{138,142}
temp	int	$tmp53	%read{141,141} %write{140,140}
temp	int	$tmp54	%read{142,142} %write{141,141}
temp	int	$tmp55	%read{145,145} %write{144,144}
temp	float	$tmp56	%read{154,154} %write{151,153}
temp	int	$tmp57	%read{150,150} %write{149,149}
temp	float	$tmp58	%read{155,155} %write{154,154}
temp	float	$tmp59	%read{157,157} %write{156,156}
temp	float	$tmp60	%read{158,158} %write{157,157}
const	string	$const18	"ridged_multifractal"		%read{160,1010} %write{2147483647,-1}
temp	int	$tmp61	%read{161,161} %write{160,160}
const	string	$const19	"noise_musgrave_ridged_multi_fractal_1d"		%read{162,162} %write{2147483647,-1}
temp	float	$tmp62	%read{165,165} %write{164,164}
temp	float	$tmp63	%read{175,175} %write{174,174}
temp	float	$tmp64	%read{174,174} %write{171,173}
temp	int	$tmp65	%read{170,170} %write{169,169}
temp	int	$tmp66	%read{181,204} %write{181,204}
temp	int	$tmp67	%read{181,204} %write{181,204}
temp	int	$tmp68	%read{179,204} %write{180,204}
temp	float	$tmp69	%read{181,204} %write{181,204}
temp	float	$tmp70	%read{181,204} %write{181,204}
temp	float	$tmp71	%read{181,204} %write{181,204}
temp	float	$tmp72	%read{181,204} %write{181,204}
temp	int	$tmp73	%read{181,204} %write{181,204}
temp	float	$tmp74	%read{181,204} %write{181,204}
temp	int	$tmp75	%read{2147483647,-1} %write{181,204}
const	string	$const20	"hetero_terrain"		%read{206,1070} %write{2147483647,-1}
temp	int	$tmp76	%read{207,207} %write{206,206}
const	string	$const21	"noise_musgrave_hetero_terrain_1d"		%read{208,208} %write{2147483647,-1}
temp	float	$tmp77	%read{211,211} %write{210,210}
temp	float	$tmp78	%read{220,220} %write{217,219}
temp	int	$tmp79	%read{216,216} %write{215,215}
temp	int	$tmp80	%read{224,241} %write{224,241}
temp	int	$tmp81	%read{224,241} %write{224,241}
temp	int	$tmp82	%read{222,241} %write{223,241}
temp	float	$tmp83	%read{224,241} %write{224,241}
temp	int	$tmp84	%read{224,241} %write{224,241}
temp	float	$tmp85	%read{224,241} %write{224,241}
temp	float	$tmp86	%read{224,241} %write{224,241}
temp	int	$tmp87	%read{2147483647,-1} %write{224,241}
temp	float	$tmp88	%read{243,243} %write{242,242}
temp	int	$tmp89	%read{245,245} %write{244,244}
temp	float	$tmp90	%read{253,253} %write{250,252}
temp	int	$tmp91	%read{249,249} %write{248,248}
temp	float	$tmp92	%read{254,254} %write{253,253}
temp	float	$tmp93	%read{255,255} %write{254,254}
temp	float	$tmp94	%read{257,257} %write{256,256}
const	string	$const22	"2D"		%read{260,260} %write{2147483647,-1}
temp	int	$tmp95	%read{261,261} %write{260,260}
temp	float	$tmp96.x	%read{268,268} %write{262,262}
temp	float	$tmp96.y	%read{269,269} %write{263,263}
const	string	$const23	"__operator__mul__"		%read{264,1122} %write{2147483647,-1}
temp	float	$tmp97.x	%read{268,268} %write{265,265}
temp	float	$tmp97.y	%read{269,269} %write{266,266}
temp	int	$tmp98	%read{271,271} %write{270,270}
const	string	$const24	"noise_musgrave_multi_fractal_2d"		%read{272,272} %write{2147483647,-1}
temp	float	$tmp99	%read{278,278} %write{277,277}
temp	int	$tmp100	%read{281,302} %write{281,302}
temp	int	$tmp101	%read{281,302} %write{281,302}
temp	int	$tmp102	%read{279,302} %write{280,302}
temp	float	$tmp103	%read{281,302} %write{281,302}
temp	int	$tmp104	%read{281,302} %write{281,302}
temp	float	$tmp105	%read{281,302} %write{281,302}
temp	float	$tmp106	%read{281,302} %write{281,302}
temp	float	$tmp107.x	%read{281,302} %write{281,302}
temp	float	$tmp107.y	%read{281,302} %write{281,302}
temp	int	$tmp108	%read{2147483647,-1} %write{281,302}
temp	float	$tmp109	%read{304,304} %write{303,303}
temp	int	$tmp110	%read{306,306} %write{305,305}
temp	float	$tmp111	%read{315,315} %write{307,307}
temp	float	$tmp112	%read{315,315} %write{312,314}
temp	int	$tmp113	%read{311,311} %write{310,310}
temp	float	$tmp114	%read{316,316} %write{315,315}
temp	float	$tmp115	%read{317,317} %write{316,316}
temp	int	$tmp116	%read{320,320} %write{319,319}
const	string	$const25	"noise_musgrave_fBm_2d"		%read{321,321} %write{2147483647,-1}
temp	float	$tmp117	%read{327,327} %write{326,326}
temp	int	$tmp118	%read{330,350} %write{330,350}
temp	int	$tmp119	%read{330,350} %write{330,350}
temp	int	$tmp120	%read{328,350} %write{329,350}
temp	float	$tmp121	%read{330,350} %write{330,350}
temp	int	$tmp122	%read{330,350} %write{330,350}
temp	float	$tmp123	%read{330,350} %write{330,350}
temp	float	$tmp124.x	%read{330,350} %write{330,350}
temp	float	$tmp124.y	%read{330,350} %write{330,350}
temp	int	$tmp125	%read{2147483647,-1} %write{330,350}
temp	float	$tmp126	%read{352,352} %write{351,351}
temp	int	$tmp127	%read{354,354} %write{353,353}
temp	float	$tmp128	%read{362,362} %write{359,361}
temp	int	$tmp129	%read{358,358} %write{357,357}
temp	float	$tmp130	%read{363,363} %write{362,362}
temp	float	$tmp131	%read{364,364} %write{363,363}
temp	int	$tmp132	%read{367,367} %write{366,366}
const	string	$const26	"noise_musgrave_hybrid_multi_fractal_2d"		%read{368,368} %write{2147483647,-1}
temp	float	$tmp133	%read{372,372} %write{371,371}
temp	int	$tmp134	%read{378,410} %write{378,410}
temp	int	$tmp135	%read{378,410} %write{378,410}
temp	int	$tmp136	%read{378,410} %write{378,410}
temp	int	$tmp137	%read{378,410} %write{378,410}
temp	int	$tmp138	%read{378,410} %write{378,410}
temp	int	$tmp139	%read{376,410} %write{377,410}
temp	int	$tmp140	%read{378,410} %write{378,410}
temp	float	$tmp141	%read{378,410} %write{378,410}
temp	int	$tmp142	%read{378,410} %write{378,410}
temp	float	$tmp143	%read{378,410} %write{378,410}
temp	float	$tmp144	%read{378,410} %write{378,410}
temp	float	$tmp145	%read{378,410} %write{378,410}
temp	float	$tmp146.x	%read{378,410} %write{378,410}
temp	float	$tmp146.y	%read{378,410} %write{378,410}
temp	int	$tmp147	%read{2147483647,-1} %write{378,410}
temp	float	$tmp148	%read{412,412} %write{411,411}
temp	int	$tmp149	%read{414,414} %write{413,413}
temp	int	$tmp150	%read{415,419} %write{414,418}
temp	int	$tmp151	%read{417,417} %write{416,416}
temp	int	$tmp152	%read{418,418} %write{417,417}
temp	int	$tmp153	%read{421,421} %write{420,420}
temp	float	$tmp154	%read{430,430} %write{427,429}
temp	int	$tmp155	%read{426,426} %write{425,425}
temp	float	$tmp156	%read{431,431} %write{430,430}
temp	float	$tmp157	%read{433,433} %write{432,432}
temp	float	$tmp158	%read{434,434} %write{433,433}
temp	int	$tmp159	%read{437,437} %write{436,436}
const	string	$const27	"noise_musgrave_ridged_multi_fractal_2d"		%read{438,438} %write{2147483647,-1}
temp	float	$tmp160	%read{442,442} %write{441,441}
temp	float	$tmp161	%read{452,452} %write{451,451}
temp	float	$tmp162	%read{451,451} %write{448,450}
temp	int	$tmp163	%read{447,447} %write{446,446}
temp	int	$tmp164	%read{458,486} %write{458,486}
temp	int	$tmp165	%read{458,486} %write{458,486}
temp	int	$tmp166	%read{456,486} %write{457,486}
temp	float	$tmp167.x	%read{458,486} %write{458,486}
temp	float	$tmp167.y	%read{458,486} %write{458,486}
temp	float	$tmp168	%read{458,486} %write{458,486}
temp	float	$tmp169	%read{458,486} %write{458,486}
temp	float	$tmp170	%read{458,486} %write{458,486}
temp	float	$tmp171	%read{458,486} %write{458,486}
temp	int	$tmp172	%read{458,486} %write{458,486}
temp	float	$tmp173	%read{458,486} %write{458,486}
temp	int	$tmp174	%read{2147483647,-1} %write{458,486}
temp	int	$tmp175	%read{489,489} %write{488,488}
const	string	$const28	"noise_musgrave_hetero_terrain_2d"		%read{490,490} %write{2147483647,-1}
temp	float	$tmp176	%read{494,494} %write{493,493}
temp	float	$tmp177	%read{503,503} %write{500,502}
temp	int	$tmp178	%read{499,499} %write{498,498}
temp	float	$tmp179.x	%read{508,508} %write{505,505}
temp	float	$tmp179.y	%read{509,509} %write{506,506}
temp	int	$tmp180	%read{512,534} %write{512,534}
temp	int	$tmp181	%read{512,534} %write{512,534}
temp	int	$tmp182	%read{510,534} %write{511,534}
temp	float	$tmp183	%read{512,534} %write{512,534}
temp	int	$tmp184	%read{512,534} %write{512,534}
temp	float	$tmp185	%read{512,534} %write{512,534}
temp	float	$tmp186	%read{512,534} %write{512,534}
temp	float	$tmp187.x	%read{512,534} %write{512,534}
temp	float	$tmp187.y	%read{512,534} %write{512,534}
temp	int	$tmp188	%read{2147483647,-1} %write{512,534}
temp	float	$tmp189	%read{536,536} %write{535,535}
temp	int	$tmp190	%read{538,538} %write{537,537}
temp	float	$tmp191	%read{546,546} %write{543,545}
temp	int	$tmp192	%read{542,542} %write{541,541}
temp	float	$tmp193	%read{547,547} %write{546,546}
temp	float	$tmp194	%read{548,548} %write{547,547}
temp	float	$tmp195	%read{550,550} %write{549,549}
const	string	$const29	"3D"		%read{553,553} %write{2147483647,-1}
temp	int	$tmp196	%read{554,554} %write{553,553}
temp	int	$tmp197	%read{557,557} %write{556,556}
const	string	$const30	"noise_musgrave_multi_fractal_3d"		%read{558,558} %write{2147483647,-1}
temp	float	$tmp198	%read{563,563} %write{562,562}
temp	int	$tmp199	%read{566,582} %write{566,582}
temp	int	$tmp200	%read{566,582} %write{566,582}
temp	int	$tmp201	%read{564,582} %write{565,582}
temp	float	$tmp202	%read{566,582} %write{566,582}
temp	int	$tmp203	%read{566,582} %write{566,582}
temp	float	$tmp204	%read{566,582} %write{566,582}
temp	float	$tmp205	%read{566,582} %write{566,582}
temp	int	$tmp206	%read{2147483647,-1} %write{566,582}
temp	float	$tmp207	%read{584,584} %write{583,583}
temp	int	$tmp208	%read{586,586} %write{585,585}
temp	float	$tmp209	%read{595,595} %write{587,587}
temp	float	$tmp210	%read{595,595} %write{592,594}
temp	int	$tmp211	%read{591,591} %write{590,590}
temp	float	$tmp212	%read{596,596} %write{595,595}
temp	float	$tmp213	%read{597,597} %write{596,596}
temp	int	$tmp214	%read{600,600} %write{599,599}
const	string	$const31	"noise_musgrave_fBm_3d"		%read{601,601} %write{2147483647,-1}
temp	float	$tmp215	%read{606,606} %write{605,605}
temp	int	$tmp216	%read{609,624} %write{609,624}
temp	int	$tmp217	%read{609,624} %write{609,624}
temp	int	$tmp218	%read{607,624} %write{608,624}
temp	float	$tmp219	%read{609,624} %write{609,624}
temp	int	$tmp220	%read{609,624} %write{609,624}
temp	float	$tmp221	%read{609,624} %write{609,624}
temp	int	$tmp222	%read{2147483647,-1} %write{609,624}
temp	float	$tmp223	%read{626,626} %write{625,625}
temp	int	$tmp224	%read{628,628} %write{627,627}
temp	float	$tmp225	%read{636,636} %write{633,635}
temp	int	$tmp226	%read{632,632} %write{631,631}
temp	float	$tmp227	%read{637,637} %write{636,636}
temp	float	$tmp228	%read{638,638} %write{637,637}
temp	int	$tmp229	%read{641,641} %write{640,640}
const	string	$const32	"noise_musgrave_hybrid_multi_fractal_3d"		%read{642,642} %write{2147483647,-1}
temp	float	$tmp230	%read{645,645} %write{644,644}
temp	int	$tmp231	%read{651,678} %write{651,678}
temp	int	$tmp232	%read{651,678} %write{651,678}
temp	int	$tmp233	%read{651,678} %write{651,678}
temp	int	$tmp234	%read{651,678} %write{651,678}
temp	int	$tmp235	%read{651,678} %write{651,678}
temp	int	$tmp236	%read{649,678} %write{650,678}
temp	int	$tmp237	%read{651,678} %write{651,678}
temp	float	$tmp238	%read{651,678} %write{651,678}
temp	int	$tmp239	%read{651,678} %write{651,678}
temp	float	$tmp240	%read{651,678} %write{651,678}
temp	float	$tmp241	%read{651,678} %write{651,678}
temp	float	$tmp242	%read{651,678} %write{651,678}
temp	int	$tmp243	%read{2147483647,-1} %write{651,678}
temp	float	$tmp244	%read{680,680} %write{679,679}
temp	int	$tmp245	%read{682,682} %write{681,681}
temp	int	$tmp246	%read{683,687} %write{682,686}
temp	int	$tmp247	%read{685,685} %write{684,684}
temp	int	$tmp248	%read{686,686} %write{685,685}
temp	int	$tmp249	%read{689,689} %write{688,688}
temp	float	$tmp250	%read{698,698} %write{695,697}
temp	int	$tmp251	%read{694,694} %write{693,693}
temp	float	$tmp252	%read{699,699} %write{698,698}
temp	float	$tmp253	%read{701,701} %write{700,700}
temp	float	$tmp254	%read{702,702} %write{701,701}
temp	int	$tmp255	%read{705,705} %write{704,704}
const	string	$const33	"noise_musgrave_ridged_multi_fractal_3d"		%read{706,706} %write{2147483647,-1}
temp	float	$tmp256	%read{709,709} %write{708,708}
temp	float	$tmp257	%read{719,719} %write{718,718}
temp	float	$tmp258	%read{718,718} %write{715,717}
temp	int	$tmp259	%read{714,714} %write{713,713}
temp	int	$tmp260	%read{725,748} %write{725,748}
temp	int	$tmp261	%read{725,748} %write{725,748}
temp	int	$tmp262	%read{723,748} %write{724,748}
temp	float	$tmp263	%read{725,748} %write{725,748}
temp	float	$tmp264	%read{725,748} %write{725,748}
temp	float	$tmp265	%read{725,748} %write{725,748}
temp	float	$tmp266	%read{725,748} %write{725,748}
temp	int	$tmp267	%read{725,748} %write{725,748}
temp	float	$tmp268	%read{725,748} %write{725,748}
temp	int	$tmp269	%read{2147483647,-1} %write{725,748}
temp	int	$tmp270	%read{751,751} %write{750,750}
const	string	$const34	"noise_musgrave_hetero_terrain_3d"		%read{752,752} %write{2147483647,-1}
temp	float	$tmp271	%read{755,755} %write{754,754}
temp	float	$tmp272	%read{764,764} %write{761,763}
temp	int	$tmp273	%read{760,760} %write{759,759}
temp	int	$tmp274	%read{768,785} %write{768,785}
temp	int	$tmp275	%read{768,785} %write{768,785}
temp	int	$tmp276	%read{766,785} %write{767,785}
temp	float	$tmp277	%read{768,785} %write{768,785}
temp	int	$tmp278	%read{768,785} %write{768,785}
temp	float	$tmp279	%read{768,785} %write{768,785}
temp	float	$tmp280	%read{768,785} %write{768,785}
temp	int	$tmp281	%read{2147483647,-1} %write{768,785}
temp	float	$tmp282	%read{787,787} %write{786,786}
temp	int	$tmp283	%read{789,789} %write{788,788}
temp	float	$tmp284	%read{797,797} %write{794,796}
temp	int	$tmp285	%read{793,793} %write{792,792}
temp	float	$tmp286	%read{798,798} %write{797,797}
temp	float	$tmp287	%read{799,799} %write{798,798}
temp	float	$tmp288	%read{801,801} %write{800,800}
const	string	$const35	"4D"		%read{804,804} %write{2147483647,-1}
temp	int	$tmp289	%read{805,805} %write{804,804}
temp	float	$tmp290.x	%read{816,816} %write{806,806}
temp	float	$tmp290.y	%read{817,817} %write{807,807}
temp	float	$tmp290.z	%read{818,818} %write{808,808}
temp	float	$tmp290.w	%read{819,819} %write{809,809}
const	int	$const36	2		%read{808,808} %write{2147483647,-1}
temp	float	$tmp291.x	%read{816,816} %write{811,811}
temp	float	$tmp291.y	%read{817,817} %write{812,812}
temp	float	$tmp291.z	%read{818,818} %write{813,813}
temp	float	$tmp291.w	%read{819,819} %write{814,814}
temp	int	$tmp292	%read{821,821} %write{820,820}
const	string	$const37	"noise_musgrave_multi_fractal_4d"		%read{822,822} %write{2147483647,-1}
temp	float	$tmp293	%read{830,830} %write{829,829}
temp	int	$tmp294	%read{833,859} %write{833,859}
temp	int	$tmp295	%read{833,859} %write{833,859}
temp	int	$tmp296	%read{831,859} %write{832,859}
temp	float	$tmp297	%read{833,859} %write{833,859}
temp	point	$tmp298	%read{833,859} %write{833,859}
temp	int	$tmp299	%read{833,859} %write{833,859}
temp	float	$tmp300	%read{833,859} %write{833,859}
temp	float	$tmp301	%read{833,859} %write{833,859}
temp	float	$tmp302.x	%read{833,859} %write{833,859}
temp	float	$tmp302.y	%read{833,859} %write{833,859}
temp	float	$tmp302.z	%read{833,859} %write{833,859}
temp	float	$tmp302.w	%read{833,859} %write{833,859}
temp	int	$tmp303	%read{2147483647,-1} %write{833,859}
temp	float	$tmp304	%read{861,861} %write{860,860}
temp	int	$tmp305	%read{863,863} %write{862,862}
temp	float	$tmp306	%read{873,873} %write{864,864}
temp	float	$tmp307	%read{873,873} %write{870,872}
temp	point	$tmp308	%read{867,867} %write{866,866}
temp	int	$tmp309	%read{869,869} %write{868,868}
temp	float	$tmp310	%read{874,874} %write{873,873}
temp	float	$tmp311	%read{875,875} %write{874,874}
temp	int	$tmp312	%read{878,878} %write{877,877}
const	string	$const38	"noise_musgrave_fBm_4d"		%read{879,879} %write{2147483647,-1}
temp	float	$tmp313	%read{887,887} %write{886,886}
temp	int	$tmp314	%read{890,915} %write{890,915}
temp	int	$tmp315	%read{890,915} %write{890,915}
temp	int	$tmp316	%read{888,915} %write{889,915}
temp	float	$tmp317	%read{890,915} %write{890,915}
temp	point	$tmp318	%read{890,915} %write{890,915}
temp	int	$tmp319	%read{890,915} %write{890,915}
temp	float	$tmp320	%read{890,915} %write{890,915}
temp	float	$tmp321.x	%read{890,915} %write{890,915}
temp	float	$tmp321.y	%read{890,915} %write{890,915}
temp	float	$tmp321.z	%read{890,915} %write{890,915}
temp	float	$tmp321.w	%read{890,915} %write{890,915}
temp	int	$tmp322	%read{2147483647,-1} %write{890,915}
temp	float	$tmp323	%read{917,917} %write{916,916}
temp	int	$tmp324	%read{919,919} %write{918,918}
temp	float	$tmp325	%read{928,928} %write{925,927}
temp	point	$tmp326	%read{922,922} %write{921,921}
temp	int	$tmp327	%read{924,924} %write{923,923}
temp	float	$tmp328	%read{929,929} %write{928,928}
temp	float	$tmp329	%read{930,930} %write{929,929}
temp	int	$tmp330	%read{933,933} %write{932,932}
const	string	$const39	"noise_musgrave_hybrid_multi_fractal_4d"		%read{934,934} %write{2147483647,-1}
temp	float	$tmp331	%read{940,940} %write{939,939}
temp	int	$tmp332	%read{946,983} %write{946,983}
temp	int	$tmp333	%read{946,983} %write{946,983}
temp	int	$tmp334	%read{946,983} %write{946,983}
temp	int	$tmp335	%read{946,983} %write{946,983}
temp	int	$tmp336	%read{946,983} %write{946,983}
temp	int	$tmp337	%read{944,983} %write{945,983}
temp	int	$tmp338	%read{946,983} %write{946,983}
temp	float	$tmp339	%read{946,983} %write{946,983}
temp	point	$tmp340	%read{946,983} %write{946,983}
temp	int	$tmp341	%read{946,983} %write{946,983}
temp	float	$tmp342	%read{946,983} %write{946,983}
temp	float	$tmp343	%read{946,983} %write{946,983}
temp	float	$tmp344	%read{946,983} %write{946,983}
temp	float	$tmp345.x	%read{946,983} %write{946,983}
temp	float	$tmp345.y	%read{946,983} %write{946,983}
temp	float	$tmp345.z	%read{946,983} %write{946,983}
temp	float	$tmp345.w	%read{946,983} %write{946,983}
temp	int	$tmp346	%read{2147483647,-1} %write{946,983}
temp	float	$tmp347	%read{985,985} %write{984,984}
temp	int	$tmp348	%read{987,987} %write{986,986}
temp	int	$tmp349	%read{988,992} %write{987,991}
temp	int	$tmp350	%read{990,990} %write{989,989}
temp	int	$tmp351	%read{991,991} %write{990,990}
temp	int	$tmp352	%read{994,994} %write{993,993}
temp	float	$tmp353	%read{1004,1004} %write{1001,1003}
temp	point	$tmp354	%read{998,998} %write{997,997}
temp	int	$tmp355	%read{1000,1000} %write{999,999}
temp	float	$tmp356	%read{1005,1005} %write{1004,1004}
temp	float	$tmp357	%read{1007,1007} %write{1006,1006}
temp	float	$tmp358	%read{1008,1008} %write{1007,1007}
temp	int	$tmp359	%read{1011,1011} %write{1010,1010}
const	string	$const40	"noise_musgrave_ridged_multi_fractal_4d"		%read{1012,1012} %write{2147483647,-1}
temp	float	$tmp360	%read{1018,1018} %write{1017,1017}
temp	float	$tmp361	%read{1029,1029} %write{1028,1028}
temp	float	$tmp362	%read{1028,1028} %write{1025,1027}
temp	point	$tmp363	%read{1022,1022} %write{1021,1021}
temp	int	$tmp364	%read{1024,1024} %write{1023,1023}
temp	int	$tmp365	%read{1035,1068} %write{1035,1068}
temp	int	$tmp366	%read{1035,1068} %write{1035,1068}
temp	int	$tmp367	%read{1033,1068} %write{1034,1068}
temp	float	$tmp368.x	%read{1035,1068} %write{1035,1068}
temp	float	$tmp368.y	%read{1035,1068} %write{1035,1068}
temp	float	$tmp368.z	%read{1035,1068} %write{1035,1068}
temp	float	$tmp368.w	%read{1035,1068} %write{1035,1068}
temp	float	$tmp369	%read{1035,1068} %write{1035,1068}
temp	float	$tmp370	%read{1035,1068} %write{1035,1068}
temp	float	$tmp371	%read{1035,1068} %write{1035,1068}
temp	float	$tmp372	%read{1035,1068} %write{1035,1068}
temp	point	$tmp373	%read{1035,1068} %write{1035,1068}
temp	int	$tmp374	%read{1035,1068} %write{1035,1068}
temp	float	$tmp375	%read{1035,1068} %write{1035,1068}
temp	int	$tmp376	%read{2147483647,-1} %write{1035,1068}
temp	int	$tmp377	%read{1071,1071} %write{1070,1070}
const	string	$const41	"noise_musgrave_hetero_terrain_4d"		%read{1072,1072} %write{2147483647,-1}
temp	float	$tmp378	%read{1078,1078} %write{1077,1077}
temp	float	$tmp379	%read{1088,1088} %write{1085,1087}
temp	point	$tmp380	%read{1082,1082} %write{1081,1081}
temp	int	$tmp381	%read{1084,1084} %write{1083,1083}
temp	float	$tmp382.x	%read{1095,1095} %write{1090,1090}
temp	float	$tmp382.y	%read{1096,1096} %write{1091,1091}
temp	float	$tmp382.z	%read{1097,1097} %write{1092,1092}
temp	float	$tmp382.w	%read{1098,1098} %write{1093,1093}
temp	int	$tmp383	%read{1101,1128} %write{1101,1128}
temp	int	$tmp384	%read{1101,1128} %write{1101,1128}
temp	int	$tmp385	%read{1099,1128} %write{1100,1128}
temp	float	$tmp386	%read{1101,1128} %write{1101,1128}
temp	point	$tmp387	%read{1101,1128} %write{1101,1128}
temp	int	$tmp388	%read{1101,1128} %write{1101,1128}
temp	float	$tmp389	%read{1101,1128} %write{1101,1128}
temp	float	$tmp390	%read{1101,1128} %write{1101,1128}
temp	float	$tmp391.x	%read{1101,1128} %write{1101,1128}
temp	float	$tmp391.y	%read{1101,1128} %write{1101,1128}
temp	float	$tmp391.z	%read{1101,1128} %write{1101,1128}
temp	float	$tmp391.w	%read{1101,1128} %write{1101,1128}
temp	int	$tmp392	%read{2147483647,-1} %write{1101,1128}
temp	float	$tmp393	%read{1130,1130} %write{1129,1129}
temp	int	$tmp394	%read{1132,1132} %write{1131,1131}
temp	float	$tmp395	%read{1141,1141} %write{1138,1140}
temp	point	$tmp396	%read{1135,1135} %write{1134,1134}
temp	int	$tmp397	%read{1137,1137} %write{1136,1136}
temp	float	$tmp398	%read{1142,1142} %write{1141,1141}
temp	float	$tmp399	%read{1143,1143} %write{1142,1142}
temp	float	$tmp400	%read{1145,1145} %write{1144,1144}
code Vector
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:688
#     point Vector = P,
	assign		Vector P 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{688} %argrw{"wr"}
code ___main___
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:698
#   float dimension = max(Dimension, 1e-5);
	max		dimension Dimension $const1 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{698} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:699
#   float octaves = clamp(Detail, 0.0, 15.0);
	functioncall	$const4 5 	%line{699} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Detail $const3 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		octaves $tmp1 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:700
#   float lacunarity = max(Lacunarity, 1e-5);
	max		lacunarity Lacunarity $const1 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{700} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:702
#   vector3 s = Vector;
	assign		s Vector 	%line{702} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:704
#   if (use_mapping)
	if		use_mapping 9 9 	%line{704} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:705
#     s = transform(mapping, s);
	transform	s mapping s 	%line{705} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:707
#   if (dimensions == "1D") {
	eq		$tmp2 dimensions $const5 	%line{707} %argrw{"wrr"}
	if		$tmp2 260 1149 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:708
#     float p = W * Scale;
	mul		___592_p W Scale 	%line{708} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:709
#     if (musgrave_type == "multifractal") {
	eq		$tmp3 musgrave_type $const6 	%line{709} %argrw{"wrr"}
	if		$tmp3 55 260 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:710
#       Fac = noise_musgrave_multi_fractal_1d(p, dimension, lacunarity, octaves);
	functioncall	$const7 55 	%line{710} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:50
#   float p = co;
	assign		___512_p ___592_p 	%line{50} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:51
#   float value = 1.0;
	assign		___512_value $const8 	%line{51} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:52
#   float pwr = 1.0;
	assign		___512_pwr $const8 	%line{52} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:53
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp4 dimension 	%line{53} %argrw{"wr"}
	pow		___512_pwHL lacunarity $tmp4 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:55
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp7 22 25 37 39 	%line{55} %argrw{"r"}
	assign		___513_i $const9 	%argrw{"wr"}
	assign		$tmp5 octaves 	%argrw{"wr"}
	lt		$tmp6 ___513_i $tmp5 	%argrw{"wrr"}
	neq		$tmp7 $tmp6 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:56
#     value *= (pwr * safe_snoise(p) + 1.0);
	functioncall	$const10 32 	%line{56} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___512_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp9 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp9 31 31 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp8 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp8 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:56
#     value *= (pwr * safe_snoise(p) + 1.0);
	mul		$tmp10 ___512_pwr $tmp8 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{56} %argrw{"wrr"}
	add		$tmp11 $tmp10 $const8 	%argrw{"wrr"}
	mul		___512_value ___512_value $tmp11 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:57
#     pwr *= pwHL;
	mul		___512_pwr ___512_pwr ___512_pwHL 	%line{57} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:58
#     p *= lacunarity;
	mul		___512_p ___512_p lacunarity 	%line{58} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:55
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp12 ___513_i 	%line{55} %argrw{"wr"}
	add		___513_i ___513_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:61
#   float rmd = octaves - floor(octaves);
	floor		$tmp13 octaves 	%line{61} %argrw{"wr"}
	sub		___512_rmd octaves $tmp13 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:62
#   if (rmd != 0.0) {
	neq		$tmp14 ___512_rmd $const2 	%line{62} %argrw{"wrr"}
	if		$tmp14 54 54 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:63
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp15 ___512_rmd ___512_pwr 	%line{63} %argrw{"wrr"}
	functioncall	$const10 51 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___512_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp17 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp17 50 50 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp16 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp16 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:63
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp18 $tmp15 $tmp16 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{63} %argrw{"wrr"}
	add		$tmp19 $tmp18 $const8 	%argrw{"wrr"}
	mul		___512_value ___512_value $tmp19 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:66
#   return value;
	assign		Fac ___512_value 	%line{66} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:712
#     else if (musgrave_type == "fBM") {
	eq		$tmp20 musgrave_type $const13 	%line{712} %argrw{"wrr"}
	if		$tmp20 96 260 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:713
#       Fac = noise_musgrave_fBm_1d(p, dimension, lacunarity, octaves);
	functioncall	$const14 96 	%line{713} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:22
#   float p = co;
	assign		___508_p ___592_p 	%line{22} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:23
#   float value = 0.0;
	assign		___508_value $const2 	%line{23} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:24
#   float pwr = 1.0;
	assign		___508_pwr $const8 	%line{24} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:25
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp21 dimension 	%line{25} %argrw{"wr"}
	pow		___508_pwHL lacunarity $tmp21 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:27
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp24 65 68 79 81 	%line{27} %argrw{"r"}
	assign		___509_i $const9 	%argrw{"wr"}
	assign		$tmp22 octaves 	%argrw{"wr"}
	lt		$tmp23 ___509_i $tmp22 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:28
#     value += safe_snoise(p) * pwr;
	functioncall	$const10 75 	%line{28} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___508_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp26 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp26 74 74 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp25 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp25 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:28
#     value += safe_snoise(p) * pwr;
	mul		$tmp27 $tmp25 ___508_pwr 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{28} %argrw{"wrr"}
	add		___508_value ___508_value $tmp27 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:29
#     pwr *= pwHL;
	mul		___508_pwr ___508_pwr ___508_pwHL 	%line{29} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:30
#     p *= lacunarity;
	mul		___508_p ___508_p lacunarity 	%line{30} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:27
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp28 ___509_i 	%line{27} %argrw{"wr"}
	add		___509_i ___509_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:33
#   float rmd = octaves - floor(octaves);
	floor		$tmp29 octaves 	%line{33} %argrw{"wr"}
	sub		___508_rmd octaves $tmp29 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:34
#   if (rmd != 0.0) {
	neq		$tmp30 ___508_rmd $const2 	%line{34} %argrw{"wrr"}
	if		$tmp30 95 95 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:35
#     value += rmd * safe_snoise(p) * pwr;
	functioncall	$const10 92 	%line{35} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___508_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp32 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp32 91 91 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp31 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp31 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:35
#     value += rmd * safe_snoise(p) * pwr;
	mul		$tmp33 ___508_rmd $tmp31 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{35} %argrw{"wrr"}
	mul		$tmp34 $tmp33 ___508_pwr 	%argrw{"wrr"}
	add		___508_value ___508_value $tmp34 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:38
#   return value;
	assign		Fac ___508_value 	%line{38} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:715
#     else if (musgrave_type == "hybrid_multifractal") {
	eq		$tmp35 musgrave_type $const15 	%line{715} %argrw{"wrr"}
	if		$tmp35 160 260 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:716
#       Fac = noise_musgrave_hybrid_multi_fractal_1d(
	functioncall	$const16 160 	%line{716} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:115
#   float p = co;
	assign		___520_p ___592_p 	%line{115} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:116
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp36 dimension 	%line{116} %argrw{"wr"}
	pow		___520_pwHL lacunarity $tmp36 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:118
#   float pwr = 1.0;
	assign		___520_pwr $const8 	%line{118} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:119
#   float value = 0.0;
	assign		___520_value $const2 	%line{119} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:120
#   float weight = 1.0;
	assign		___520_weight $const8 	%line{120} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:122
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	for		$tmp42 107 115 133 135 	%line{122} %argrw{"r"}
	assign		___521_i $const9 	%argrw{"wr"}
	gt		$tmp37 ___520_weight $const17 	%argrw{"wrr"}
	neq		$tmp38 $tmp37 $const9 	%argrw{"wrr"}
	if		$tmp38 114 114 	%argrw{"r"}
	assign		$tmp39 octaves 	%argrw{"wr"}
	lt		$tmp40 ___521_i $tmp39 	%argrw{"wrr"}
	neq		$tmp41 $tmp40 $const9 	%argrw{"wrr"}
	assign		$tmp38 $tmp41 	%argrw{"wr"}
	neq		$tmp42 $tmp38 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:123
#     if (weight > 1.0) {
	gt		$tmp43 ___520_weight $const8 	%line{123} %argrw{"wrr"}
	if		$tmp43 118 118 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:124
#       weight = 1.0;
	assign		___520_weight $const8 	%line{124} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:127
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 125 	%line{127} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___520_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp45 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp45 124 124 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp44 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp44 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:127
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp46 $tmp44 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{127} %argrw{"wrr"}
	mul		___522_signal $tmp46 ___520_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:128
#     pwr *= pwHL;
	mul		___520_pwr ___520_pwr ___520_pwHL 	%line{128} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:129
#     value += weight * signal;
	mul		$tmp47 ___520_weight ___522_signal 	%line{129} %argrw{"wrr"}
	add		___520_value ___520_value $tmp47 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:130
#     weight *= gain * signal;
	mul		$tmp48 Gain ___522_signal 	%line{130} %argrw{"wrr"}
	mul		___520_weight ___520_weight $tmp48 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:131
#     p *= lacunarity;
	mul		___520_p ___520_p lacunarity 	%line{131} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:122
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	assign		$tmp49 ___521_i 	%line{122} %argrw{"wr"}
	add		___521_i ___521_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:134
#   float rmd = octaves - floor(octaves);
	floor		$tmp50 octaves 	%line{134} %argrw{"wr"}
	sub		___520_rmd octaves $tmp50 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:135
#   if ((rmd != 0.0) && (weight > 0.001)) {
	neq		$tmp51 ___520_rmd $const2 	%line{135} %argrw{"wrr"}
	neq		$tmp52 $tmp51 $const9 	%argrw{"wrr"}
	if		$tmp52 143 143 	%argrw{"r"}
	gt		$tmp53 ___520_weight $const17 	%argrw{"wrr"}
	neq		$tmp54 $tmp53 $const9 	%argrw{"wrr"}
	assign		$tmp52 $tmp54 	%argrw{"wr"}
	if		$tmp52 159 159 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:136
#     if (weight > 1.0) {
	gt		$tmp55 ___520_weight $const8 	%line{136} %argrw{"wrr"}
	if		$tmp55 147 147 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:137
#       weight = 1.0;
	assign		___520_weight $const8 	%line{137} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:139
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 154 	%line{139} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___520_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp57 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp57 153 153 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp56 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp56 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:139
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp58 $tmp56 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{139} %argrw{"wrr"}
	mul		___524_signal $tmp58 ___520_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:140
#     value += rmd * weight * signal;
	mul		$tmp59 ___520_rmd ___520_weight 	%line{140} %argrw{"wrr"}
	mul		$tmp60 $tmp59 ___524_signal 	%argrw{"wrr"}
	add		___520_value ___520_value $tmp60 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:143
#   return value;
	assign		Fac ___520_value 	%line{143} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:719
#     else if (musgrave_type == "ridged_multifractal") {
	eq		$tmp61 musgrave_type $const18 	%line{719} %argrw{"wrr"}
	if		$tmp61 206 260 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:720
#       Fac = noise_musgrave_ridged_multi_fractal_1d(
	functioncall	$const19 206 	%line{720} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:157
#   float p = co;
	assign		___526_p ___592_p 	%line{157} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:158
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp62 dimension 	%line{158} %argrw{"wr"}
	pow		___526_pwHL lacunarity $tmp62 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:159
#   float pwr = pwHL;
	assign		___526_pwr ___526_pwHL 	%line{159} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:161
#   float signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 174 	%line{161} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___526_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp65 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp65 173 173 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp64 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp64 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:161
#   float signal = offset - fabs(safe_snoise(p));
	fabs		$tmp63 $tmp64 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{161} %argrw{"wr"}
	sub		___526_signal Offset $tmp63 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:162
#   signal *= signal;
	mul		___526_signal ___526_signal ___526_signal 	%line{162} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:163
#   float value = signal;
	assign		___526_value ___526_signal 	%line{163} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:164
#   float weight = 1.0;
	assign		___526_weight $const8 	%line{164} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:166
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp68 181 184 203 205 	%line{166} %argrw{"r"}
	assign		___527_i $const12 	%argrw{"wr"}
	assign		$tmp66 octaves 	%argrw{"wr"}
	lt		$tmp67 ___527_i $tmp66 	%argrw{"wrr"}
	neq		$tmp68 $tmp67 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:167
#     p *= lacunarity;
	mul		___526_p ___526_p lacunarity 	%line{167} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:168
#     weight = clamp(signal * gain, 0.0, 1.0);
	mul		$tmp69 ___526_signal Gain 	%line{168} %argrw{"wrr"}
	functioncall	$const4 189 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp70 $tmp69 $const8 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___526_weight $tmp70 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:169
#     signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 196 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{169} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___526_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp73 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp73 195 195 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp72 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp72 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:169
#     signal = offset - fabs(safe_snoise(p));
	fabs		$tmp71 $tmp72 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{169} %argrw{"wr"}
	sub		___526_signal Offset $tmp71 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:170
#     signal *= signal;
	mul		___526_signal ___526_signal ___526_signal 	%line{170} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:171
#     signal *= weight;
	mul		___526_signal ___526_signal ___526_weight 	%line{171} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:172
#     value += signal * pwr;
	mul		$tmp74 ___526_signal ___526_pwr 	%line{172} %argrw{"wrr"}
	add		___526_value ___526_value $tmp74 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:173
#     pwr *= pwHL;
	mul		___526_pwr ___526_pwr ___526_pwHL 	%line{173} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:166
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp75 ___527_i 	%line{166} %argrw{"wr"}
	add		___527_i ___527_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:176
#   return value;
	assign		Fac ___526_value 	%line{176} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:723
#     else if (musgrave_type == "hetero_terrain") {
	eq		$tmp76 musgrave_type $const20 	%line{723} %argrw{"wrr"}
	if		$tmp76 259 260 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:724
#       Fac = noise_musgrave_hetero_terrain_1d(p, dimension, lacunarity, octaves, Offset);
	functioncall	$const21 259 	%line{724} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:80
#   float p = co;
	assign		___516_p ___592_p 	%line{80} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:81
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp77 dimension 	%line{81} %argrw{"wr"}
	pow		___516_pwHL lacunarity $tmp77 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:82
#   float pwr = pwHL;
	assign		___516_pwr ___516_pwHL 	%line{82} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:85
#   float value = offset + safe_snoise(p);
	functioncall	$const10 220 	%line{85} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___516_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp79 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp79 219 219 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp78 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp78 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:85
#   float value = offset + safe_snoise(p);
	add		___516_value Offset $tmp78 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{85} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:86
#   p *= lacunarity;
	mul		___516_p ___516_p lacunarity 	%line{86} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:88
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp82 224 227 240 242 	%line{88} %argrw{"r"}
	assign		___517_i $const12 	%argrw{"wr"}
	assign		$tmp80 octaves 	%argrw{"wr"}
	lt		$tmp81 ___517_i $tmp80 	%argrw{"wrr"}
	neq		$tmp82 $tmp81 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:89
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 234 	%line{89} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___516_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp84 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp84 233 233 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp83 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp83 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:89
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp85 $tmp83 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{89} %argrw{"wrr"}
	mul		$tmp86 $tmp85 ___516_pwr 	%argrw{"wrr"}
	mul		___518_increment $tmp86 ___516_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:90
#     value += increment;
	add		___516_value ___516_value ___518_increment 	%line{90} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:91
#     pwr *= pwHL;
	mul		___516_pwr ___516_pwr ___516_pwHL 	%line{91} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:92
#     p *= lacunarity;
	mul		___516_p ___516_p lacunarity 	%line{92} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:88
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp87 ___517_i 	%line{88} %argrw{"wr"}
	add		___517_i ___517_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:95
#   float rmd = octaves - floor(octaves);
	floor		$tmp88 octaves 	%line{95} %argrw{"wr"}
	sub		___516_rmd octaves $tmp88 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:96
#   if (rmd != 0.0) {
	neq		$tmp89 ___516_rmd $const2 	%line{96} %argrw{"wrr"}
	if		$tmp89 258 258 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:97
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 253 	%line{97} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:43
#   float f = noise("snoise", p);
	noise		___446_f $const11 ___516_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{43} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:44
#   if (isinf(f))
	isinf		$tmp91 ___446_f 	%line{44} %argrw{"wr"}
	if		$tmp91 252 252 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:45
#     return 0.0;
	assign		$tmp90 $const2 	%line{45} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:46
#   return f;
	assign		$tmp90 ___446_f 	%line{46} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:97
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp92 $tmp90 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{97} %argrw{"wrr"}
	mul		$tmp93 $tmp92 ___516_pwr 	%argrw{"wrr"}
	mul		___519_increment $tmp93 ___516_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:98
#     value += rmd * increment;
	mul		$tmp94 ___516_rmd ___519_increment 	%line{98} %argrw{"wrr"}
	add		___516_value ___516_value $tmp94 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:101
#   return value;
	assign		Fac ___516_value 	%line{101} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:727
#       Fac = 0.0;
	assign		Fac $const2 	%line{727} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:730
#   else if (dimensions == "2D") {
	eq		$tmp95 dimensions $const22 	%line{730} %argrw{"wrr"}
	if		$tmp95 553 1149 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:731
#     vector2 p = vector2(s[0], s[1]) * Scale;
	compref		$tmp96.x s $const9 	%line{731} %argrw{"wrr"}
	compref		$tmp96.y s $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 270 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp97.x Scale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp97.y Scale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 270 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___599_p.x $tmp96.x $tmp97.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___599_p.y $tmp96.y $tmp97.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:732
#     if (musgrave_type == "multifractal") {
	eq		$tmp98 musgrave_type $const6 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{732} %argrw{"wrr"}
	if		$tmp98 319 553 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:733
#       Fac = noise_musgrave_multi_fractal_2d(p, dimension, lacunarity, octaves);
	functioncall	$const24 319 	%line{733} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:218
#   vector2 p = co;
	assign		___533_p.x ___599_p.x 	%line{218} %argrw{"wr"}
	assign		___533_p.y ___599_p.y 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:219
#   float value = 1.0;
	assign		___533_value $const8 	%line{219} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:220
#   float pwr = 1.0;
	assign		___533_pwr $const8 	%line{220} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:221
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp99 dimension 	%line{221} %argrw{"wr"}
	pow		___533_pwHL lacunarity $tmp99 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:223
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp102 281 284 301 303 	%line{223} %argrw{"r"}
	assign		___534_i $const9 	%argrw{"wr"}
	assign		$tmp100 octaves 	%argrw{"wr"}
	lt		$tmp101 ___534_i $tmp100 	%argrw{"wrr"}
	neq		$tmp102 $tmp101 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:224
#     value *= (pwr * safe_snoise(p) + 1.0);
	functioncall	$const10 291 	%line{224} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___533_p.x ___533_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp104 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp104 290 290 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp103 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp103 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:224
#     value *= (pwr * safe_snoise(p) + 1.0);
	mul		$tmp105 ___533_pwr $tmp103 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{224} %argrw{"wrr"}
	add		$tmp106 $tmp105 $const8 	%argrw{"wrr"}
	mul		___533_value ___533_value $tmp106 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:225
#     pwr *= pwHL;
	mul		___533_pwr ___533_pwr ___533_pwHL 	%line{225} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 301 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp107.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp107.y lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 301 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___533_p.x ___533_p.x $tmp107.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___533_p.y ___533_p.y $tmp107.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:223
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp108 ___534_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{223} %argrw{"wr"}
	add		___534_i ___534_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:229
#   float rmd = octaves - floor(octaves);
	floor		$tmp109 octaves 	%line{229} %argrw{"wr"}
	sub		___533_rmd octaves $tmp109 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:230
#   if (rmd != 0.0) {
	neq		$tmp110 ___533_rmd $const2 	%line{230} %argrw{"wrr"}
	if		$tmp110 318 318 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:231
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp111 ___533_rmd ___533_pwr 	%line{231} %argrw{"wrr"}
	functioncall	$const10 315 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___533_p.x ___533_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp113 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp113 314 314 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp112 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp112 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:231
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp114 $tmp111 $tmp112 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{231} %argrw{"wrr"}
	add		$tmp115 $tmp114 $const8 	%argrw{"wrr"}
	mul		___533_value ___533_value $tmp115 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:234
#   return value;
	assign		Fac ___533_value 	%line{234} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:735
#     else if (musgrave_type == "fBM") {
	eq		$tmp116 musgrave_type $const13 	%line{735} %argrw{"wrr"}
	if		$tmp116 366 553 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:736
#       Fac = noise_musgrave_fBm_2d(p, dimension, lacunarity, octaves);
	functioncall	$const25 366 	%line{736} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:190
#   vector2 p = co;
	assign		___529_p.x ___599_p.x 	%line{190} %argrw{"wr"}
	assign		___529_p.y ___599_p.y 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:191
#   float value = 0.0;
	assign		___529_value $const2 	%line{191} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:192
#   float pwr = 1.0;
	assign		___529_pwr $const8 	%line{192} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:193
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp117 dimension 	%line{193} %argrw{"wr"}
	pow		___529_pwHL lacunarity $tmp117 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:195
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp120 330 333 349 351 	%line{195} %argrw{"r"}
	assign		___530_i $const9 	%argrw{"wr"}
	assign		$tmp118 octaves 	%argrw{"wr"}
	lt		$tmp119 ___530_i $tmp118 	%argrw{"wrr"}
	neq		$tmp120 $tmp119 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:196
#     value += safe_snoise(p) * pwr;
	functioncall	$const10 340 	%line{196} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___529_p.x ___529_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp122 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp122 339 339 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp121 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp121 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:196
#     value += safe_snoise(p) * pwr;
	mul		$tmp123 $tmp121 ___529_pwr 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{196} %argrw{"wrr"}
	add		___529_value ___529_value $tmp123 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:197
#     pwr *= pwHL;
	mul		___529_pwr ___529_pwr ___529_pwHL 	%line{197} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 349 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp124.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp124.y lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 349 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___529_p.x ___529_p.x $tmp124.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___529_p.y ___529_p.y $tmp124.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:195
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp125 ___530_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{195} %argrw{"wr"}
	add		___530_i ___530_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:201
#   float rmd = octaves - floor(octaves);
	floor		$tmp126 octaves 	%line{201} %argrw{"wr"}
	sub		___529_rmd octaves $tmp126 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:202
#   if (rmd != 0.0) {
	neq		$tmp127 ___529_rmd $const2 	%line{202} %argrw{"wrr"}
	if		$tmp127 365 365 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:203
#     value += rmd * safe_snoise(p) * pwr;
	functioncall	$const10 362 	%line{203} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___529_p.x ___529_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp129 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp129 361 361 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp128 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp128 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:203
#     value += rmd * safe_snoise(p) * pwr;
	mul		$tmp130 ___529_rmd $tmp128 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{203} %argrw{"wrr"}
	mul		$tmp131 $tmp130 ___529_pwr 	%argrw{"wrr"}
	add		___529_value ___529_value $tmp131 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:206
#   return value;
	assign		Fac ___529_value 	%line{206} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:738
#     else if (musgrave_type == "hybrid_multifractal") {
	eq		$tmp132 musgrave_type $const15 	%line{738} %argrw{"wrr"}
	if		$tmp132 436 553 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:739
#       Fac = noise_musgrave_hybrid_multi_fractal_2d(
	functioncall	$const26 436 	%line{739} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:283
#   vector2 p = co;
	assign		___541_p.x ___599_p.x 	%line{283} %argrw{"wr"}
	assign		___541_p.y ___599_p.y 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:284
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp133 dimension 	%line{284} %argrw{"wr"}
	pow		___541_pwHL lacunarity $tmp133 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:286
#   float pwr = 1.0;
	assign		___541_pwr $const8 	%line{286} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:287
#   float value = 0.0;
	assign		___541_value $const2 	%line{287} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:288
#   float weight = 1.0;
	assign		___541_weight $const8 	%line{288} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:290
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	for		$tmp139 378 386 409 411 	%line{290} %argrw{"r"}
	assign		___542_i $const9 	%argrw{"wr"}
	gt		$tmp134 ___541_weight $const17 	%argrw{"wrr"}
	neq		$tmp135 $tmp134 $const9 	%argrw{"wrr"}
	if		$tmp135 385 385 	%argrw{"r"}
	assign		$tmp136 octaves 	%argrw{"wr"}
	lt		$tmp137 ___542_i $tmp136 	%argrw{"wrr"}
	neq		$tmp138 $tmp137 $const9 	%argrw{"wrr"}
	assign		$tmp135 $tmp138 	%argrw{"wr"}
	neq		$tmp139 $tmp135 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:291
#     if (weight > 1.0) {
	gt		$tmp140 ___541_weight $const8 	%line{291} %argrw{"wrr"}
	if		$tmp140 389 389 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:292
#       weight = 1.0;
	assign		___541_weight $const8 	%line{292} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:295
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 396 	%line{295} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___541_p.x ___541_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp142 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp142 395 395 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp141 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp141 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:295
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp143 $tmp141 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{295} %argrw{"wrr"}
	mul		___543_signal $tmp143 ___541_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:296
#     pwr *= pwHL;
	mul		___541_pwr ___541_pwr ___541_pwHL 	%line{296} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:297
#     value += weight * signal;
	mul		$tmp144 ___541_weight ___543_signal 	%line{297} %argrw{"wrr"}
	add		___541_value ___541_value $tmp144 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:298
#     weight *= gain * signal;
	mul		$tmp145 Gain ___543_signal 	%line{298} %argrw{"wrr"}
	mul		___541_weight ___541_weight $tmp145 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 409 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp146.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp146.y lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 409 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___541_p.x ___541_p.x $tmp146.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___541_p.y ___541_p.y $tmp146.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:290
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	assign		$tmp147 ___542_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{290} %argrw{"wr"}
	add		___542_i ___542_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:302
#   float rmd = octaves - floor(octaves);
	floor		$tmp148 octaves 	%line{302} %argrw{"wr"}
	sub		___541_rmd octaves $tmp148 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:303
#   if ((rmd != 0.0) && (weight > 0.001)) {
	neq		$tmp149 ___541_rmd $const2 	%line{303} %argrw{"wrr"}
	neq		$tmp150 $tmp149 $const9 	%argrw{"wrr"}
	if		$tmp150 419 419 	%argrw{"r"}
	gt		$tmp151 ___541_weight $const17 	%argrw{"wrr"}
	neq		$tmp152 $tmp151 $const9 	%argrw{"wrr"}
	assign		$tmp150 $tmp152 	%argrw{"wr"}
	if		$tmp150 435 435 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:304
#     if (weight > 1.0) {
	gt		$tmp153 ___541_weight $const8 	%line{304} %argrw{"wrr"}
	if		$tmp153 423 423 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:305
#       weight = 1.0;
	assign		___541_weight $const8 	%line{305} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:307
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 430 	%line{307} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___541_p.x ___541_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp155 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp155 429 429 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp154 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp154 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:307
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp156 $tmp154 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{307} %argrw{"wrr"}
	mul		___545_signal $tmp156 ___541_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:308
#     value += rmd * weight * signal;
	mul		$tmp157 ___541_rmd ___541_weight 	%line{308} %argrw{"wrr"}
	mul		$tmp158 $tmp157 ___545_signal 	%argrw{"wrr"}
	add		___541_value ___541_value $tmp158 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:311
#   return value;
	assign		Fac ___541_value 	%line{311} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:742
#     else if (musgrave_type == "ridged_multifractal") {
	eq		$tmp159 musgrave_type $const18 	%line{742} %argrw{"wrr"}
	if		$tmp159 488 553 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:743
#       Fac = noise_musgrave_ridged_multi_fractal_2d(
	functioncall	$const27 488 	%line{743} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:325
#   vector2 p = co;
	assign		___547_p.x ___599_p.x 	%line{325} %argrw{"wr"}
	assign		___547_p.y ___599_p.y 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:326
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp160 dimension 	%line{326} %argrw{"wr"}
	pow		___547_pwHL lacunarity $tmp160 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:327
#   float pwr = pwHL;
	assign		___547_pwr ___547_pwHL 	%line{327} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:329
#   float signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 451 	%line{329} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___547_p.x ___547_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp163 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp163 450 450 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp162 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp162 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:329
#   float signal = offset - fabs(safe_snoise(p));
	fabs		$tmp161 $tmp162 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{329} %argrw{"wr"}
	sub		___547_signal Offset $tmp161 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:330
#   signal *= signal;
	mul		___547_signal ___547_signal ___547_signal 	%line{330} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:331
#   float value = signal;
	assign		___547_value ___547_signal 	%line{331} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:332
#   float weight = 1.0;
	assign		___547_weight $const8 	%line{332} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:334
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp166 458 461 485 487 	%line{334} %argrw{"r"}
	assign		___548_i $const12 	%argrw{"wr"}
	assign		$tmp164 octaves 	%argrw{"wr"}
	lt		$tmp165 ___548_i $tmp164 	%argrw{"wrr"}
	neq		$tmp166 $tmp165 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 467 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp167.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp167.y lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 467 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___547_p.x ___547_p.x $tmp167.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___547_p.y ___547_p.y $tmp167.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:336
#     weight = clamp(signal * gain, 0.0, 1.0);
	mul		$tmp168 ___547_signal Gain 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{336} %argrw{"wrr"}
	functioncall	$const4 471 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp169 $tmp168 $const8 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___547_weight $tmp169 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:337
#     signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 478 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{337} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___547_p.x ___547_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp172 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp172 477 477 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp171 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp171 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:337
#     signal = offset - fabs(safe_snoise(p));
	fabs		$tmp170 $tmp171 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{337} %argrw{"wr"}
	sub		___547_signal Offset $tmp170 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:338
#     signal *= signal;
	mul		___547_signal ___547_signal ___547_signal 	%line{338} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:339
#     signal *= weight;
	mul		___547_signal ___547_signal ___547_weight 	%line{339} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:340
#     value += signal * pwr;
	mul		$tmp173 ___547_signal ___547_pwr 	%line{340} %argrw{"wrr"}
	add		___547_value ___547_value $tmp173 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:341
#     pwr *= pwHL;
	mul		___547_pwr ___547_pwr ___547_pwHL 	%line{341} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:334
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp174 ___548_i 	%line{334} %argrw{"wr"}
	add		___548_i ___548_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:344
#   return value;
	assign		Fac ___547_value 	%line{344} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:746
#     else if (musgrave_type == "hetero_terrain") {
	eq		$tmp175 musgrave_type $const20 	%line{746} %argrw{"wrr"}
	if		$tmp175 552 553 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:747
#       Fac = noise_musgrave_hetero_terrain_2d(p, dimension, lacunarity, octaves, Offset);
	functioncall	$const28 552 	%line{747} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:248
#   vector2 p = co;
	assign		___537_p.x ___599_p.x 	%line{248} %argrw{"wr"}
	assign		___537_p.y ___599_p.y 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:249
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp176 dimension 	%line{249} %argrw{"wr"}
	pow		___537_pwHL lacunarity $tmp176 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:250
#   float pwr = pwHL;
	assign		___537_pwr ___537_pwHL 	%line{250} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:253
#   float value = offset + safe_snoise(p);
	functioncall	$const10 503 	%line{253} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___537_p.x ___537_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp178 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp178 502 502 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp177 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp177 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:253
#   float value = offset + safe_snoise(p);
	add		___537_value Offset $tmp177 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{253} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 510 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp179.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp179.y lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 510 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___537_p.x ___537_p.x $tmp179.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___537_p.y ___537_p.y $tmp179.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:256
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp182 512 515 533 535 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{256} %argrw{"r"}
	assign		___538_i $const12 	%argrw{"wr"}
	assign		$tmp180 octaves 	%argrw{"wr"}
	lt		$tmp181 ___538_i $tmp180 	%argrw{"wrr"}
	neq		$tmp182 $tmp181 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:257
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 522 	%line{257} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___537_p.x ___537_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp184 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp184 521 521 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp183 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp183 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:257
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp185 $tmp183 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{257} %argrw{"wrr"}
	mul		$tmp186 $tmp185 ___537_pwr 	%argrw{"wrr"}
	mul		___539_increment $tmp186 ___537_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:258
#     value += increment;
	add		___537_value ___537_value ___539_increment 	%line{258} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:259
#     pwr *= pwHL;
	mul		___537_pwr ___537_pwr ___537_pwHL 	%line{259} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 533 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp187.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp187.y lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 533 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___537_p.x ___537_p.x $tmp187.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector2.h"} %line{78} %argrw{"wrr"}
	mul		___537_p.y ___537_p.y $tmp187.y 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:256
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp188 ___538_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{256} %argrw{"wr"}
	add		___538_i ___538_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:263
#   float rmd = octaves - floor(octaves);
	floor		$tmp189 octaves 	%line{263} %argrw{"wr"}
	sub		___537_rmd octaves $tmp189 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:264
#   if (rmd != 0.0) {
	neq		$tmp190 ___537_rmd $const2 	%line{264} %argrw{"wrr"}
	if		$tmp190 551 551 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:265
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 546 	%line{265} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:51
#   float f = noise("snoise", p.x, p.y);
	noise		___447_f $const11 ___537_p.x ___537_p.y 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{51} %argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:52
#   if (isinf(f))
	isinf		$tmp192 ___447_f 	%line{52} %argrw{"wr"}
	if		$tmp192 545 545 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:53
#     return 0.0;
	assign		$tmp191 $const2 	%line{53} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:54
#   return f;
	assign		$tmp191 ___447_f 	%line{54} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:265
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp193 $tmp191 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{265} %argrw{"wrr"}
	mul		$tmp194 $tmp193 ___537_pwr 	%argrw{"wrr"}
	mul		___540_increment $tmp194 ___537_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:266
#     value += rmd * increment;
	mul		$tmp195 ___537_rmd ___540_increment 	%line{266} %argrw{"wrr"}
	add		___537_value ___537_value $tmp195 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:269
#   return value;
	assign		Fac ___537_value 	%line{269} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:750
#       Fac = 0.0;
	assign		Fac $const2 	%line{750} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:753
#   else if (dimensions == "3D") {
	eq		$tmp196 dimensions $const29 	%line{753} %argrw{"wrr"}
	if		$tmp196 804 1149 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:754
#     vector3 p = s * Scale;
	mul		___606_p s Scale 	%line{754} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:755
#     if (musgrave_type == "multifractal") {
	eq		$tmp197 musgrave_type $const6 	%line{755} %argrw{"wrr"}
	if		$tmp197 599 804 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:756
#       Fac = noise_musgrave_multi_fractal_3d(p, dimension, lacunarity, octaves);
	functioncall	$const30 599 	%line{756} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:386
#   vector3 p = co;
	assign		___554_p ___606_p 	%line{386} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:387
#   float value = 1.0;
	assign		___554_value $const8 	%line{387} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:388
#   float pwr = 1.0;
	assign		___554_pwr $const8 	%line{388} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:389
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp198 dimension 	%line{389} %argrw{"wr"}
	pow		___554_pwHL lacunarity $tmp198 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:391
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp201 566 569 581 583 	%line{391} %argrw{"r"}
	assign		___555_i $const9 	%argrw{"wr"}
	assign		$tmp199 octaves 	%argrw{"wr"}
	lt		$tmp200 ___555_i $tmp199 	%argrw{"wrr"}
	neq		$tmp201 $tmp200 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:392
#     value *= (pwr * safe_snoise(p) + 1.0);
	functioncall	$const10 576 	%line{392} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___554_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp203 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp203 575 575 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp202 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp202 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:392
#     value *= (pwr * safe_snoise(p) + 1.0);
	mul		$tmp204 ___554_pwr $tmp202 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{392} %argrw{"wrr"}
	add		$tmp205 $tmp204 $const8 	%argrw{"wrr"}
	mul		___554_value ___554_value $tmp205 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:393
#     pwr *= pwHL;
	mul		___554_pwr ___554_pwr ___554_pwHL 	%line{393} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:394
#     p *= lacunarity;
	mul		___554_p ___554_p lacunarity 	%line{394} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:391
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp206 ___555_i 	%line{391} %argrw{"wr"}
	add		___555_i ___555_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:397
#   float rmd = octaves - floor(octaves);
	floor		$tmp207 octaves 	%line{397} %argrw{"wr"}
	sub		___554_rmd octaves $tmp207 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:398
#   if (rmd != 0.0) {
	neq		$tmp208 ___554_rmd $const2 	%line{398} %argrw{"wrr"}
	if		$tmp208 598 598 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:399
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp209 ___554_rmd ___554_pwr 	%line{399} %argrw{"wrr"}
	functioncall	$const10 595 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___554_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp211 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp211 594 594 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp210 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp210 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:399
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp212 $tmp209 $tmp210 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{399} %argrw{"wrr"}
	add		$tmp213 $tmp212 $const8 	%argrw{"wrr"}
	mul		___554_value ___554_value $tmp213 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:402
#   return value;
	assign		Fac ___554_value 	%line{402} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:758
#     else if (musgrave_type == "fBM") {
	eq		$tmp214 musgrave_type $const13 	%line{758} %argrw{"wrr"}
	if		$tmp214 640 804 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:759
#       Fac = noise_musgrave_fBm_3d(p, dimension, lacunarity, octaves);
	functioncall	$const31 640 	%line{759} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:358
#   vector3 p = co;
	assign		___550_p ___606_p 	%line{358} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:359
#   float value = 0.0;
	assign		___550_value $const2 	%line{359} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:360
#   float pwr = 1.0;
	assign		___550_pwr $const8 	%line{360} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:361
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp215 dimension 	%line{361} %argrw{"wr"}
	pow		___550_pwHL lacunarity $tmp215 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:363
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp218 609 612 623 625 	%line{363} %argrw{"r"}
	assign		___551_i $const9 	%argrw{"wr"}
	assign		$tmp216 octaves 	%argrw{"wr"}
	lt		$tmp217 ___551_i $tmp216 	%argrw{"wrr"}
	neq		$tmp218 $tmp217 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:364
#     value += safe_snoise(p) * pwr;
	functioncall	$const10 619 	%line{364} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___550_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp220 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp220 618 618 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp219 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp219 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:364
#     value += safe_snoise(p) * pwr;
	mul		$tmp221 $tmp219 ___550_pwr 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{364} %argrw{"wrr"}
	add		___550_value ___550_value $tmp221 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:365
#     pwr *= pwHL;
	mul		___550_pwr ___550_pwr ___550_pwHL 	%line{365} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:366
#     p *= lacunarity;
	mul		___550_p ___550_p lacunarity 	%line{366} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:363
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp222 ___551_i 	%line{363} %argrw{"wr"}
	add		___551_i ___551_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:369
#   float rmd = octaves - floor(octaves);
	floor		$tmp223 octaves 	%line{369} %argrw{"wr"}
	sub		___550_rmd octaves $tmp223 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:370
#   if (rmd != 0.0) {
	neq		$tmp224 ___550_rmd $const2 	%line{370} %argrw{"wrr"}
	if		$tmp224 639 639 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:371
#     value += rmd * safe_snoise(p) * pwr;
	functioncall	$const10 636 	%line{371} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___550_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp226 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp226 635 635 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp225 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp225 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:371
#     value += rmd * safe_snoise(p) * pwr;
	mul		$tmp227 ___550_rmd $tmp225 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{371} %argrw{"wrr"}
	mul		$tmp228 $tmp227 ___550_pwr 	%argrw{"wrr"}
	add		___550_value ___550_value $tmp228 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:374
#   return value;
	assign		Fac ___550_value 	%line{374} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:761
#     else if (musgrave_type == "hybrid_multifractal") {
	eq		$tmp229 musgrave_type $const15 	%line{761} %argrw{"wrr"}
	if		$tmp229 704 804 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:762
#       Fac = noise_musgrave_hybrid_multi_fractal_3d(
	functioncall	$const32 704 	%line{762} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:451
#   vector3 p = co;
	assign		___562_p ___606_p 	%line{451} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:452
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp230 dimension 	%line{452} %argrw{"wr"}
	pow		___562_pwHL lacunarity $tmp230 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:454
#   float pwr = 1.0;
	assign		___562_pwr $const8 	%line{454} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:455
#   float value = 0.0;
	assign		___562_value $const2 	%line{455} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:456
#   float weight = 1.0;
	assign		___562_weight $const8 	%line{456} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:458
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	for		$tmp236 651 659 677 679 	%line{458} %argrw{"r"}
	assign		___563_i $const9 	%argrw{"wr"}
	gt		$tmp231 ___562_weight $const17 	%argrw{"wrr"}
	neq		$tmp232 $tmp231 $const9 	%argrw{"wrr"}
	if		$tmp232 658 658 	%argrw{"r"}
	assign		$tmp233 octaves 	%argrw{"wr"}
	lt		$tmp234 ___563_i $tmp233 	%argrw{"wrr"}
	neq		$tmp235 $tmp234 $const9 	%argrw{"wrr"}
	assign		$tmp232 $tmp235 	%argrw{"wr"}
	neq		$tmp236 $tmp232 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:459
#     if (weight > 1.0) {
	gt		$tmp237 ___562_weight $const8 	%line{459} %argrw{"wrr"}
	if		$tmp237 662 662 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:460
#       weight = 1.0;
	assign		___562_weight $const8 	%line{460} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:463
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 669 	%line{463} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___562_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp239 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp239 668 668 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp238 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp238 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:463
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp240 $tmp238 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{463} %argrw{"wrr"}
	mul		___564_signal $tmp240 ___562_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:464
#     pwr *= pwHL;
	mul		___562_pwr ___562_pwr ___562_pwHL 	%line{464} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:465
#     value += weight * signal;
	mul		$tmp241 ___562_weight ___564_signal 	%line{465} %argrw{"wrr"}
	add		___562_value ___562_value $tmp241 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:466
#     weight *= gain * signal;
	mul		$tmp242 Gain ___564_signal 	%line{466} %argrw{"wrr"}
	mul		___562_weight ___562_weight $tmp242 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:467
#     p *= lacunarity;
	mul		___562_p ___562_p lacunarity 	%line{467} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:458
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	assign		$tmp243 ___563_i 	%line{458} %argrw{"wr"}
	add		___563_i ___563_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:470
#   float rmd = octaves - floor(octaves);
	floor		$tmp244 octaves 	%line{470} %argrw{"wr"}
	sub		___562_rmd octaves $tmp244 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:471
#   if ((rmd != 0.0) && (weight > 0.001)) {
	neq		$tmp245 ___562_rmd $const2 	%line{471} %argrw{"wrr"}
	neq		$tmp246 $tmp245 $const9 	%argrw{"wrr"}
	if		$tmp246 687 687 	%argrw{"r"}
	gt		$tmp247 ___562_weight $const17 	%argrw{"wrr"}
	neq		$tmp248 $tmp247 $const9 	%argrw{"wrr"}
	assign		$tmp246 $tmp248 	%argrw{"wr"}
	if		$tmp246 703 703 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:472
#     if (weight > 1.0) {
	gt		$tmp249 ___562_weight $const8 	%line{472} %argrw{"wrr"}
	if		$tmp249 691 691 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:473
#       weight = 1.0;
	assign		___562_weight $const8 	%line{473} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:475
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 698 	%line{475} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___562_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp251 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp251 697 697 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp250 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp250 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:475
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp252 $tmp250 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{475} %argrw{"wrr"}
	mul		___566_signal $tmp252 ___562_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:476
#     value += rmd * weight * signal;
	mul		$tmp253 ___562_rmd ___562_weight 	%line{476} %argrw{"wrr"}
	mul		$tmp254 $tmp253 ___566_signal 	%argrw{"wrr"}
	add		___562_value ___562_value $tmp254 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:479
#   return value;
	assign		Fac ___562_value 	%line{479} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:765
#     else if (musgrave_type == "ridged_multifractal") {
	eq		$tmp255 musgrave_type $const18 	%line{765} %argrw{"wrr"}
	if		$tmp255 750 804 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:766
#       Fac = noise_musgrave_ridged_multi_fractal_3d(
	functioncall	$const33 750 	%line{766} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:493
#   vector3 p = co;
	assign		___568_p ___606_p 	%line{493} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:494
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp256 dimension 	%line{494} %argrw{"wr"}
	pow		___568_pwHL lacunarity $tmp256 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:495
#   float pwr = pwHL;
	assign		___568_pwr ___568_pwHL 	%line{495} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:497
#   float signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 718 	%line{497} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___568_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp259 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp259 717 717 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp258 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp258 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:497
#   float signal = offset - fabs(safe_snoise(p));
	fabs		$tmp257 $tmp258 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{497} %argrw{"wr"}
	sub		___568_signal Offset $tmp257 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:498
#   signal *= signal;
	mul		___568_signal ___568_signal ___568_signal 	%line{498} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:499
#   float value = signal;
	assign		___568_value ___568_signal 	%line{499} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:500
#   float weight = 1.0;
	assign		___568_weight $const8 	%line{500} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:502
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp262 725 728 747 749 	%line{502} %argrw{"r"}
	assign		___569_i $const12 	%argrw{"wr"}
	assign		$tmp260 octaves 	%argrw{"wr"}
	lt		$tmp261 ___569_i $tmp260 	%argrw{"wrr"}
	neq		$tmp262 $tmp261 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:503
#     p *= lacunarity;
	mul		___568_p ___568_p lacunarity 	%line{503} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:504
#     weight = clamp(signal * gain, 0.0, 1.0);
	mul		$tmp263 ___568_signal Gain 	%line{504} %argrw{"wrr"}
	functioncall	$const4 733 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp264 $tmp263 $const8 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___568_weight $tmp264 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:505
#     signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 740 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{505} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___568_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp267 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp267 739 739 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp266 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp266 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:505
#     signal = offset - fabs(safe_snoise(p));
	fabs		$tmp265 $tmp266 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{505} %argrw{"wr"}
	sub		___568_signal Offset $tmp265 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:506
#     signal *= signal;
	mul		___568_signal ___568_signal ___568_signal 	%line{506} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:507
#     signal *= weight;
	mul		___568_signal ___568_signal ___568_weight 	%line{507} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:508
#     value += signal * pwr;
	mul		$tmp268 ___568_signal ___568_pwr 	%line{508} %argrw{"wrr"}
	add		___568_value ___568_value $tmp268 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:509
#     pwr *= pwHL;
	mul		___568_pwr ___568_pwr ___568_pwHL 	%line{509} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:502
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp269 ___569_i 	%line{502} %argrw{"wr"}
	add		___569_i ___569_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:512
#   return value;
	assign		Fac ___568_value 	%line{512} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:769
#     else if (musgrave_type == "hetero_terrain") {
	eq		$tmp270 musgrave_type $const20 	%line{769} %argrw{"wrr"}
	if		$tmp270 803 804 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:770
#       Fac = noise_musgrave_hetero_terrain_3d(p, dimension, lacunarity, octaves, Offset);
	functioncall	$const34 803 	%line{770} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:416
#   vector3 p = co;
	assign		___558_p ___606_p 	%line{416} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:417
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp271 dimension 	%line{417} %argrw{"wr"}
	pow		___558_pwHL lacunarity $tmp271 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:418
#   float pwr = pwHL;
	assign		___558_pwr ___558_pwHL 	%line{418} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:421
#   float value = offset + safe_snoise(p);
	functioncall	$const10 764 	%line{421} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___558_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp273 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp273 763 763 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp272 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp272 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:421
#   float value = offset + safe_snoise(p);
	add		___558_value Offset $tmp272 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{421} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:422
#   p *= lacunarity;
	mul		___558_p ___558_p lacunarity 	%line{422} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:424
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp276 768 771 784 786 	%line{424} %argrw{"r"}
	assign		___559_i $const12 	%argrw{"wr"}
	assign		$tmp274 octaves 	%argrw{"wr"}
	lt		$tmp275 ___559_i $tmp274 	%argrw{"wrr"}
	neq		$tmp276 $tmp275 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:425
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 778 	%line{425} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___558_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp278 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp278 777 777 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp277 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp277 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:425
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp279 $tmp277 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{425} %argrw{"wrr"}
	mul		$tmp280 $tmp279 ___558_pwr 	%argrw{"wrr"}
	mul		___560_increment $tmp280 ___558_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:426
#     value += increment;
	add		___558_value ___558_value ___560_increment 	%line{426} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:427
#     pwr *= pwHL;
	mul		___558_pwr ___558_pwr ___558_pwHL 	%line{427} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:428
#     p *= lacunarity;
	mul		___558_p ___558_p lacunarity 	%line{428} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:424
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp281 ___559_i 	%line{424} %argrw{"wr"}
	add		___559_i ___559_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:431
#   float rmd = octaves - floor(octaves);
	floor		$tmp282 octaves 	%line{431} %argrw{"wr"}
	sub		___558_rmd octaves $tmp282 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:432
#   if (rmd != 0.0) {
	neq		$tmp283 ___558_rmd $const2 	%line{432} %argrw{"wrr"}
	if		$tmp283 802 802 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:433
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 797 	%line{433} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:59
#   float f = noise("snoise", p);
	noise		___448_f $const11 ___558_p 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{59} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:60
#   if (isinf(f))
	isinf		$tmp285 ___448_f 	%line{60} %argrw{"wr"}
	if		$tmp285 796 796 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:61
#     return 0.0;
	assign		$tmp284 $const2 	%line{61} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:62
#   return f;
	assign		$tmp284 ___448_f 	%line{62} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:433
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp286 $tmp284 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{433} %argrw{"wrr"}
	mul		$tmp287 $tmp286 ___558_pwr 	%argrw{"wrr"}
	mul		___561_increment $tmp287 ___558_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:434
#     value += rmd * increment;
	mul		$tmp288 ___558_rmd ___561_increment 	%line{434} %argrw{"wrr"}
	add		___558_value ___558_value $tmp288 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:437
#   return value;
	assign		Fac ___558_value 	%line{437} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:773
#       Fac = 0.0;
	assign		Fac $const2 	%line{773} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:776
#   else if (dimensions == "4D") {
	eq		$tmp289 dimensions $const35 	%line{776} %argrw{"wrr"}
	if		$tmp289 1148 1149 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:777
#     vector4 p = vector4(s[0], s[1], s[2], W) * Scale;
	compref		$tmp290.x s $const9 	%line{777} %argrw{"wrr"}
	compref		$tmp290.y s $const12 	%argrw{"wrr"}
	compref		$tmp290.z s $const36 	%argrw{"wrr"}
	assign		$tmp290.w W 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 820 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp291.x Scale 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp291.y Scale 	%argrw{"wr"}
	assign		$tmp291.z Scale 	%argrw{"wr"}
	assign		$tmp291.w Scale 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 820 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___613_p.x $tmp290.x $tmp291.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___613_p.y $tmp290.y $tmp291.y 	%argrw{"wrr"}
	mul		___613_p.z $tmp290.z $tmp291.z 	%argrw{"wrr"}
	mul		___613_p.w $tmp290.w $tmp291.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:778
#     if (musgrave_type == "multifractal") {
	eq		$tmp292 musgrave_type $const6 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{778} %argrw{"wrr"}
	if		$tmp292 877 1148 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:779
#       Fac = noise_musgrave_multi_fractal_4d(p, dimension, lacunarity, octaves);
	functioncall	$const37 877 	%line{779} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:554
#   vector4 p = co;
	assign		___575_p.x ___613_p.x 	%line{554} %argrw{"wr"}
	assign		___575_p.y ___613_p.y 	%argrw{"wr"}
	assign		___575_p.z ___613_p.z 	%argrw{"wr"}
	assign		___575_p.w ___613_p.w 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:555
#   float value = 1.0;
	assign		___575_value $const8 	%line{555} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:556
#   float pwr = 1.0;
	assign		___575_pwr $const8 	%line{556} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:557
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp293 dimension 	%line{557} %argrw{"wr"}
	pow		___575_pwHL lacunarity $tmp293 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:559
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp296 833 836 858 860 	%line{559} %argrw{"r"}
	assign		___576_i $const9 	%argrw{"wr"}
	assign		$tmp294 octaves 	%argrw{"wr"}
	lt		$tmp295 ___576_i $tmp294 	%argrw{"wrr"}
	neq		$tmp296 $tmp295 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:560
#     value *= (pwr * safe_snoise(p) + 1.0);
	functioncall	$const10 844 	%line{560} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp298 ___575_p.x ___575_p.y ___575_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp298 ___575_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp299 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp299 843 843 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp297 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp297 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:560
#     value *= (pwr * safe_snoise(p) + 1.0);
	mul		$tmp300 ___575_pwr $tmp297 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{560} %argrw{"wrr"}
	add		$tmp301 $tmp300 $const8 	%argrw{"wrr"}
	mul		___575_value ___575_value $tmp301 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:561
#     pwr *= pwHL;
	mul		___575_pwr ___575_pwr ___575_pwHL 	%line{561} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 858 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp302.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp302.y lacunarity 	%argrw{"wr"}
	assign		$tmp302.z lacunarity 	%argrw{"wr"}
	assign		$tmp302.w lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 858 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___575_p.x ___575_p.x $tmp302.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___575_p.y ___575_p.y $tmp302.y 	%argrw{"wrr"}
	mul		___575_p.z ___575_p.z $tmp302.z 	%argrw{"wrr"}
	mul		___575_p.w ___575_p.w $tmp302.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:559
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp303 ___576_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{559} %argrw{"wr"}
	add		___576_i ___576_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:565
#   float rmd = octaves - floor(octaves);
	floor		$tmp304 octaves 	%line{565} %argrw{"wr"}
	sub		___575_rmd octaves $tmp304 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:566
#   if (rmd != 0.0) {
	neq		$tmp305 ___575_rmd $const2 	%line{566} %argrw{"wrr"}
	if		$tmp305 876 876 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:567
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp306 ___575_rmd ___575_pwr 	%line{567} %argrw{"wrr"}
	functioncall	$const10 873 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp308 ___575_p.x ___575_p.y ___575_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp308 ___575_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp309 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp309 872 872 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp307 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp307 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:567
#     value *= (rmd * pwr * safe_snoise(p) + 1.0); /* correct? */
	mul		$tmp310 $tmp306 $tmp307 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{567} %argrw{"wrr"}
	add		$tmp311 $tmp310 $const8 	%argrw{"wrr"}
	mul		___575_value ___575_value $tmp311 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:570
#   return value;
	assign		Fac ___575_value 	%line{570} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:781
#     else if (musgrave_type == "fBM") {
	eq		$tmp312 musgrave_type $const13 	%line{781} %argrw{"wrr"}
	if		$tmp312 932 1148 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:782
#       Fac = noise_musgrave_fBm_4d(p, dimension, lacunarity, octaves);
	functioncall	$const38 932 	%line{782} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:526
#   vector4 p = co;
	assign		___571_p.x ___613_p.x 	%line{526} %argrw{"wr"}
	assign		___571_p.y ___613_p.y 	%argrw{"wr"}
	assign		___571_p.z ___613_p.z 	%argrw{"wr"}
	assign		___571_p.w ___613_p.w 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:527
#   float value = 0.0;
	assign		___571_value $const2 	%line{527} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:528
#   float pwr = 1.0;
	assign		___571_pwr $const8 	%line{528} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:529
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp313 dimension 	%line{529} %argrw{"wr"}
	pow		___571_pwHL lacunarity $tmp313 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:531
#   for (int i = 0; i < (int)octaves; i++) {
	for		$tmp316 890 893 914 916 	%line{531} %argrw{"r"}
	assign		___572_i $const9 	%argrw{"wr"}
	assign		$tmp314 octaves 	%argrw{"wr"}
	lt		$tmp315 ___572_i $tmp314 	%argrw{"wrr"}
	neq		$tmp316 $tmp315 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:532
#     value += safe_snoise(p) * pwr;
	functioncall	$const10 901 	%line{532} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp318 ___571_p.x ___571_p.y ___571_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp318 ___571_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp319 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp319 900 900 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp317 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp317 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:532
#     value += safe_snoise(p) * pwr;
	mul		$tmp320 $tmp317 ___571_pwr 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{532} %argrw{"wrr"}
	add		___571_value ___571_value $tmp320 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:533
#     pwr *= pwHL;
	mul		___571_pwr ___571_pwr ___571_pwHL 	%line{533} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 914 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp321.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp321.y lacunarity 	%argrw{"wr"}
	assign		$tmp321.z lacunarity 	%argrw{"wr"}
	assign		$tmp321.w lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 914 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___571_p.x ___571_p.x $tmp321.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___571_p.y ___571_p.y $tmp321.y 	%argrw{"wrr"}
	mul		___571_p.z ___571_p.z $tmp321.z 	%argrw{"wrr"}
	mul		___571_p.w ___571_p.w $tmp321.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:531
#   for (int i = 0; i < (int)octaves; i++) {
	assign		$tmp322 ___572_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{531} %argrw{"wr"}
	add		___572_i ___572_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:537
#   float rmd = octaves - floor(octaves);
	floor		$tmp323 octaves 	%line{537} %argrw{"wr"}
	sub		___571_rmd octaves $tmp323 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:538
#   if (rmd != 0.0) {
	neq		$tmp324 ___571_rmd $const2 	%line{538} %argrw{"wrr"}
	if		$tmp324 931 931 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:539
#     value += rmd * safe_snoise(p) * pwr;
	functioncall	$const10 928 	%line{539} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp326 ___571_p.x ___571_p.y ___571_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp326 ___571_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp327 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp327 927 927 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp325 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp325 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:539
#     value += rmd * safe_snoise(p) * pwr;
	mul		$tmp328 ___571_rmd $tmp325 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{539} %argrw{"wrr"}
	mul		$tmp329 $tmp328 ___571_pwr 	%argrw{"wrr"}
	add		___571_value ___571_value $tmp329 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:542
#   return value;
	assign		Fac ___571_value 	%line{542} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:784
#     else if (musgrave_type == "hybrid_multifractal") {
	eq		$tmp330 musgrave_type $const15 	%line{784} %argrw{"wrr"}
	if		$tmp330 1010 1148 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:785
#       Fac = noise_musgrave_hybrid_multi_fractal_4d(
	functioncall	$const39 1010 	%line{785} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:619
#   vector4 p = co;
	assign		___583_p.x ___613_p.x 	%line{619} %argrw{"wr"}
	assign		___583_p.y ___613_p.y 	%argrw{"wr"}
	assign		___583_p.z ___613_p.z 	%argrw{"wr"}
	assign		___583_p.w ___613_p.w 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:620
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp331 dimension 	%line{620} %argrw{"wr"}
	pow		___583_pwHL lacunarity $tmp331 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:622
#   float pwr = 1.0;
	assign		___583_pwr $const8 	%line{622} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:623
#   float value = 0.0;
	assign		___583_value $const2 	%line{623} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:624
#   float weight = 1.0;
	assign		___583_weight $const8 	%line{624} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:626
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	for		$tmp337 946 954 982 984 	%line{626} %argrw{"r"}
	assign		___584_i $const9 	%argrw{"wr"}
	gt		$tmp332 ___583_weight $const17 	%argrw{"wrr"}
	neq		$tmp333 $tmp332 $const9 	%argrw{"wrr"}
	if		$tmp333 953 953 	%argrw{"r"}
	assign		$tmp334 octaves 	%argrw{"wr"}
	lt		$tmp335 ___584_i $tmp334 	%argrw{"wrr"}
	neq		$tmp336 $tmp335 $const9 	%argrw{"wrr"}
	assign		$tmp333 $tmp336 	%argrw{"wr"}
	neq		$tmp337 $tmp333 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:627
#     if (weight > 1.0) {
	gt		$tmp338 ___583_weight $const8 	%line{627} %argrw{"wrr"}
	if		$tmp338 957 957 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:628
#       weight = 1.0;
	assign		___583_weight $const8 	%line{628} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:631
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 965 	%line{631} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp340 ___583_p.x ___583_p.y ___583_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp340 ___583_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp341 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp341 964 964 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp339 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp339 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:631
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp342 $tmp339 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{631} %argrw{"wrr"}
	mul		___585_signal $tmp342 ___583_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:632
#     pwr *= pwHL;
	mul		___583_pwr ___583_pwr ___583_pwHL 	%line{632} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:633
#     value += weight * signal;
	mul		$tmp343 ___583_weight ___585_signal 	%line{633} %argrw{"wrr"}
	add		___583_value ___583_value $tmp343 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:634
#     weight *= gain * signal;
	mul		$tmp344 Gain ___585_signal 	%line{634} %argrw{"wrr"}
	mul		___583_weight ___583_weight $tmp344 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 982 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp345.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp345.y lacunarity 	%argrw{"wr"}
	assign		$tmp345.z lacunarity 	%argrw{"wr"}
	assign		$tmp345.w lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 982 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___583_p.x ___583_p.x $tmp345.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___583_p.y ___583_p.y $tmp345.y 	%argrw{"wrr"}
	mul		___583_p.z ___583_p.z $tmp345.z 	%argrw{"wrr"}
	mul		___583_p.w ___583_p.w $tmp345.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:626
#   for (int i = 0; (weight > 0.001) && (i < (int)octaves); i++) {
	assign		$tmp346 ___584_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{626} %argrw{"wr"}
	add		___584_i ___584_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:638
#   float rmd = octaves - floor(octaves);
	floor		$tmp347 octaves 	%line{638} %argrw{"wr"}
	sub		___583_rmd octaves $tmp347 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:639
#   if ((rmd != 0.0) && (weight > 0.001)) {
	neq		$tmp348 ___583_rmd $const2 	%line{639} %argrw{"wrr"}
	neq		$tmp349 $tmp348 $const9 	%argrw{"wrr"}
	if		$tmp349 992 992 	%argrw{"r"}
	gt		$tmp350 ___583_weight $const17 	%argrw{"wrr"}
	neq		$tmp351 $tmp350 $const9 	%argrw{"wrr"}
	assign		$tmp349 $tmp351 	%argrw{"wr"}
	if		$tmp349 1009 1009 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:640
#     if (weight > 1.0) {
	gt		$tmp352 ___583_weight $const8 	%line{640} %argrw{"wrr"}
	if		$tmp352 996 996 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:641
#       weight = 1.0;
	assign		___583_weight $const8 	%line{641} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:643
#     float signal = (safe_snoise(p) + offset) * pwr;
	functioncall	$const10 1004 	%line{643} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp354 ___583_p.x ___583_p.y ___583_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp354 ___583_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp355 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp355 1003 1003 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp353 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp353 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:643
#     float signal = (safe_snoise(p) + offset) * pwr;
	add		$tmp356 $tmp353 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{643} %argrw{"wrr"}
	mul		___587_signal $tmp356 ___583_pwr 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:644
#     value += rmd * weight * signal;
	mul		$tmp357 ___583_rmd ___583_weight 	%line{644} %argrw{"wrr"}
	mul		$tmp358 $tmp357 ___587_signal 	%argrw{"wrr"}
	add		___583_value ___583_value $tmp358 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:647
#   return value;
	assign		Fac ___583_value 	%line{647} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:788
#     else if (musgrave_type == "ridged_multifractal") {
	eq		$tmp359 musgrave_type $const18 	%line{788} %argrw{"wrr"}
	if		$tmp359 1070 1148 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:789
#       Fac = noise_musgrave_ridged_multi_fractal_4d(
	functioncall	$const40 1070 	%line{789} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:661
#   vector4 p = co;
	assign		___589_p.x ___613_p.x 	%line{661} %argrw{"wr"}
	assign		___589_p.y ___613_p.y 	%argrw{"wr"}
	assign		___589_p.z ___613_p.z 	%argrw{"wr"}
	assign		___589_p.w ___613_p.w 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:662
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp360 dimension 	%line{662} %argrw{"wr"}
	pow		___589_pwHL lacunarity $tmp360 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:663
#   float pwr = pwHL;
	assign		___589_pwr ___589_pwHL 	%line{663} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:665
#   float signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 1028 	%line{665} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp363 ___589_p.x ___589_p.y ___589_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp363 ___589_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp364 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp364 1027 1027 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp362 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp362 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:665
#   float signal = offset - fabs(safe_snoise(p));
	fabs		$tmp361 $tmp362 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{665} %argrw{"wr"}
	sub		___589_signal Offset $tmp361 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:666
#   signal *= signal;
	mul		___589_signal ___589_signal ___589_signal 	%line{666} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:667
#   float value = signal;
	assign		___589_value ___589_signal 	%line{667} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:668
#   float weight = 1.0;
	assign		___589_weight $const8 	%line{668} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:670
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp367 1035 1038 1067 1069 	%line{670} %argrw{"r"}
	assign		___590_i $const12 	%argrw{"wr"}
	assign		$tmp365 octaves 	%argrw{"wr"}
	lt		$tmp366 ___590_i $tmp365 	%argrw{"wrr"}
	neq		$tmp367 $tmp366 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 1048 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp368.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp368.y lacunarity 	%argrw{"wr"}
	assign		$tmp368.z lacunarity 	%argrw{"wr"}
	assign		$tmp368.w lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 1048 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___589_p.x ___589_p.x $tmp368.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___589_p.y ___589_p.y $tmp368.y 	%argrw{"wrr"}
	mul		___589_p.z ___589_p.z $tmp368.z 	%argrw{"wrr"}
	mul		___589_p.w ___589_p.w $tmp368.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:672
#     weight = clamp(signal * gain, 0.0, 1.0);
	mul		$tmp369 ___589_signal Gain 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{672} %argrw{"wrr"}
	functioncall	$const4 1052 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp370 $tmp369 $const8 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___589_weight $tmp370 $const2 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:673
#     signal = offset - fabs(safe_snoise(p));
	functioncall	$const10 1060 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{673} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp373 ___589_p.x ___589_p.y ___589_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp373 ___589_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp374 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp374 1059 1059 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp372 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp372 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:673
#     signal = offset - fabs(safe_snoise(p));
	fabs		$tmp371 $tmp372 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{673} %argrw{"wr"}
	sub		___589_signal Offset $tmp371 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:674
#     signal *= signal;
	mul		___589_signal ___589_signal ___589_signal 	%line{674} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:675
#     signal *= weight;
	mul		___589_signal ___589_signal ___589_weight 	%line{675} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:676
#     value += signal * pwr;
	mul		$tmp375 ___589_signal ___589_pwr 	%line{676} %argrw{"wrr"}
	add		___589_value ___589_value $tmp375 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:677
#     pwr *= pwHL;
	mul		___589_pwr ___589_pwr ___589_pwHL 	%line{677} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:670
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp376 ___590_i 	%line{670} %argrw{"wr"}
	add		___590_i ___590_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:680
#   return value;
	assign		Fac ___589_value 	%line{680} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:792
#     else if (musgrave_type == "hetero_terrain") {
	eq		$tmp377 musgrave_type $const20 	%line{792} %argrw{"wrr"}
	if		$tmp377 1147 1148 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:793
#       Fac = noise_musgrave_hetero_terrain_4d(p, dimension, lacunarity, octaves, Offset);
	functioncall	$const41 1147 	%line{793} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:584
#   vector4 p = co;
	assign		___579_p.x ___613_p.x 	%line{584} %argrw{"wr"}
	assign		___579_p.y ___613_p.y 	%argrw{"wr"}
	assign		___579_p.z ___613_p.z 	%argrw{"wr"}
	assign		___579_p.w ___613_p.w 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:585
#   float pwHL = pow(lacunarity, -H);
	neg		$tmp378 dimension 	%line{585} %argrw{"wr"}
	pow		___579_pwHL lacunarity $tmp378 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:586
#   float pwr = pwHL;
	assign		___579_pwr ___579_pwHL 	%line{586} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:589
#   float value = offset + safe_snoise(p);
	functioncall	$const10 1088 	%line{589} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp380 ___579_p.x ___579_p.y ___579_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp380 ___579_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp381 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp381 1087 1087 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp379 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp379 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:589
#   float value = offset + safe_snoise(p);
	add		___579_value Offset $tmp379 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{589} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 1099 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp382.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp382.y lacunarity 	%argrw{"wr"}
	assign		$tmp382.z lacunarity 	%argrw{"wr"}
	assign		$tmp382.w lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 1099 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___579_p.x ___579_p.x $tmp382.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___579_p.y ___579_p.y $tmp382.y 	%argrw{"wrr"}
	mul		___579_p.z ___579_p.z $tmp382.z 	%argrw{"wrr"}
	mul		___579_p.w ___579_p.w $tmp382.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:592
#   for (int i = 1; i < (int)octaves; i++) {
	for		$tmp385 1101 1104 1127 1129 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{592} %argrw{"r"}
	assign		___580_i $const12 	%argrw{"wr"}
	assign		$tmp383 octaves 	%argrw{"wr"}
	lt		$tmp384 ___580_i $tmp383 	%argrw{"wrr"}
	neq		$tmp385 $tmp384 $const9 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:593
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 1112 	%line{593} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp387 ___579_p.x ___579_p.y ___579_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp387 ___579_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp388 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp388 1111 1111 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp386 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp386 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:593
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp389 $tmp386 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{593} %argrw{"wrr"}
	mul		$tmp390 $tmp389 ___579_pwr 	%argrw{"wrr"}
	mul		___581_increment $tmp390 ___579_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:594
#     value += increment;
	add		___579_value ___579_value ___581_increment 	%line{594} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:595
#     pwr *= pwHL;
	mul		___579_pwr ___579_pwr ___579_pwHL 	%line{595} %argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 1127 	%line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp391.x lacunarity 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp391.y lacunarity 	%argrw{"wr"}
	assign		$tmp391.z lacunarity 	%argrw{"wr"}
	assign		$tmp391.w lacunarity 	%argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:803
# 
	functioncall	$const23 1127 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{803} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___579_p.x ___579_p.x $tmp391.x 	%filename{"F:/Repositories/blenderRepo/blender/../lib/win64_vc15/osl/share/OSL/shaders\\vector4.h"} %line{81} %argrw{"wrr"}
	mul		___579_p.y ___579_p.y $tmp391.y 	%argrw{"wrr"}
	mul		___579_p.z ___579_p.z $tmp391.z 	%argrw{"wrr"}
	mul		___579_p.w ___579_p.w $tmp391.w 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:592
#   for (int i = 1; i < (int)octaves; i++) {
	assign		$tmp392 ___580_i 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{592} %argrw{"wr"}
	add		___580_i ___580_i $const12 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:599
#   float rmd = octaves - floor(octaves);
	floor		$tmp393 octaves 	%line{599} %argrw{"wr"}
	sub		___579_rmd octaves $tmp393 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:600
#   if (rmd != 0.0) {
	neq		$tmp394 ___579_rmd $const2 	%line{600} %argrw{"wrr"}
	if		$tmp394 1146 1146 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:601
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	functioncall	$const10 1141 	%line{601} %argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:67
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp396 ___579_p.x ___579_p.y ___579_p.z 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h"} %line{67} %argrw{"wrrr"}
	noise		___449_f $const11 $tmp396 ___579_p.w 	%argrw{"wrrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:68
#   if (isinf(f))
	isinf		$tmp397 ___449_f 	%line{68} %argrw{"wr"}
	if		$tmp397 1140 1140 	%argrw{"r"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:69
#     return 0.0;
	assign		$tmp395 $const2 	%line{69} %argrw{"wr"}
	return
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders\\node_noise.h:70
#   return f;
	assign		$tmp395 ___449_f 	%line{70} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:601
#     float increment = (safe_snoise(p) + offset) * pwr * value;
	add		$tmp398 $tmp395 Offset 	%filename{"F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl"} %line{601} %argrw{"wrr"}
	mul		$tmp399 $tmp398 ___579_pwr 	%argrw{"wrr"}
	mul		___582_increment $tmp399 ___579_value 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:602
#     value += rmd * increment;
	mul		$tmp400 ___579_rmd ___582_increment 	%line{602} %argrw{"wrr"}
	add		___579_value ___579_value $tmp400 	%argrw{"wrr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:605
#   return value;
	assign		Fac ___579_value 	%line{605} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:796
#       Fac = 0.0;
	assign		Fac $const2 	%line{796} %argrw{"wr"}
# F:/Repositories/blenderRepo/blender/intern/cycles/kernel/osl/shaders/node_musgrave_texture.osl:800
#     Fac = 0.0;
	assign		Fac $const2 	%line{800} %argrw{"wr"}
	end
