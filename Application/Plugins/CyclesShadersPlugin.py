# CyclesShadersPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Tue May 10 21:07:43 UTC+0500 2016 by Shekn Itrch
#
# Tip: To add a command to this plug-in, right-click in the
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c

null = None
false = 0
true = 1

color_space_enum = [
    "Non-Color Data", "none",
    "Color", "color"
]

interpolation_enum = [
    "Smart", "Smart",
    "Cubic", "Cubic",
    "Closest", "Closest",
    "Linear", "Linear"
]

extension_enum = [
    "Clip", "Clip",
    "Extend", "Extend",
    "Repeat", "Repeat"
]

projection_enum = [
    "Flat", "flat",
    "Box", "box",
    "Sphere", "sphere",
    "Tube", "tube"
]

env_projection_enum = [
    "Equirectangular", "equirectangular",
    "Mirror Ball", "mirrorball"
]

sky_type_enum = [
    "Preetham", "preetham",
    "Hosek/Wilkil", "hosekwilkil",
    "Nishita", "nishita"
]

gradient_type_enum = [
    "Linear", "Linear",
    "Quadratic", "Quadratic",
    "Easing", "Easing",
    "Diagonal", "Diagonal",
    "Radial", "Radial",
    "Quadratic Sphere", "Quadratic Sphere",
    "Spherical", "Spherical"
]

wave_type_enum = [
    "Bands", "Bands",
    "Rings", "Rings"
]

wave_profile_enum = [
    "Sine", "Sine",
    "Saw", "Saw",
    "Triangle", "Triangle"
]

wave_bands_direction_enum = [
    "X", "x",
    "Y", "y",
    "Z", "z",
    "Diagonal", "diagonal"
]

wave_rings_direction_enum = [
    "X", "x",
    "Y", "y",
    "Z", "z",
    "Spherical", "spherical"
]

principled_distibution_enum = [
    "GGX", "GGX",
    "Multiscatter GGX", "Multiscatter GGX"
]

toon_component_enum = [
    "Diffuse", "Diffuse",
    "Glossy", "Glossy"
]

glossy_distribution_enum = [
    "Beckmann", "Beckmann",
    "GGX", "GGX",
    "Ashikhmin-Shirley", "Ashikhmin-Shirley",
    "Multiscatter GGX", "Multiscatter GGX"
]

glass_distribution_enum = [
    "Beckmann", "Beckmann",
    "GGX", "GGX",
    "Multiscatter GGX", "Multiscatter GGX"
]

refraction_distribution_enum = [
    "Beckmann", "Beckmann",
    "GGX", "GGX"
]

hair_component_enum = [
    "Reflection", "Reflection",
    "Transmission", "Transmission"
]

ss_closure_enum = [
    "Christensen-Burley", "Christensen-Burley",
    "Random Walk", "random_walk",
    "Random Walk (Skin)", "random_walk_fixed"
]

mix_type_enum = [
    "Mix", "Mix",
    "Add", "Add",
    "Multiply", "Multiply",
    "Screen", "Screen",
    "Overlay", "Overlay",
    "Subtract", "Subtract",
    "Divide", "Divide",
    "Difference", "Difference",
    "Darken", "Darken",
    "Lighten", "Lighten",
    "Dodge", "Dodge",
    "Burn", "Burn",
    "Hue", "Hue",
    "Saturation", "Saturation",
    "Value", "Value",
    "Color", "Color",
    "Soft Light", "Soft Light",
    "Linear Light", "Linear Light",
    "Exclusion", "Exclusion"
]

tangent_direction_enum = [
    "Radial", "Radial",
    "UV Map", "UV Map"
]

tangent_axis_enum = [
    "X", "X",
    "Y", "Y",
    "Z", "Z"
]

math_type_enum = [
    "Add", "add",
    "Subtract", "subtract",
    "Multiply", "multiply",
    "Divide", "divide",
    "Sine", "sine",
    "Cosine", "cosine",
    "Tangent", "tangent",
    "Arcsine", "arcsine",
    "Arccosine", "arccosine",
    "Arctangent", "arctangent",
    "Power", "power",
    "Logarithm", "logarithm",
    "Minimum", "minimum",
    "Maximum", "maximum",
    "Round", "round",
    "Less Than", "less_than",
    "Greater Than", "greater_than",
    "Modulo", "modulo",
    "Absolute", "absolute",
    "Arctan2", "arctan2",
    "Floor", "floor",
    "Ceil", "ceil",
    "Fraction", "fract",
    "Square Root", "sqrt",
    "Inverse Square Root", "inv_sqrt",
    "Sign", "sign",
    "Exponent", "exponent",
    "To Radians", "radians",
    "To Degrees", "degrees",
    "Hyperbolic Sine", "sinh",
    "Hyperbolic Cosine", "cosh",
    "Hyperbolic Tangent", "tanh",
    "Truncate", "trunc",
    "Snap", "snap",
    "Wrap", "wrap",
    "Compare", "compare",
    "Multiply Add", "multiply_add",
    "Ping-pong", "pingpong",
    "Smooth Minimum", "smooth_min",
    "Smooth Maximum", "smooth_max"
]

vector_math_type_enum = [
    "Add", "add",
    "Subtract", "subtract",
    "Multiply", "multiply",
    "Divide", "divide",
    "Multiply Add", "multiply_add",

    "Cross Product", "cross_product",
    "Project", "project",
    "Reflect", "reflect",
    "Dot Product", "dot_product",
    "Refract", "refract",
    "Faceforward", "faceforward",

    "Distance", "distance",
    "Length", "length",
    "Scale", "scale",
    "Normalize", "normalize",

    "Snap", "snap",
    "Floor", "floor",
    "Ceil", "ceil",
    "Modulo", "modulo",
    "Fraction", "fraction",
    "Absolute", "absolute",
    "Minimum", "minimum",
    "Maximum", "maximum",

    "Wrap", "wrap",
    "Sine", "sine",
    "Cosine", "cosine",
    "Tangent", "tangent"
]

vector_transform_type_enum = [
    "Vector", "Vector",
    "Point", "Point",
    "Normal", "Normal"
]

vector_transform_convert_enum = [
    "World", "World",
    "Object", "Object",
    "Camera", "Camera"
]

noraml_map_space_enum = [
    "Tangent Space", "Tangent",
    "Object Space", "Object",
    "World Space", "World"
]

mapping_type_enum = [
    "Texture", "Texture",
    "Point", "Point",
    "Vector", "Vector",
    "Normal", "Normal"
]

displacement_space_enum = [
    "Object Space", "object",
    "World Space", "world"
]

vector_displacement_space_enum = [
    "Object Space", "object",
    "World Space", "world",
    "Tangent Space", "tangent"
]

principled_sss_method_enum = [
    "Christensen-Burley", "burley",
    "Random Walk", "random_walk",
    "Random Walk (Skin)", "random_walk_fixed"
]

voronoi_metric_enum = [
    "Euclidean", "distance",
    "Manhattan", "manhattan",
    "Chebychev", "chebychev",
    "Minkowski", "minkowski"
    ]

voronoi_feature_enum = [
    "F1", "f1",
    "F2", "f2",
    "Smooth F1", "smooth_f1",
    "Distance To Edge", "distance_to_edge",
    "N-Sphere Radius", "n_sphere_radius"
    ]

principled_hair_model_enum = [
    "Chiang", "chiang",
    "Huang", "huang",
]

principled_hair_parametrization_enum = [
    "Direct coloring", "direct_coloring",
    "Melanin concentration", "melanin_concentration",
    "Absorption coefficient", "absorption_coefficient"
    ]

image_mode_enum = [
    "Single Image", "single_image",
    "Image Sequence", "image_sequence",
    "Tiled", "tiled"]

environment_image_mode_enum = [
    "Single Image", "single_image",
    "Image Sequence", "image_sequence"]

dimensions_type_enum = [
    "1D", "1d",
    "2D", "2d",
    "3D", "3d",
    "4D", "4d"]

maprange_interpolation_type = [
    "Linear", "linear",
    "Stepped Linear", "stepped",
    "Smooth Step", "smooth_step",
    "Smoother Step", "smoother_step"]

clamp_type = [
    "Min Max", "min_max",
    "Range", "range"]


vector_rotate_type = [
    "Axis Angle", "axis_angle",
    "X Axis", "x_axis",
    "Y Axis", "y_axis",
    "Z Axis", "z_axis",
    "Euler", "euler"
]

combine_color_mode_enum = [
    "RGB", "rgb",
    "HSV", "hsv",
    "HSL", "hsl"
]

sheen_distribution_enum = [
    "Ashikhmin", "ashikhmin",
    "Microfiber", "microfiber"
]

gabor_type_enum = [
    "2D", "2d",
    "3D", "3d"
]

noise_type_enum = [
    "Multifractal", "multifractal",
    "fBM", "fbm",
    "Hybrid Multifractal", "hybrid_multifractal",
    "Ridged Multifractal", "ridged_multifractal",
    "Hetero Terrain", "hetero_terrain"
]

metallic_fresnel_enum = [
    "Physical Conductor", "physical_conductor",
    "F82 Tint", "f82_tint"
]

scatter_phase_enum = [
    "Henyey-Greenstein", "henyey_greenstein",
    "Fournier-Forand", "fournier_forand",
    "Draine", "draine",
    "Rayleigh", "rayleigh",
    "Mie", "mie"
]


def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn Itrch"
    in_reg.Name = "CyclesShadersPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0
    # Shaders
    in_reg.RegisterShader("CyclesDiffuseBSDF", 1, 0)
    in_reg.RegisterShader("CyclesMetallicBSDF", 1, 0)
    in_reg.RegisterShader("CyclesPrincipledBSDF", 1, 0)
    in_reg.RegisterShader("CyclesTranslucentBSDF", 1, 0)
    in_reg.RegisterShader("CyclesTransparentBSDF", 1, 0)
    in_reg.RegisterShader("CyclesToonBSDF", 1, 0)
    in_reg.RegisterShader("CyclesGlossyBSDF", 1, 0)
    in_reg.RegisterShader("CyclesGlassBSDF", 1, 0)
    in_reg.RegisterShader("CyclesRefractionBSDF", 1, 0)
    in_reg.RegisterShader("CyclesHairBSDF", 1, 0)
    in_reg.RegisterShader("CyclesEmission", 1, 0)
    in_reg.RegisterShader("CyclesAmbientOcclusion", 1, 0)
    in_reg.RegisterShader("CyclesBackground", 1, 0)
    in_reg.RegisterShader("CyclesHoldout", 1, 0)
    in_reg.RegisterShader("CyclesAbsorptionVolume", 1, 0)
    in_reg.RegisterShader("CyclesScatterVolume", 1, 0)
    in_reg.RegisterShader("CyclesSubsurfaceScattering", 1, 0)
    in_reg.RegisterShader("CyclesPrincipledVolume", 1, 0)
    in_reg.RegisterShader("CyclesPrincipledHairBSDF", 1, 0)
    in_reg.RegisterShader("CyclesSheenBSDF", 1, 0)
    in_reg.RegisterShader("CyclesRayPortalBSDF", 1, 0)
    # Texture
    in_reg.RegisterShader("CyclesImageTexture", 1, 0)
    in_reg.RegisterShader("CyclesEnvironmentTexture", 1, 0)
    in_reg.RegisterShader("CyclesSkyTexture", 1, 0)
    in_reg.RegisterShader("CyclesNoiseTexture", 1, 0)
    in_reg.RegisterShader("CyclesCheckerTexture", 1, 0)
    in_reg.RegisterShader("CyclesBrickTexture", 1, 0)
    in_reg.RegisterShader("CyclesGradientTexture", 1, 0)
    in_reg.RegisterShader("CyclesVoronoiTexture", 1, 0)
    in_reg.RegisterShader("CyclesMagicTexture", 1, 0)
    in_reg.RegisterShader("CyclesWaveTexture", 1, 0)
    in_reg.RegisterShader("CyclesIESTexture", 1, 0)
    in_reg.RegisterShader("CyclesWhiteNoiseTexture", 1, 0)
    in_reg.RegisterShader("CyclesGaborTexture", 1, 0)
    # Vector
    in_reg.RegisterShader("CyclesNormal", 1, 0)
    in_reg.RegisterShader("CyclesBump", 1, 0)
    in_reg.RegisterShader("CyclesMapping", 1, 0)
    in_reg.RegisterShader("CyclesNormalMap", 1, 0)
    in_reg.RegisterShader("CyclesVectorTransform", 1, 0)
    in_reg.RegisterShader("CyclesVectorRotate", 1, 0)
    in_reg.RegisterShader("CyclesVectorCurves", 1, 0)
    in_reg.RegisterShader("CyclesDisplacement", 1, 0)
    in_reg.RegisterShader("CyclesVectorDisplacement", 1, 0)
    # Input
    in_reg.RegisterShader("CyclesAttribute", 1, 0)
    in_reg.RegisterShader("CyclesOutputColorAOV", 1, 0)
    in_reg.RegisterShader("CyclesOutputValueAOV", 1, 0)
    in_reg.RegisterShader("CyclesVertexColor", 1, 0)
    in_reg.RegisterShader("CyclesBevel", 1, 0)
    in_reg.RegisterShader("CyclesCamera", 1, 0)
    in_reg.RegisterShader("CyclesFresnel", 1, 0)
    in_reg.RegisterShader("CyclesGeometry", 1, 0)
    in_reg.RegisterShader("CyclesHairInfo", 1, 0)
    in_reg.RegisterShader("CyclesLayerWeight", 1, 0)
    in_reg.RegisterShader("CyclesLightPath", 1, 0)
    in_reg.RegisterShader("CyclesObjectInfo", 1, 0)
    in_reg.RegisterShader("CyclesParticleInfo", 1, 0)
    in_reg.RegisterShader("CyclesColor", 1, 0)
    in_reg.RegisterShader("CyclesTangent", 1, 0)
    in_reg.RegisterShader("CyclesTextureCoordinate", 1, 0)
    in_reg.RegisterShader("CyclesUVMap", 1, 0)
    in_reg.RegisterShader("CyclesValue", 1, 0)
    in_reg.RegisterShader("CyclesWireframe", 1, 0)
    in_reg.RegisterShader("CyclesVolumeInfo", 1, 0)
    in_reg.RegisterShader("CyclesPointInfo", 1, 0)
    # Color
    in_reg.RegisterShader("CyclesLightFalloff", 1, 0)
    in_reg.RegisterShader("CyclesInvert", 1, 0)
    in_reg.RegisterShader("CyclesMixRGB", 1, 0)
    in_reg.RegisterShader("CyclesMixColor", 1, 0)
    in_reg.RegisterShader("CyclesMixFloat", 1, 0)
    in_reg.RegisterShader("CyclesMixVector", 1, 0)
    in_reg.RegisterShader("CyclesMixVectorNonUniform", 1, 0)
    in_reg.RegisterShader("CyclesGamma", 1, 0)
    in_reg.RegisterShader("CyclesBrightContrast", 1, 0)
    in_reg.RegisterShader("CyclesHSV", 1, 0)
    in_reg.RegisterShader("CyclesRGBCurves", 1, 0)
    in_reg.RegisterShader("CyclesColorCurves", 1, 0)
    # Convertor
    in_reg.RegisterShader("CyclesCombineColor", 1, 0)
    in_reg.RegisterShader("CyclesCombineRGB", 1, 0)
    in_reg.RegisterShader("CyclesCombineHSV", 1, 0)
    in_reg.RegisterShader("CyclesCombineXYZ", 1, 0)
    in_reg.RegisterShader("CyclesSeparateColor", 1, 0)
    in_reg.RegisterShader("CyclesSeparateRGB", 1, 0)
    in_reg.RegisterShader("CyclesSeparateHSV", 1, 0)
    in_reg.RegisterShader("CyclesSeparateXYZ", 1, 0)
    in_reg.RegisterShader("CyclesMath", 1, 0)
    in_reg.RegisterShader("CyclesVectorMath", 1, 0)
    in_reg.RegisterShader("CyclesWavelength", 1, 0)
    in_reg.RegisterShader("CyclesBlackbody", 1, 0)
    in_reg.RegisterShader("CyclesRGBToBW", 1, 0)
    in_reg.RegisterShader("CyclesColorRamp", 1, 0)
    in_reg.RegisterShader("CyclesClamp", 1, 0)
    in_reg.RegisterShader("CyclesMapRange", 1, 0)
    in_reg.RegisterShader("CyclesVectorMapRange", 1, 0)
    in_reg.RegisterShader("CyclesFloatCurve", 1, 0)
    # Processing
    in_reg.RegisterShader("CyclesMixClosure", 1, 0)
    in_reg.RegisterShader("CyclesAddClosure", 1, 0)
    # RegistrationInsertionPoint - do not remove this line

    return true


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str("has been unloaded."), c.siVerbose)
    return true


def add_output_color(shader_def, name="color"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeColor3, paramOptions)
    paramDef.MainPort = False


def add_output_float(shader_def, name="float"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeScalar, paramOptions)
    paramDef.MainPort = False


def add_output_int(shader_def, name="integer"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeInteger, paramOptions)
    paramDef.MainPort = False


def add_output_vector(shader_def, name="vector"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeVector3, paramOptions)
    paramDef.MainPort = False


def add_output_point(shader_def, name="point"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeVector3, paramOptions)
    paramDef.MainPort = False


def add_output_normal(shader_def, name="normal"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeVector3, paramOptions)
    paramDef.MainPort = False


def add_output_closure(shader_def, name="closure"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeColor4, paramOptions)
    paramDef.MainPort = False


def add_output_string(shader_def, name="string"):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetLongName(name)
    params = shader_def.OutputParamDefs
    paramDef = params.AddParamDef2("out" + name, c.siShaderDataTypeString, paramOptions)
    paramDef.MainPort = False


def add_input_color(paramOptions, params, defaultValue=1, name="color"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeColor3, paramOptions)


def add_input_float(paramOptions, params, defaultValue=0, name="float", visMin=None, visMax=None):
    paramOptions.SetDefaultValue(defaultValue)
    if visMin is not None and visMax is not None:
        paramOptions.SetSoftLimit(visMin, visMax)
    params.AddParamDef(name, c.siShaderDataTypeScalar, paramOptions)


def add_input_integer(paramOptions, params, defaultValue=0, name="integer", visMin=None, visMax=None):
    paramOptions.SetDefaultValue(defaultValue)
    if visMin is not None and visMax is not None:
        paramOptions.SetSoftLimit(visMin, visMax)
    params.AddParamDef(name, c.siShaderDataTypeInteger, paramOptions)


def add_input_vector(paramOptions, params, defaultValue=0, name="vector", minVisible=None, maxVisible=None):
    paramOptions.SetDefaultValue(defaultValue)
    if minVisible is not None and maxVisible is not None:
        paramOptions.SetSoftLimit(minVisible, maxVisible)
    params.AddParamDef(name, c.siShaderDataTypeVector3, paramOptions)


def add_input_point(paramOptions, params, defaultValue=0, name="point"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeVector3, paramOptions)


def add_input_normal(paramOptions, params, defaultValue=0, name="normal"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeVector3, paramOptions)


def add_input_closure(paramOptions, params, defaultValue=0, name="closure"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeColor4, paramOptions)


def add_input_string(paramOptions, params, defaultValue="", name="string"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeString, paramOptions)


def add_input_boolean(paramOptions, params, defaultValue=False, name="boolean"):
    paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeBoolean, paramOptions)


def add_input_fcurve(paramOptions, params, name="fcurve", defaultValue=None):
    if defaultValue is not None:
        paramOptions.SetDefaultValue(defaultValue)
    params.AddParamDef(name, c.siShaderDataTypeProfileCurve, paramOptions)


def add_input_image(param_options, params, default_value="", name="image"):
    param_options.SetDefaultValue(default_value)
    params.AddParamDef(name, c.siShaderDataTypeImage, param_options)


def add_input_gradient(paramOptions, params, name="gradient"):
    params.AddParamDef(name, c.siShaderDataTypeGradient, paramOptions)


def standard_pram_options():
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetAnimatable(True)
    paramOptions.SetTexturable(True)
    paramOptions.SetReadOnly(False)
    paramOptions.SetInspectable(True)
    return paramOptions


def no_port_pram_options():
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetAnimatable(True)
    paramOptions.SetTexturable(False)
    paramOptions.SetReadOnly(False)
    paramOptions.SetInspectable(True)
    return paramOptions


def type_param_options(name):
    paramOptions = XSIFactory.CreateShaderParamDefOptions()
    paramOptions.SetAnimatable(False)
    paramOptions.SetTexturable(False)
    paramOptions.SetReadOnly(True)
    paramOptions.SetInspectable(False)
    paramOptions.SetDefaultValue(name)
    return paramOptions


def CyclesShadersPlugin_CyclesDiffuseBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycDiffuseBSDF")
    return True


def CyclesShadersPlugin_CyclesDiffuseBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shader_def.InputParamDefs

    # parameters
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.0, "Roughness", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddItem("Color", "Color")
    ppg_layout.AddItem("Roughness", "Roughness")
    ppg_layout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "DiffuseBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------

def CyclesShadersPlugin_CyclesMetallicBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycMetallicBSDF")
    return True


def CyclesShadersPlugin_CyclesMetallicBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shader_def.InputParamDefs

    # parameters
    add_input_string(no_port_pram_options(), params, "Multiscatter GGX", "distribution")
    add_input_string(no_port_pram_options(), params, "f82_tint", "fresnel_type")
    add_input_color(standard_pram_options(), params, [0.617, 0.577, 0.540], "BaseColor")
    add_input_color(standard_pram_options(), params, [0.695, 0.726, 0.770], "EdgeTint")
    add_input_float(no_port_pram_options(), params, 2.757, "ior_x", 0.0, 4.0)
    add_input_float(no_port_pram_options(), params, 2.513, "ior_y", 0.0, 4.0)
    add_input_float(no_port_pram_options(), params, 2.231, "ior_z", 0.0, 4.0)
    add_input_vector(standard_pram_options(), params, 0.0, "IOR")
    add_input_float(no_port_pram_options(), params, 3.867, "extinction_x", 0.0, 4.0)
    add_input_float(no_port_pram_options(), params, 3.404, "extinction_y", 0.0, 4.0)
    add_input_float(no_port_pram_options(), params, 3.009, "extinction_z", 0.0, 4.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Extinction")
    add_input_float(standard_pram_options(), params, 0.5, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Anisotropy", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Rotation", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")
    add_input_normal(standard_pram_options(), params, 0.0, "Tangent")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddEnumControl("distribution", glass_distribution_enum, "Distribution")
    ppg_layout.AddEnumControl("fresnel_type", metallic_fresnel_enum, "Fresnel Type")
    ppg_layout.AddItem("BaseColor", "Base Color")
    ppg_layout.AddItem("EdgeTint", "Edge Tint")
    ppg_layout.AddGroup("IOR")
    ppg_layout.AddRow()
    ppg_layout.AddItem("ior_x", "X")
    ppg_layout.AddItem("ior_y", "Y")
    ppg_layout.AddItem("ior_z", "Z")
    ppg_layout.EndRow()
    ppg_layout.EndGroup()
    ppg_layout.AddGroup("Extinction")
    ppg_layout.AddRow()
    ppg_layout.AddItem("extinction_x", "X")
    ppg_layout.AddItem("extinction_y", "Y")
    ppg_layout.AddItem("extinction_z", "Z")
    ppg_layout.EndRow()
    ppg_layout.EndGroup()
    ppg_layout.AddItem("Roughness", "Roughness")
    ppg_layout.AddItem("Anisotropy", "Anisotropy")
    ppg_layout.AddItem("Rotation", "Rotation")
    ppg_layout.EndGroup()

    ppg_layout.Language = "Python"
    ppg_layout.Logic = '''
def update_ui(prop):
    fresnel_type = prop.Parameters("fresnel_type").Value
    if fresnel_type == "f82_tint":
        prop.Parameters("BaseColor").ReadOnly = False
        prop.Parameters("EdgeTint").ReadOnly = False
        prop.Parameters("ior_x").ReadOnly = True
        prop.Parameters("ior_y").ReadOnly = True
        prop.Parameters("ior_z").ReadOnly = True
        prop.Parameters("extinction_x").ReadOnly = True
        prop.Parameters("extinction_y").ReadOnly = True
        prop.Parameters("extinction_z").ReadOnly = True
    else:
        prop.Parameters("BaseColor").ReadOnly = True
        prop.Parameters("EdgeTint").ReadOnly = True
        prop.Parameters("ior_x").ReadOnly = False
        prop.Parameters("ior_y").ReadOnly = False
        prop.Parameters("ior_z").ReadOnly = False
        prop.Parameters("extinction_x").ReadOnly = False
        prop.Parameters("extinction_y").ReadOnly = False
        prop.Parameters("extinction_z").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def fresnel_type_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MetallicBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------

def CyclesShadersPlugin_CyclesPrincipledBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycPrincipledBSDF")
    return True


def CyclesShadersPlugin_CyclesPrincipledBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shader_def.InputParamDefs

    # parameters
    add_input_color(standard_pram_options(), params, 0.8, "BaseColor")
    add_input_float(standard_pram_options(), params, 0.0, "Metallic", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "DiffuseRoughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.45, "IOR", 0.0, 4.0)
    add_input_float(standard_pram_options(), params, 1.0, "Alpha", 0.0, 1.0)

    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    add_input_string(no_port_pram_options(), params, "random_walk", "subsurface_method")
    add_input_float(standard_pram_options(), params, 0.0, "SubsurfaceWeight", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "SubsurfaceRadius")
    add_input_float(no_port_pram_options(), params, 1.0, "RadiusX", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.2, "RadiusY", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.1, "RadiusZ", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.05, "SubsurfaceScale", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.4, "SubsurfaceIOR", 1.01, 3.8)
    add_input_float(standard_pram_options(), params, 0.0, "SubsurfaceAnisotropy", 0.0, 1.0)

    add_input_string(no_port_pram_options(), params, "Multiscatter GGX", "Distribution")
    add_input_float(standard_pram_options(), params, 0.5, "SpecularIORLevel", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 1.0, "SpecularTint")
    add_input_float(standard_pram_options(), params, 0.0, "Anisotropic", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "AnisotropicRotation", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Tangent")

    add_input_float(standard_pram_options(), params, 0.0, "TransmissionWeight", 0.0, 1.0)

    add_input_float(standard_pram_options(), params, 0.0, "CoatWeight", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.03, "CoatRoughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.5, "CoatIOR", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 1.0, "CoatTint")
    add_input_normal(standard_pram_options(), params, 0.0, "CoatNormal")

    add_input_float(standard_pram_options(), params, 0.0, "SheenWeight", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "SheenRoughness", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 1.0, "SheenTint")

    add_input_color(standard_pram_options(), params, 0.0, "EmissionColor")
    add_input_float(standard_pram_options(), params, 1.0, "EmissionStrength", 0.0, 1.0)

    add_input_float(standard_pram_options(), params, 0.0, "ThinFilmThickness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.33, "ThinFilmIOR", 1.0, 4.0)

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    ppg_layout = shader_def.PPGLayout

    ppg_layout.AddGroup("General Parameters")
    ppg_layout.AddColor("BaseColor", "Base Color")
    ppg_layout.AddItem("Metallic", "Metallic")
    ppg_layout.AddItem("Roughness", "Roughness")
    ppg_layout.AddItem("IOR", "IOR")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Diffuse")
    ppg_layout.AddGroup("Diffuse Parameters")
    ppg_layout.AddItem("DiffuseRoughness", "Diffuse Roughness")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Subsurface")
    ppg_layout.AddGroup("Subsurface Parameters")
    ppg_layout.AddEnumControl("subsurface_method", principled_sss_method_enum, "Method")
    ppg_layout.AddItem("SubsurfaceWeight", "Weight")
    ppg_layout.AddGroup("Radius")
    ppg_layout.AddRow()
    ppg_layout.AddItem("RadiusX", "X")
    ppg_layout.AddItem("RadiusY", "Y")
    ppg_layout.AddItem("RadiusZ", "Z")
    ppg_layout.EndRow()
    ppg_layout.EndGroup()
    ppg_layout.AddItem("SubsurfaceScale", "Scale")
    ppg_layout.AddItem("SubsurfaceIOR", "IOR")
    ppg_layout.AddItem("SubsurfaceAnisotropy", "Anisotropy")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Specular")
    ppg_layout.AddGroup("Specular Parameters")
    ppg_layout.AddEnumControl("Distribution", principled_distibution_enum, "Distribution")
    ppg_layout.AddItem("SpecularIORLevel", "IOR Level")
    ppg_layout.AddColor("SpecularTint", "Tint")
    ppg_layout.AddItem("Anisotropic", "Anisotropic")
    ppg_layout.AddItem("AnisotropicRotation", "Anisotropic Rotation")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Transmission")
    ppg_layout.AddGroup("Transmission Parameters")
    ppg_layout.AddItem("TransmissionWeight", "Weight")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Coat")
    ppg_layout.AddGroup("Coat Parameters")
    ppg_layout.AddItem("CoatWeight", "Weight")
    ppg_layout.AddItem("CoatRoughness", "Roughness")
    ppg_layout.AddItem("CoatIOR", "IOR")
    ppg_layout.AddColor("CoatTint", "Tint")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Sheen")
    ppg_layout.AddGroup("Sheen Parameters")
    ppg_layout.AddItem("SheenWeight", "Weight")
    ppg_layout.AddItem("SheenRoughness", "Roughness")
    ppg_layout.AddColor("SheenTint", "Tint")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Emission")
    ppg_layout.AddGroup("Emission Parameters")
    ppg_layout.AddColor("EmissionColor", "Color")
    ppg_layout.AddItem("EmissionStrength", "Strength")
    ppg_layout.EndGroup()

    ppg_layout.AddTab("Thin Film")
    ppg_layout.AddGroup("Thin Film Parameters")
    ppg_layout.AddColor("ThinFilmThickness", "Thickness")
    ppg_layout.AddItem("ThinFilmIOR", "IOR")
    ppg_layout.EndGroup()

    ppg_layout.Language = "Python"
    ppg_layout.Logic = '''
def update_ui(prop):
    subsurface_method_value = prop.Parameters("subsurface_method").Value
    if subsurface_method_value == "burley":
        prop.Parameters("SubsurfaceIOR").ReadOnly = True
        prop.Parameters("SubsurfaceAnisotropy").ReadOnly = True
    elif subsurface_method_value == "random_walk":
        prop.Parameters("SubsurfaceIOR").ReadOnly = True
        prop.Parameters("SubsurfaceAnisotropy").ReadOnly = False
    else:
        prop.Parameters("SubsurfaceIOR").ReadOnly = False
        prop.Parameters("SubsurfaceAnisotropy").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def subsurface_method_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "PrincipledBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesTranslucentBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycTranslucentBSDF")
    return True


def CyclesShadersPlugin_CyclesTranslucentBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "TranslucentBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesTransparentBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycTransparentBSDF")
    return True


def CyclesShadersPlugin_CyclesTransparentBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "TransparentBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesToonBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycToonBSDF")
    return True


def CyclesShadersPlugin_CyclesToonBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Diffuse", "Component")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.5, "Size", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "Smooth", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Component", toon_component_enum, "Component")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Size", "Size")
    ppgLayout.AddItem("Smooth", "Smooth")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ToonBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesGlossyBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycGlossyBSDF")
    return True


def CyclesShadersPlugin_CyclesGlossyBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "GGX", "Distribution")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.2, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Anisotropy", -1.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Rotation", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")
    add_input_normal(standard_pram_options(), params, 0.0, "Tangent")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Distribution", glossy_distribution_enum, "Distribution")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Roughness", "Roughness")
    ppgLayout.AddItem("Anisotropy", "Anisotropy")
    ppgLayout.AddItem("Rotation", "Rotation")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "GlossyBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesGlassBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycGlassBSDF")
    return True


def CyclesShadersPlugin_CyclesGlassBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Beckmann", "Distribution")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.0, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.45, "IOR", 1.0, 2.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Distribution", glass_distribution_enum, "Distribution")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Roughness", "Roughness")
    ppgLayout.AddItem("IOR", "IOR")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "GlassBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesRefractionBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycRefractionBSDF")
    return True


def CyclesShadersPlugin_CyclesRefractionBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Beckmann", "Distribution")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.0, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.45, "IOR", 1.0, 2.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Distribution", refraction_distribution_enum, "Distribution")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Roughness", "Roughness")
    ppgLayout.AddItem("IOR", "IOR")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "RefractionBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesHairBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycHairBSDF")
    return True


def CyclesShadersPlugin_CyclesHairBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Reflection", "Component")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.0, "Offset", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.1, "RoughnessU", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "RoughnessV", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Tangent")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Component", hair_component_enum, "Component")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Offset", "Offset")
    ppgLayout.AddItem("RoughnessU", "RoughnessU")
    ppgLayout.AddItem("RoughnessV", "RoughnessV")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "HairBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesEmission_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycEmission")
    return True


def CyclesShadersPlugin_CyclesEmission_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Strength", 0.0, 50.0)

    # Output Parameter: out
    add_output_closure(shader_def, "Emission")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Strength", "Strength")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Emission"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesAmbientOcclusion_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycAmbientOcclusion")
    return True


def CyclesShadersPlugin_CyclesAmbientOcclusion_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_integer(no_port_pram_options(), params, 16, "Samples", 1, 128)
    add_input_color(standard_pram_options(), params, 1.0, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Distance", 0.0, 10.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")
    add_input_boolean(no_port_pram_options(), params, False, "Inside")
    add_input_boolean(no_port_pram_options(), params, False, "OnlyLocal")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "AO")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Samples", "Samples")
    ppgLayout.AddItem("Inside", "Inside")
    ppgLayout.AddItem("OnlyLocal", "Only Local")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Distance", "Distance")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "AmbientOcclusion"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesBackground_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycBackground")
    return True


def CyclesShadersPlugin_CyclesBackground_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Strength", 0.0, 5.0)

    # Output Parameter: out
    add_output_closure(shader_def, "Background")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Strength", "Strength")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Background"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesHoldout_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycHoldout")
    return True


def CyclesShadersPlugin_CyclesHoldout_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_closure(shader_def, "Holdout")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Holdout"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesAbsorptionVolume_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycAbsorptionVolume")
    return True


def CyclesShadersPlugin_CyclesAbsorptionVolume_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Density", 0.0, 5.0)

    # Output Parameter: out
    add_output_closure(shader_def, "Volume")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Density", "Density")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "AbsorptionVolume"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesScatterVolume_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycScatterVolume")
    return True


def CyclesShadersPlugin_CyclesScatterVolume_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)


    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "henyey_greenstein", "phase")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Density", 0.0, 5.0)
    add_input_float(standard_pram_options(), params, 0.0, "Anisotropy", 0.0, 1.0)

    add_input_float(standard_pram_options(), params, 1.33, "IOR", 1.0, 4.0)
    add_input_float(standard_pram_options(), params, 0.1, "Backscatter", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "Alpha", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 20.0, "Diameter", 1.0, 64.0)

    # Output Parameter: out
    add_output_closure(shader_def, "Volume")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("phase", scatter_phase_enum, "Phase")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Density", "Density")
    ppgLayout.AddItem("Anisotropy", "Anisotropy")
    ppgLayout.AddItem("IOR", "IOR")
    ppgLayout.AddItem("Backscatter", "Backscatter")
    ppgLayout.AddItem("Alpha", "Alpha")
    ppgLayout.AddItem("Diameter", "Diameter")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def update_ui(prop):
    phase_value = prop.Parameters("phase").Value
    if phase_value == "henyey_greenstein":
        prop.Parameters("Anisotropy").ReadOnly = False
        prop.Parameters("IOR").ReadOnly = True
        prop.Parameters("Backscatter").ReadOnly = True
        prop.Parameters("Alpha").ReadOnly = True
        prop.Parameters("Diameter").ReadOnly = True
    elif phase_value == "fournier_forand":
        prop.Parameters("Anisotropy").ReadOnly = True
        prop.Parameters("IOR").ReadOnly = False
        prop.Parameters("Backscatter").ReadOnly = False
        prop.Parameters("Alpha").ReadOnly = True
        prop.Parameters("Diameter").ReadOnly = True
    elif phase_value == "draine":
        prop.Parameters("Anisotropy").ReadOnly = False
        prop.Parameters("IOR").ReadOnly = True
        prop.Parameters("Backscatter").ReadOnly = True
        prop.Parameters("Alpha").ReadOnly = False
        prop.Parameters("Diameter").ReadOnly = True
    elif phase_value == "rayleigh":
        prop.Parameters("Anisotropy").ReadOnly = True
        prop.Parameters("IOR").ReadOnly = True
        prop.Parameters("Backscatter").ReadOnly = True
        prop.Parameters("Alpha").ReadOnly = True
        prop.Parameters("Diameter").ReadOnly = True
    elif phase_value == "mie":
        prop.Parameters("Anisotropy").ReadOnly = True
        prop.Parameters("IOR").ReadOnly = True
        prop.Parameters("Backscatter").ReadOnly = True
        prop.Parameters("Alpha").ReadOnly = True
        prop.Parameters("Diameter").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def phase_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ScatterVolume"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesPrincipledVolume_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycPrincipledVolume")
    return True


def CyclesShadersPlugin_CyclesPrincipledVolume_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.5, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Density", 0.0, 5.0)
    add_input_float(standard_pram_options(), params, 0.0, "Anisotropy", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.0, "AbsorptionColor")
    add_input_float(standard_pram_options(), params, 0.0, "EmissionStrength", 0.0, 5.0)
    add_input_color(standard_pram_options(), params, 1.0, "EmissionColor")
    add_input_float(standard_pram_options(), params, 0.0, "BlackbodyIntensity", 0.0, 5.0)
    add_input_color(standard_pram_options(), params, 1.0, "BlackbodyTint")
    add_input_float(standard_pram_options(), params, 1000.0, "Temperature", 0.0, 3000.0)
    add_input_string(no_port_pram_options(), params, "density", "DensityAttribute")
    add_input_string(no_port_pram_options(), params, "", "ColorAttribute")
    add_input_string(no_port_pram_options(), params, "temperature", "TemperatureAttribute")

    # Output Parameter: out
    add_output_closure(shader_def, "Volume")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("ColorAttribute", "Color Attribute")
    ppgLayout.AddItem("Density", "Density")
    ppgLayout.AddItem("DensityAttribute", "Density Attribute")
    ppgLayout.AddItem("Anisotropy", "Anisotropy")
    ppgLayout.AddItem("AbsorptionColor", "Absorption Color")
    ppgLayout.AddItem("EmissionStrength", "Emission Strength")
    ppgLayout.AddItem("EmissionColor", "Emission Color")
    ppgLayout.AddItem("BlackbodyIntensity", "Blackbody Intensity")
    ppgLayout.AddItem("BlackbodyTint", "Blackbody Tint")
    ppgLayout.AddItem("Temperature", "Temperature")
    ppgLayout.AddItem("TemperatureAttribute", "Temperature Attribute")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "PrincipledVolume"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesPrincipledHairBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycPrincipledHairBSDF")
    return True


def CyclesShadersPlugin_CyclesPrincipledHairBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "chiang", "Model")
    add_input_string(no_port_pram_options(), params, "direct_coloring", "Parametrization")
    add_input_color(standard_pram_options(), params, [0.017513, 0.005763, 0.002059], "Color")

    add_input_vector(standard_pram_options(), params, [0.245531, 0.52, 1.365], "AbsorptionCoefficient")
    add_input_float(no_port_pram_options(), params, 0.245531, "AbsorptionCoefficientX", 0, 1)
    add_input_float(no_port_pram_options(), params, 0.52, "AbsorptionCoefficientY", 0, 1)
    add_input_float(no_port_pram_options(), params, 1.365, "AbsorptionCoefficientZ", 0, 1)

    add_input_float(standard_pram_options(), params, 0.8, "Melanin", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "MelaninRedness", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 1.0, "Tint")

    add_input_float(standard_pram_options(), params, 0.85, "AspectRatio", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.3, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.3, "RadialRoughness", 0.0, 1.0)

    add_input_float(standard_pram_options(), params, 0.0, "Coat", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.55, "IOR", 0.0, 5.0)
    add_input_float(standard_pram_options(), params, 2.0, "Offset", -90.0, 90.0)

    add_input_float(standard_pram_options(), params, 0.0, "RandomColor", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "RandomRoughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Random", 0.0, 1.0)

    add_input_float(standard_pram_options(), params, 1.0, "Rlobe", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "TTlobe", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "TRTlobe", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Coloring Parameters")
    ppgLayout.AddEnumControl("Model", principled_hair_model_enum, "Scattering Model")
    ppgLayout.AddEnumControl("Parametrization", principled_hair_parametrization_enum, "Parametrization")
    ppgLayout.AddColor("Color", "Color")
    ppgLayout.AddItem("Melanin", "Melanin")
    ppgLayout.AddItem("MelaninRedness", "Melanin Redness")
    ppgLayout.AddColor("Tint", "Tint")
    ppgLayout.AddGroup("Absorption Coefficient")
    ppgLayout.AddRow()
    ppgLayout.AddItem("AbsorptionCoefficientX", "X")
    ppgLayout.AddItem("AbsorptionCoefficientY", "Y")
    ppgLayout.AddItem("AbsorptionCoefficientZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("General Parameters")
    ppgLayout.AddItem("AspectRatio", "Aspect Ratio")
    ppgLayout.AddItem("Roughness", "Roughness")
    ppgLayout.AddItem("RadialRoughness", "Radial Roughness")
    ppgLayout.AddItem("Coat", "Coat")
    ppgLayout.AddItem("IOR", "IOR")
    ppgLayout.AddItem("Offset", "Offset")
    ppgLayout.AddItem("RandomColor", "Random Color")
    ppgLayout.AddItem("RandomRoughness", "Random Roughness")

    ppgLayout.AddItem("Rlobe", "Reflection")
    ppgLayout.AddItem("TTlobe", "Transmission")
    ppgLayout.AddItem("TRTlobe", "Secondary Reflection")
    ppgLayout.EndGroup()

    # logic
    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def update_ui(prop):
    parametrization_value = prop.Parameters("Parametrization").Value
    model_value = prop.Parameters("Model").Value
    if parametrization_value == "direct_coloring":
        prop.Parameters("Color").ReadOnly = False
        prop.Parameters("Melanin").ReadOnly = True
        prop.Parameters("MelaninRedness").ReadOnly = True
        prop.Parameters("Tint").ReadOnly = True
        prop.Parameters("AbsorptionCoefficientX").ReadOnly = True
        prop.Parameters("AbsorptionCoefficientY").ReadOnly = True
        prop.Parameters("AbsorptionCoefficientZ").ReadOnly = True
        prop.Parameters("RandomColor").ReadOnly = True
    elif parametrization_value == "melanin_concentration":
        prop.Parameters("Color").ReadOnly = True
        prop.Parameters("Melanin").ReadOnly = False
        prop.Parameters("MelaninRedness").ReadOnly = False
        prop.Parameters("Tint").ReadOnly = False
        prop.Parameters("AbsorptionCoefficientX").ReadOnly = True
        prop.Parameters("AbsorptionCoefficientY").ReadOnly = True
        prop.Parameters("AbsorptionCoefficientZ").ReadOnly = True
        prop.Parameters("RandomColor").ReadOnly = False
    else:
        prop.Parameters("Color").ReadOnly = True
        prop.Parameters("Melanin").ReadOnly = True
        prop.Parameters("MelaninRedness").ReadOnly = True
        prop.Parameters("Tint").ReadOnly = True
        prop.Parameters("AbsorptionCoefficientX").ReadOnly = False
        prop.Parameters("AbsorptionCoefficientY").ReadOnly = False
        prop.Parameters("AbsorptionCoefficientZ").ReadOnly = False
        prop.Parameters("RandomColor").ReadOnly = True

    if model_value == "chiang":
        prop.Parameters("AspectRatio").ReadOnly = True
        prop.Parameters("Rlobe").ReadOnly = True
        prop.Parameters("TTlobe").ReadOnly = True
        prop.Parameters("TRTlobe").ReadOnly = True
    else:
        prop.Parameters("AspectRatio").ReadOnly = False
        prop.Parameters("Rlobe").ReadOnly = False
        prop.Parameters("TTlobe").ReadOnly = False
        prop.Parameters("TRTlobe").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def Parametrization_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)

def Model_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "PrincipledHairBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSheenBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycSheenBSDF")
    return True


def CyclesShadersPlugin_CyclesSheenBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shader_def.InputParamDefs

    # parameters
    add_input_string(no_port_pram_options(), params, "microfiber", "distribution")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.5, "Roughness", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddEnumControl("distribution", sheen_distribution_enum, "Distribution")
    ppg_layout.AddItem("Color", "Color")
    ppg_layout.AddItem("Roughness", "Roughness")
    ppg_layout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SheenBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesRayPortalBSDF_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycRayPortalBSDF")
    return True


def CyclesShadersPlugin_CyclesRayPortalBSDF_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shader_def.InputParamDefs

    # parameters
    add_input_color(standard_pram_options(), params, 1.0, "Color")
    add_input_vector(standard_pram_options(), params, 0.0, "Position")
    add_input_vector(standard_pram_options(), params, 0.0, "Direction")

    # Output Parameter: out
    add_output_closure(shader_def, "BSDF")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddItem("Color", "Color")
    ppg_layout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "RayPortalBSDF"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSubsurfaceScattering_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Shaders")
    in_ctxt.SetAttribute("DisplayName", "cycSubsurfaceScattering")
    return True


def CyclesShadersPlugin_CyclesSubsurfaceScattering_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Christensen-Burley", "Falloff")
    add_input_color(standard_pram_options(), params, 0.8, "Color")
    add_input_float(standard_pram_options(), params, 0.05, "Scale", 0.0, 1.0)

    add_input_float(no_port_pram_options(), params, 1.0, "RadiusX")
    add_input_float(no_port_pram_options(), params, 0.2, "RadiusY")
    add_input_float(no_port_pram_options(), params, 0.1, "RadiusZ")
    add_input_vector(standard_pram_options(), params, [0.1, 0.1, 0.1], "SSSRadius")
    add_input_float(standard_pram_options(), params, 1.4, "IOR", 1.01, 3.8)
    add_input_float(standard_pram_options(), params, 1.0, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Anisotropy", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_closure(shader_def, "BSSRDF")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Falloff", ss_closure_enum, "Falloff")
    ppgLayout.AddColor("Color", "Color")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.AddGroup("SSS Radius")
    ppgLayout.AddRow()
    ppgLayout.AddItem("RadiusX", "X")
    ppgLayout.AddItem("RadiusY", "Y")
    ppgLayout.AddItem("RadiusZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddItem("IOR", "IOR")
    ppgLayout.AddItem("Roughness", "Roughness")
    ppgLayout.AddItem("Anisotropy", "Anisotropy")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def update_ui(prop):
    falloff_value = prop.Parameters("Falloff").Value
    if falloff_value == "random_walk" or falloff_value == "random_walk_fixed":
        prop.Parameters("IOR").ReadOnly = False
        prop.Parameters("Anisotropy").ReadOnly = False
        if falloff_value == "random_walk":
            prop.Parameters("Roughness").ReadOnly = False
        else:
            prop.Parameters("Roughness").ReadOnly = True
    else:
        prop.Parameters("IOR").ReadOnly = True
        prop.Parameters("Roughness").ReadOnly = True
        prop.Parameters("Anisotropy").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def Falloff_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SubsurfaceScattering"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesImageTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycImageTexture")
    return True


def CyclesShadersPlugin_CyclesImageTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_image(no_port_pram_options(), params, "", "image")
    add_input_string(no_port_pram_options(), params, "color", "ColorSpace")
    add_input_string(no_port_pram_options(), params, "Linear", "Interpolation")
    add_input_string(no_port_pram_options(), params, "flat", "Projection")
    add_input_float(no_port_pram_options(), params, 0.0, "ProjectionBlend", 0.0, 1.0)
    add_input_string(no_port_pram_options(), params, "Repeat", "Extension")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")
    add_input_boolean(no_port_pram_options(), params, True, "premultiply_alpha")
    # parameters for image sequences
    add_input_string(no_port_pram_options(), params, "single_image", "ImageSource")
    add_input_integer(no_port_pram_options(), params, 100, "ImageFrames", 0, 200)
    add_input_integer(no_port_pram_options(), params, 1, "ImageStartFrame", 0, 10)
    add_input_integer(no_port_pram_options(), params, 0, "ImageOffset", 0, 10)
    add_input_boolean(no_port_pram_options(), params, False, "ImageCyclic")
    add_input_string(no_port_pram_options(), params, "1001", "tiles")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Alpha")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddItem("image", "Image")
    ppg_layout.AddEnumControl("ColorSpace", color_space_enum, "Color Space")
    ppg_layout.AddEnumControl("Interpolation", interpolation_enum, "Interpolation")
    ppg_layout.AddEnumControl("Projection", projection_enum, "Projection")
    ppg_layout.AddItem("ProjectionBlend", "Blend")
    ppg_layout.AddEnumControl("Extension", extension_enum, "Extension")
    ppg_layout.AddItem("premultiply_alpha", "Premultiply Alpha")
    ppg_layout.EndGroup()

    ppg_layout.AddGroup("Source")
    ppg_layout.AddEnumControl("ImageSource", image_mode_enum, "Image Source")
    ppg_layout.AddItem("ImageFrames", "Frames")
    ppg_layout.AddItem("ImageStartFrame", "Start Frame")
    ppg_layout.AddItem("ImageOffset", "Offset")
    ppg_layout.AddItem("ImageCyclic", "Cyclic")
    ppg_layout.EndGroup()

    ppg_layout.Language = "Python"
    ppg_layout.Logic = '''import os
def update_ui(prop):
    projection_value = prop.Parameters("Projection").Value
    if projection_value == "box":
        prop.Parameters("ProjectionBlend").ReadOnly = False
    else:
        prop.Parameters("ProjectionBlend").ReadOnly = True

    source_value = prop.Parameters("ImageSource").Value
    if source_value == "single_image" or source_value == "tiled":
        prop.Parameters("ImageFrames").ReadOnly = True
        prop.Parameters("ImageStartFrame").ReadOnly = True
        prop.Parameters("ImageOffset").ReadOnly = True
        prop.Parameters("ImageCyclic").ReadOnly = True
    else:
        prop.Parameters("ImageFrames").ReadOnly = False
        prop.Parameters("ImageStartFrame").ReadOnly = False
        prop.Parameters("ImageOffset").ReadOnly = False
        prop.Parameters("ImageCyclic").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def image_OnChanged():
    prop = PPG.Inspected(0)

def ImageSource_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)

def Projection_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ImageTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesEnvironmentTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycEnvironmentTexture")
    return True


def CyclesShadersPlugin_CyclesEnvironmentTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_image(no_port_pram_options(), params, "", "image")
    add_input_string(no_port_pram_options(), params, "color", "ColorSpace")
    add_input_string(no_port_pram_options(), params, "Linear", "Interpolation")
    add_input_string(no_port_pram_options(), params, "equirectangular", "Projection")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")
    add_input_boolean(no_port_pram_options(), params, True, "premultiply_alpha")
    # parameters for image sequences
    add_input_string(no_port_pram_options(), params, "single_image", "ImageSource")
    add_input_integer(no_port_pram_options(), params, 100, "ImageFrames", 0, 200)
    add_input_integer(no_port_pram_options(), params, 1, "ImageStartFrame", 0, 10)
    add_input_integer(no_port_pram_options(), params, 0, "ImageOffset", 0, 10)
    add_input_boolean(no_port_pram_options(), params, False, "ImageCyclic")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Alpha")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddItem("image", "Image")
    ppg_layout.AddEnumControl("ColorSpace", color_space_enum, "Color Space")
    ppg_layout.AddEnumControl("Interpolation", interpolation_enum, "Interpolation")
    ppg_layout.AddEnumControl("Projection", env_projection_enum, "Projection")
    ppg_layout.AddItem("premultiply_alpha", "Premultiply Alpha")
    ppg_layout.EndGroup()
    ppg_layout.AddGroup("Source")
    ppg_layout.AddEnumControl("ImageSource", environment_image_mode_enum, "Image Source")
    ppg_layout.AddItem("ImageFrames", "Frames")
    ppg_layout.AddItem("ImageStartFrame", "Start Frame")
    ppg_layout.AddItem("ImageOffset", "Offset")
    ppg_layout.AddItem("ImageCyclic", "Cyclic")
    ppg_layout.EndGroup()

    # logic
    ppg_layout.Language = "Python"
    ppg_layout.Logic = '''
def update_ui(prop):
    source_value = prop.Parameters("ImageSource").Value
    if source_value == "single_image" or source_value == "tiled":
        prop.Parameters("ImageFrames").ReadOnly = True
        prop.Parameters("ImageStartFrame").ReadOnly = True
        prop.Parameters("ImageOffset").ReadOnly = True
        prop.Parameters("ImageCyclic").ReadOnly = True
    else:
        prop.Parameters("ImageFrames").ReadOnly = False
        prop.Parameters("ImageStartFrame").ReadOnly = False
        prop.Parameters("ImageOffset").ReadOnly = False
        prop.Parameters("ImageCyclic").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def ImageSource_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "EnvironmentTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSkyTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycSkyTexture")
    return True


def CyclesShadersPlugin_CyclesSkyTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "nishita", "Type")
    add_input_float(no_port_pram_options(), params, 0, "SunDirectionX")
    add_input_float(no_port_pram_options(), params, 0, "SunDirectionY")
    add_input_float(no_port_pram_options(), params, 1, "SunDirectionZ")
    add_input_float(no_port_pram_options(), params, 2.2, "Turbidity", 0.0, 10.0)
    add_input_float(no_port_pram_options(), params, 0.3, "GroundAlbedo", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    add_input_boolean(no_port_pram_options(), params, True, "SunDisc")
    add_input_float(no_port_pram_options(), params, 0.545, "SunSize", 0.0, 90.0)
    add_input_float(no_port_pram_options(), params, 1.0, "SunIntensity", 0.0, 4.0)
    add_input_float(no_port_pram_options(), params, 15.0, "SunElevation", -90.0, 90.0)
    add_input_float(no_port_pram_options(), params, 0.0, "SunRotation", 0, 360)
    add_input_float(no_port_pram_options(), params, 0.0, "Altitude", 0.0, 60000.0)
    add_input_float(no_port_pram_options(), params, 1.0, "Air", 0.0, 10.0)
    add_input_float(no_port_pram_options(), params, 1.0, "Dust", 0.0, 10.0)
    add_input_float(no_port_pram_options(), params, 1.0, "Ozone", 0.0, 10.0)
    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppg_layout = shader_def.PPGLayout
    ppg_layout.AddGroup("Sky Model")
    ppg_layout.AddEnumControl("Type", sky_type_enum, "Type")
    ppg_layout.EndGroup()

    ppg_layout.AddGroup("Preetham or Hosek/Wilkil")
    ppg_layout.AddGroup("Sun Direction")
    ppg_layout.AddRow()
    ppg_layout.AddItem("SunDirectionX", "X")
    ppg_layout.AddItem("SunDirectionY", "Y")
    ppg_layout.AddItem("SunDirectionZ", "Z")
    ppg_layout.EndRow()
    ppg_layout.EndGroup()

    ppg_layout.AddItem("Turbidity", "Turbidity")
    ppg_layout.AddItem("GroundAlbedo", "Ground Albedo")
    ppg_layout.EndGroup()

    ppg_layout.AddGroup("Nishita")
    ppg_layout.AddItem("SunDisc", "Sun Disc")
    ppg_layout.AddItem("SunSize", "Sun Size")
    ppg_layout.AddItem("SunIntensity", "Sun Intensity")
    ppg_layout.AddItem("SunElevation", "Sun Elevation")
    ppg_layout.AddItem("SunRotation", "Sun Rotation")
    ppg_layout.AddItem("Altitude", "Altitude")
    ppg_layout.AddItem("Air", "Air")
    ppg_layout.AddItem("Dust", "Dust")
    ppg_layout.AddItem("Ozone", "Ozone")
    ppg_layout.EndGroup()

    # logic
    ppg_layout.Language = "Python"
    ppg_layout.Logic = '''from win32com.client import constants as c\n''' + "sky_type_enum = " + str(sky_type_enum) + "\n" + '''
def update_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value == "preetham" or type_value == "hosekwilkil":
        prop.Parameters("SunDirectionX").ReadOnly = False
        prop.Parameters("SunDirectionY").ReadOnly = False
        prop.Parameters("SunDirectionZ").ReadOnly = False
        prop.Parameters("Turbidity").ReadOnly = False
        if type_value == "hosekwilkil":
            prop.Parameters("GroundAlbedo").ReadOnly = False
        else:
            prop.Parameters("GroundAlbedo").ReadOnly = True

        prop.Parameters("SunDisc").ReadOnly = True
        prop.Parameters("SunSize").ReadOnly = True
        prop.Parameters("SunIntensity").ReadOnly = True
        prop.Parameters("SunElevation").ReadOnly = True
        prop.Parameters("SunRotation").ReadOnly = True
        prop.Parameters("Altitude").ReadOnly = True
        prop.Parameters("Air").ReadOnly = True
        prop.Parameters("Dust").ReadOnly = True
        prop.Parameters("Ozone").ReadOnly = True
    else:
        prop.Parameters("SunDirectionX").ReadOnly = True
        prop.Parameters("SunDirectionY").ReadOnly = True
        prop.Parameters("SunDirectionZ").ReadOnly = True
        prop.Parameters("Turbidity").ReadOnly = True
        prop.Parameters("GroundAlbedo").ReadOnly = True

        prop.Parameters("SunDisc").ReadOnly = False
        prop.Parameters("SunSize").ReadOnly = False
        prop.Parameters("SunIntensity").ReadOnly = False
        prop.Parameters("SunElevation").ReadOnly = False
        prop.Parameters("SunRotation").ReadOnly = False
        prop.Parameters("Altitude").ReadOnly = False
        prop.Parameters("Air").ReadOnly = False
        prop.Parameters("Dust").ReadOnly = False
        prop.Parameters("Ozone").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    update_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    update_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SkyTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesNoiseTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycNoiseTexture")
    return True


def CyclesShadersPlugin_CyclesNoiseTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 0.0, "W", 0.0, 10.0)
    add_input_string(no_port_pram_options(), params, "3d", "NoiseDimensions")
    add_input_string(no_port_pram_options(), params, "fbm", "type")
    add_input_boolean(no_port_pram_options(), params, False, "normalize")
    add_input_float(standard_pram_options(), params, 5.0, "Scale", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 2.0, "Detail", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.5, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 2.0, "Lacunarity", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.0, "Offset", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Gain", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.0, "Distortion", 0.0, 10.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppg_layout = shader_def.PPGLayout

    ppg_layout.AddGroup("Parameters")
    ppg_layout.AddEnumControl("NoiseDimensions", dimensions_type_enum, "Dimensions")
    ppg_layout.AddEnumControl("type", noise_type_enum, "Type")
    ppg_layout.AddItem("normalize", "Normalize")
    ppg_layout.AddItem("W", "W")
    ppg_layout.AddItem("Scale", "Scale")
    ppg_layout.AddItem("Detail", "Detail")
    ppg_layout.AddItem("Roughness", "Roughness")
    ppg_layout.AddItem("Lacunarity", "Lacunarity")
    ppg_layout.AddItem("Offset", "Offset")
    ppg_layout.AddItem("Gain", "Gain")
    ppg_layout.AddItem("Distortion", "Distortion")
    ppg_layout.EndGroup()

    ppg_layout.Language = "Python"
    ppg_layout.Logic = '''
def build_ui(prop):
    noise_dimensions = prop.Parameters("NoiseDimensions").Value
    noise_type = prop.Parameters("type").Value
    if noise_dimensions == "1d" or noise_dimensions == "4d":
        prop.Parameters("W").ReadOnly = False
    else:
        prop.Parameters("W").ReadOnly = True
    
    if noise_type == "fbm":
        prop.Parameters("normalize").ReadOnly = False
    else:
        prop.Parameters("normalize").ReadOnly = True

    if noise_type == "multifractal" or noise_type == "fbm":
        prop.Parameters("Offset").ReadOnly = True
        prop.Parameters("Gain").ReadOnly = True
    elif noise_type == "hetero_terrain":
        prop.Parameters("Offset").ReadOnly = False
        prop.Parameters("Gain").ReadOnly = True
    else:
        prop.Parameters("Offset").ReadOnly = False
        prop.Parameters("Gain").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def NoiseDimensions_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)


def type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "NoiseTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesCheckerTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycCheckerTexture")
    return True


def CyclesShadersPlugin_CyclesCheckerTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color1")
    add_input_color(standard_pram_options(), params, 0.2, "Color2")
    add_input_float(standard_pram_options(), params, 5.0, "Scale", 0.0, 10.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color1", "Color 1")
    ppgLayout.AddItem("Color2", "Color 2")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "CheckerTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesBrickTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycBrickTexture")
    return True


def CyclesShadersPlugin_CyclesBrickTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.8, "Color1")
    add_input_color(standard_pram_options(), params, 0.6, "Color2")
    add_input_color(standard_pram_options(), params, 0.2, "Mortar")
    add_input_float(standard_pram_options(), params, 5.0, "Scale", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.02, "MortarSize", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.1, "MortarSmooth", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Bias", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "BrickWidth", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.25, "RowHeight", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.5, "Offset", 0.0, 1.0)
    add_input_integer(no_port_pram_options(), params, 2, "OffsetFrequency", 0, 10)
    add_input_float(no_port_pram_options(), params, 0.5, "Squash", 0.0, 1.0)
    add_input_integer(no_port_pram_options(), params, 2, "SquashFrequency", 0, 10)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color1", "Color 1")
    ppgLayout.AddItem("Color2", "Color 2")
    ppgLayout.AddItem("Mortar", "Mortar")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.AddItem("MortarSize", "Mortar Size")
    ppgLayout.AddItem("MortarSmooth", "Mortar Smooth")
    ppgLayout.AddItem("Bias", "Bias")
    ppgLayout.AddItem("BrickWidth", "Brick Width")
    ppgLayout.AddItem("RowHeight", "Row Height")
    ppgLayout.AddItem("Offset", "Offset")
    ppgLayout.AddItem("OffsetFrequency", "Offset Frequency")
    ppgLayout.AddItem("Squash", "Squash")
    ppgLayout.AddItem("SquashFrequency", "Squash Frequency")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "BrickTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesGradientTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycGradientTexture")
    return True


def CyclesShadersPlugin_CyclesGradientTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Linear", "Type")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", gradient_type_enum, "Type")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "GradientTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVoronoiTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycVoronoiTexture")
    return True


def CyclesShadersPlugin_CyclesVoronoiTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "1d", "VoronoiDimensions")
    add_input_string(no_port_pram_options(), params, "distance", "Distance")
    add_input_string(no_port_pram_options(), params, "f1", "Feature")
    add_input_boolean(no_port_pram_options(), params, False, "normalize")
    add_input_float(standard_pram_options(), params, 0.0, "W", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 5.0, "Scale", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.0, "Detail", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "Roughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 2.0, "Lacunarity", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 1.0, "Smoothness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.5, "Exponent", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Randomness", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_float(shader_def, "Distance")
    add_output_color(shader_def, "Color")
    add_output_point(shader_def, "Position")
    add_output_float(shader_def, "W")
    add_output_float(shader_def, "Radius")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("VoronoiDimensions", dimensions_type_enum, "Dimensions")
    ppgLayout.AddEnumControl("Feature", voronoi_feature_enum, "Feature Output")
    ppgLayout.AddEnumControl("Distance", voronoi_metric_enum, "Distance Metric")
    ppgLayout.AddItem("normalize", "Normalize")
    ppgLayout.AddItem("W", "W")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.AddItem("Detail", "Detail")
    ppgLayout.AddItem("Roughness", "Roughness")
    ppgLayout.AddItem("Lacunarity", "Lacunarity")
    ppgLayout.AddItem("Smoothness", "Smoothness")
    ppgLayout.AddItem("Exponent", "Exponent")
    ppgLayout.AddItem("Randomness", "Randomness")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    noise_dimensions = prop.Parameters("VoronoiDimensions").Value
    feature = prop.Parameters("Feature").Value
    metric = prop.Parameters("Distance").Value
    draw_exponent = False
    if (feature == "f1" or feature == "f2" or feature == "smooth_f1") and (noise_dimensions != "1d"):
        prop.Parameters("Distance").ReadOnly = False
        if metric == "minkowski":
            draw_exponent = True
    else:
        prop.Parameters("Distance").ReadOnly = True

    if noise_dimensions == "1d" or noise_dimensions == "4d":
        prop.Parameters("W").ReadOnly = False
    else:
        prop.Parameters("W").ReadOnly = True

    if feature == "smooth_f1":
        prop.Parameters("Smoothness").ReadOnly = False
    else:
        prop.Parameters("Smoothness").ReadOnly = True

    if draw_exponent:
        prop.Parameters("Exponent").ReadOnly = False
    else:
        prop.Parameters("Exponent").ReadOnly = True

    if feature == "n_sphere_radius":
        prop.Parameters("normalize").ReadOnly = True
        prop.Parameters("Detail").ReadOnly = True
        prop.Parameters("Roughness").ReadOnly = True
        prop.Parameters("Lacunarity").ReadOnly = True
        prop.Parameters("Smoothness").ReadOnly = True
        prop.Parameters("Exponent").ReadOnly = True
    else:
        prop.Parameters("normalize").ReadOnly = False
        prop.Parameters("Detail").ReadOnly = False
        prop.Parameters("Roughness").ReadOnly = False
        prop.Parameters("Lacunarity").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def VoronoiDimensions_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Feature_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Distance_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VoronoiTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMagicTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycMagicTexture")
    return True


def CyclesShadersPlugin_CyclesMagicTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_integer(no_port_pram_options(), params, 2, "Depth", 0, 10)
    add_input_float(standard_pram_options(), params, 5.0, "Scale", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 1.0, "Distortion", 0.0, 10.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Depth", "Depth")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.AddItem("Distortion", "Distortion")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MagicTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesWaveTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycWaveTexture")
    return True


def CyclesShadersPlugin_CyclesWaveTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Bands", "Type")
    add_input_string(no_port_pram_options(), params, "diagonal", "bands_direction")
    add_input_string(no_port_pram_options(), params, "spherical", "rings_direction")
    add_input_string(no_port_pram_options(), params, "Sine", "Profile")
    add_input_float(standard_pram_options(), params, 5.0, "Scale", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.0, "Distortion", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 2.0, "Detail", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 1.0, "DetailScale", 0.0, 10.0)
    add_input_float(standard_pram_options(), params, 0.5, "DetailRoughness", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "PhaseOffset", 0.0, 10.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", wave_type_enum, "Wave Type")
    ppgLayout.AddEnumControl("bands_direction", wave_bands_direction_enum, "Bands Direction")
    ppgLayout.AddEnumControl("rings_direction", wave_rings_direction_enum, "Rings Direction")
    ppgLayout.AddEnumControl("Wave Profile", wave_profile_enum, "Profile")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.AddItem("Distortion", "Distortion")
    ppgLayout.AddItem("Detail", "Detail")
    ppgLayout.AddItem("DetailScale", "Detail Scale")
    ppgLayout.AddItem("DetailRoughness", "Detail Roughness")
    ppgLayout.AddItem("PhaseOffset", "Phase Offset")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value == "Bands":
        prop.Parameters("bands_direction").ReadOnly = False
        prop.Parameters("rings_direction").ReadOnly = True
    else:
        prop.Parameters("bands_direction").ReadOnly = True
        prop.Parameters("rings_direction").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "WaveTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesIESTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycIESTexture")
    return True


def CyclesShadersPlugin_CyclesIESTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "", "FilePath")
    add_input_float(standard_pram_options(), params, 1.0, "Strength", 0.0, 10.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")

    # Output Parameter: out
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    pathItem = ppgLayout.AddItem("FilePath", "File Path", c.siControlFilePath)
    pathItem.SetAttribute(c.siUIOpenFile, True)
    ppgLayout.AddItem("Strength", "Strength")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "IESTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesWhiteNoiseTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycWhiteNoiseTexture")
    return True


def CyclesShadersPlugin_CyclesWhiteNoiseTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "3d", "NoiseDimensions")
    add_input_point(standard_pram_options(), params, 0.0, "Vector")
    add_input_float(no_port_pram_options(), params, 0.0, "VectorX", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "VectorY", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "VectorZ", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "W", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Value")
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout

    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("NoiseDimensions", dimensions_type_enum, "Dimensions")
    ppgLayout.AddRow()
    ppgLayout.AddItem("VectorX", "X")
    ppgLayout.AddItem("VectorY", "Y")
    ppgLayout.AddItem("VectorZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.AddItem("W", "W")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    dim_value = prop.Parameters("NoiseDimensions").Value
    if dim_value == "1d":
        prop.Parameters("W").ReadOnly = False
        prop.Parameters("VectorX").ReadOnly = True
        prop.Parameters("VectorY").ReadOnly = True
        prop.Parameters("VectorZ").ReadOnly = True
    elif dim_value == "2d" or dim_value == "3d":
        prop.Parameters("W").ReadOnly = True
        prop.Parameters("VectorX").ReadOnly = False
        prop.Parameters("VectorY").ReadOnly = False
        prop.Parameters("VectorZ").ReadOnly = False
    else:
        prop.Parameters("W").ReadOnly = False
        prop.Parameters("VectorX").ReadOnly = False
        prop.Parameters("VectorY").ReadOnly = False
        prop.Parameters("VectorZ").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def NoiseDimensions_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "WhiteNoiseTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesGaborTexture_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Texture")
    in_ctxt.SetAttribute("DisplayName", "cycGaborTexture")
    return True


def CyclesShadersPlugin_CyclesGaborTexture_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "2d", "gabor_type")
    add_input_vector(standard_pram_options(), params, 0.0, "vector")
    add_input_float(standard_pram_options(), params, 5.0, "scale", 1.0, 10.0)
    add_input_float(standard_pram_options(), params, 2.0, "frequency", 0.0, 4.0)
    add_input_float(standard_pram_options(), params, 1.0, "anisotropy", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 45.0, "orientation_2d", 0.0, 360.0)

    add_input_float(no_port_pram_options(), params, 1.41, "orientation_3d_x", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.41, "orientation_3d_y", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "orientation_3d_z", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "orientation_3d")

    # Output Parameter: out
    add_output_float(shader_def, "Value")
    add_output_float(shader_def, "Phase")
    add_output_float(shader_def, "Intensity")

    # next init ppg
    ppgLayout = shader_def.PPGLayout

    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("gabor_type", gabor_type_enum, "Type")
    ppgLayout.AddItem("scale", "Scale")
    ppgLayout.AddItem("frequency", "Frequency")
    ppgLayout.AddItem("anisotropy", "Anisotropy")
    ppgLayout.AddItem("orientation_2d", "Orientation 2D")
    ppgLayout.AddGroup("Orientation 3D")
    ppgLayout.AddRow()
    ppgLayout.AddItem("orientation_3d_x", "X")
    ppgLayout.AddItem("orientation_3d_y", "Y")
    ppgLayout.AddItem("orientation_3d_z", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("gabor_type").Value
    if type_value == "2d":
        prop.Parameters("orientation_2d").ReadOnly = False
        prop.Parameters("orientation_3d_x").ReadOnly = True
        prop.Parameters("orientation_3d_y").ReadOnly = True
        prop.Parameters("orientation_3d_z").ReadOnly = True
    else:
        prop.Parameters("orientation_2d").ReadOnly = True
        prop.Parameters("orientation_3d_x").ReadOnly = False
        prop.Parameters("orientation_3d_y").ReadOnly = False
        prop.Parameters("orientation_3d_z").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def gabor_type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "GaborTexture"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesNormal_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycNormal")
    return True


def CyclesShadersPlugin_CyclesNormal_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(no_port_pram_options(), params, 0, "DirectionX")
    add_input_float(no_port_pram_options(), params, 0, "DirectionY")
    add_input_float(no_port_pram_options(), params, 1, "DirectionZ")
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")
    add_input_float(no_port_pram_options(), params, 0, "NormalX")
    add_input_float(no_port_pram_options(), params, 0, "NormalY")
    add_input_float(no_port_pram_options(), params, 0, "NormalZ")

    # Output Parameter: out
    add_output_normal(shader_def, "Normal")
    add_output_float(shader_def, "Dot")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Direction")
    ppgLayout.AddRow()
    ppgLayout.AddItem("DirectionX", "X")
    ppgLayout.AddItem("DirectionY", "Y")
    ppgLayout.AddItem("DirectionZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("Normal")
    ppgLayout.AddRow()
    ppgLayout.AddItem("NormalX", "X")
    ppgLayout.AddItem("NormalY", "Y")
    ppgLayout.AddItem("NormalZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    # ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Normal"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesBump_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycBump")
    return True


def CyclesShadersPlugin_CyclesBump_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, False, "Invert")
    add_input_float(standard_pram_options(), params, 0.0, "Height", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Strength", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.1, "Distance", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.1, "FilterWidth", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_normal(shader_def, "Normal")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Invert", "Invert")
    ppgLayout.AddItem("Strength", "Strength")
    ppgLayout.AddItem("Distance", "Distance")
    ppgLayout.AddItem("FilterWidth", "Filter Width")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Bump"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMapping_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycMapping")
    return True


def CyclesShadersPlugin_CyclesMapping_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Point", "Type")
    add_input_point(standard_pram_options(), params, 0.0, "Vector")
    add_input_vector(standard_pram_options(), params, 0.0, "MapLocation")
    add_input_float(no_port_pram_options(), params, 0, "TranslationX", 0, 10)
    add_input_float(no_port_pram_options(), params, 0, "TranslationY", 0, 10)
    add_input_float(no_port_pram_options(), params, 0, "TranslationZ", 0, 10)
    add_input_vector(standard_pram_options(), params, 0.0, "MapRotation")
    add_input_float(no_port_pram_options(), params, 0.0, "RotationX", 0.0, 360.0)
    add_input_float(no_port_pram_options(), params, 0.0, "RotationY", 0.0, 360.0)
    add_input_float(no_port_pram_options(), params, 0.0, "RotationZ", 0.0, 360.0)
    add_input_vector(standard_pram_options(), params, 0.0, "MapScale")
    add_input_float(no_port_pram_options(), params, 1, "ScaleX", 0, 5)
    add_input_float(no_port_pram_options(), params, 1, "ScaleY", 0, 5)
    add_input_float(no_port_pram_options(), params, 1, "ScaleZ", 0, 5)

    # Output Parameter: out
    add_output_point(shader_def, "Vector")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", mapping_type_enum, "Type")
    ppgLayout.AddGroup("Location")
    ppgLayout.AddRow()
    ppgLayout.AddItem("TranslationX", "X")
    ppgLayout.AddItem("TranslationY", "Y")
    ppgLayout.AddItem("TranslationZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("Rotation")
    ppgLayout.AddRow()
    ppgLayout.AddItem("RotationX", "X")
    ppgLayout.AddItem("RotationY", "Y")
    ppgLayout.AddItem("RotationZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("Scale")
    ppgLayout.AddRow()
    ppgLayout.AddItem("ScaleX", "X")
    ppgLayout.AddItem("ScaleY", "Y")
    ppgLayout.AddItem("ScaleZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''from win32com.client import constants as c\n''' + "mapping_type_enum = " + str(mapping_type_enum) + "\n" + '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value == "Point" or type_value == "Texture":
        prop.Parameters("TranslationX").ReadOnly = False
        prop.Parameters("TranslationY").ReadOnly = False
        prop.Parameters("TranslationZ").ReadOnly = False
    else:
        prop.Parameters("TranslationX").ReadOnly = True
        prop.Parameters("TranslationY").ReadOnly = True
        prop.Parameters("TranslationZ").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Mapping"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesNormalMap_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycNormalMap")
    return True


def CyclesShadersPlugin_CyclesNormalMap_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Tangent", "Space")
    add_input_string(no_port_pram_options(), params, "", "Attribute")
    add_input_float(standard_pram_options(), params, 1.0, "Strength", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_normal(shader_def, "Normal")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Space", noraml_map_space_enum, "Space")
    # ppgLayout.AddItem("Attribute", "Attribute")  # not implemented
    ppgLayout.AddItem("Strength", "Strength")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "NormalMap"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVectorTransform_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycVectorTransform")
    return True


def CyclesShadersPlugin_CyclesVectorTransform_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Vector", "Type")
    add_input_string(no_port_pram_options(), params, "world", "ConvertFrom")
    add_input_string(no_port_pram_options(), params, "object", "ConvertTo")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")
    add_input_float(no_port_pram_options(), params, 0, "VectorX")
    add_input_float(no_port_pram_options(), params, 0, "VectorY")
    add_input_float(no_port_pram_options(), params, 0, "VectorZ")

    # Output Parameter: out
    add_output_vector(shader_def, "Vector")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", vector_transform_type_enum, "Type")
    ppgLayout.AddEnumControl("ConvertFrom", vector_transform_convert_enum, "Convert From")
    ppgLayout.AddEnumControl("ConvertTo", vector_transform_convert_enum, "Convert To")
    ppgLayout.AddGroup("Vector")
    ppgLayout.AddRow()
    ppgLayout.AddItem("VectorX", "X")
    ppgLayout.AddItem("VectorY", "Y")
    ppgLayout.AddItem("VectorZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VectorTransform"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVectorRotate_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycVectorRotate")
    return True


def CyclesShadersPlugin_CyclesVectorRotate_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "axis_angle", "Type")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")
    add_input_boolean(no_port_pram_options(), params, False, "Invert")
    add_input_vector(standard_pram_options(), params, 0.0, "Center")
    add_input_float(no_port_pram_options(), params, 0, "CenterX")
    add_input_float(no_port_pram_options(), params, 0, "CenterY")
    add_input_float(no_port_pram_options(), params, 0, "CenterZ")
    add_input_vector(standard_pram_options(), params, 0.0, "Axis")
    add_input_float(no_port_pram_options(), params, 0, "AxisX")
    add_input_float(no_port_pram_options(), params, 0, "AxisY")
    add_input_float(no_port_pram_options(), params, 0, "AxisZ")
    add_input_vector(standard_pram_options(), params, 0.0, "VectorRotation")
    add_input_float(no_port_pram_options(), params, 0, "VectorRotationX")
    add_input_float(no_port_pram_options(), params, 0, "VectorRotationY")
    add_input_float(no_port_pram_options(), params, 0, "VectorRotationZ")
    add_input_float(standard_pram_options(), params, 0, "Angle", 0.0, 360.0)

    # Output Parameter: out
    add_output_vector(shader_def, "Vector")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", vector_rotate_type, "Type")
    ppgLayout.AddItem("Invert", "Invert")
    ppgLayout.AddGroup("Center")
    ppgLayout.AddRow()
    ppgLayout.AddItem("CenterX", "X")
    ppgLayout.AddItem("CenterY", "Y")
    ppgLayout.AddItem("CenterZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Axis")
    ppgLayout.AddRow()
    ppgLayout.AddItem("AxisX", "X")
    ppgLayout.AddItem("AxisY", "Y")
    ppgLayout.AddItem("AxisZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    
    ppgLayout.AddItem("Angle", "Angle")
    
    ppgLayout.AddGroup("VectorRotation")
    ppgLayout.AddRow()
    ppgLayout.AddItem("VectorRotationX", "X")
    ppgLayout.AddItem("VectorRotationY", "Y")
    ppgLayout.AddItem("VectorRotationZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value == "axis_angle":
        prop.Parameters("AxisX").ReadOnly = False
        prop.Parameters("AxisY").ReadOnly = False
        prop.Parameters("AxisZ").ReadOnly = False
    else:
        prop.Parameters("AxisX").ReadOnly = True
        prop.Parameters("AxisY").ReadOnly = True
        prop.Parameters("AxisZ").ReadOnly = True

    if type_value in ["axis_angle", "x_axis", "y_axis", "z_axis"]:
        prop.Parameters("Angle").ReadOnly = False
    else:
        prop.Parameters("Angle").ReadOnly = True

    if type_value in ["euler"]:
        prop.Parameters("VectorRotationX").ReadOnly = False
        prop.Parameters("VectorRotationY").ReadOnly = False
        prop.Parameters("VectorRotationZ").ReadOnly = False
    else:
        prop.Parameters("VectorRotationX").ReadOnly = True
        prop.Parameters("VectorRotationY").ReadOnly = True
        prop.Parameters("VectorRotationZ").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VectorRotate"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVectorCurves_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycVectorCurves")
    return True


def CyclesShadersPlugin_CyclesVectorCurves_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 1.0, "Fac", 0.0, 2.0)
    add_input_vector(standard_pram_options(), params, 0.5, "Vector", 0.0, 1.0)
    add_input_fcurve(no_port_pram_options(), params, "xCurve")
    add_input_fcurve(no_port_pram_options(), params, "yCurve")
    add_input_fcurve(no_port_pram_options(), params, "zCurve")

    # Output Parameter: out
    add_output_vector(shader_def, "Vector")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("xCurve", "X Curve")
    ppgLayout.AddItem("yCurve", "Y Curve")
    ppgLayout.AddItem("zCurve", "Z Curve")
    ppgLayout.AddItem("Vector", "Vector")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Curves"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesDisplacement_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycDisplacement")
    return True


def CyclesShadersPlugin_CyclesDisplacement_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "object", "Space")
    add_input_float(standard_pram_options(), params, 0.0, "Height", 0.0, 5.0)
    add_input_float(standard_pram_options(), params, 0.5, "Midlevel", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Scale", 0.0, 2.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_normal(shader_def, "Displacement")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Space", displacement_space_enum, "Space")
    ppgLayout.AddItem("Height", "Height")
    ppgLayout.AddItem("Midlevel", "Midlevel")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Displacement"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVectorDisplacement_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Vector")
    in_ctxt.SetAttribute("DisplayName", "cycVectorDisplacement")
    return True


def CyclesShadersPlugin_CyclesVectorDisplacement_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "object", "Space")
    add_input_color(standard_pram_options(), params, 0.0, "Vector")
    add_input_float(standard_pram_options(), params, 0.5, "Midlevel", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Scale", 0.0, 2.0)

    # Output Parameter: out
    add_output_normal(shader_def, "Displacement")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Space", vector_displacement_space_enum, "Space")
    ppgLayout.AddItem("Midlevel", "Midlevel")
    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VectorDisplacement"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesGeometry_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycGeometry")
    return True


def CyclesShadersPlugin_CyclesGeometry_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_point(shader_def, "Position")
    add_output_normal(shader_def, "Normal")
    add_output_normal(shader_def, "Tangent")
    add_output_normal(shader_def, "TrueNormal")
    add_output_vector(shader_def, "Incoming")
    add_output_point(shader_def, "Parametric")
    add_output_float(shader_def, "Backfacing")
    add_output_float(shader_def, "Pointiness")
    add_output_float(shader_def, "RandomPerIsland")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Geometry"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesTextureCoordinate_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycTextureCoordinate")
    return True


def CyclesShadersPlugin_CyclesTextureCoordinate_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_point(shader_def, "Generated")
    add_output_normal(shader_def, "Normal")
    add_output_point(shader_def, "UV")
    add_output_point(shader_def, "Object")
    add_output_point(shader_def, "Camera")
    add_output_point(shader_def, "Window")
    add_output_normal(shader_def, "Reflection")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "TextureCoordinate"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesLightPath_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycLightPath")
    return True


def CyclesShadersPlugin_CyclesLightPath_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_float(shader_def, "IsCameraRay")
    add_output_float(shader_def, "IsShadowRay")
    add_output_float(shader_def, "IsDiffuseRay")
    add_output_float(shader_def, "IsGlossyRay")
    add_output_float(shader_def, "IsSingularRay")
    add_output_float(shader_def, "IsReflectionRay")
    add_output_float(shader_def, "IsTransmissionRay")
    add_output_float(shader_def, "outIsVolumeScatterRay")
    add_output_float(shader_def, "RayLength")
    add_output_float(shader_def, "RayDepth")
    add_output_float(shader_def, "DiffuseDepth")
    add_output_float(shader_def, "GlossyDepth")
    add_output_float(shader_def, "TransparentDepth")
    add_output_float(shader_def, "TransmissionDepth")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "LightPath"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesObjectInfo_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycObjectInfo")
    return True


def CyclesShadersPlugin_CyclesObjectInfo_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_vector(shader_def, "Location")
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Alpha")
    add_output_float(shader_def, "ObjectIndex")
    add_output_float(shader_def, "MaterialIndex")
    add_output_float(shader_def, "Random")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ObjectInfo"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVolumeInfo_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycVolumeInfo")
    return True


def CyclesShadersPlugin_CyclesVolumeInfo_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Density")
    add_output_float(shader_def, "Flame")
    add_output_float(shader_def, "Temperature")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VolumeInfo"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesPointInfo_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycPointInfo")
    return True


def CyclesShadersPlugin_CyclesPointInfo_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_vector(shader_def, "Position")
    add_output_float(shader_def, "Radius")
    add_output_float(shader_def, "Random")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "PointInfo"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesParticleInfo_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycParticleInfo")
    return True


def CyclesShadersPlugin_CyclesParticleInfo_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_float(shader_def, "Index")
    add_output_float(shader_def, "Random")
    add_output_float(shader_def, "Age")
    add_output_float(shader_def, "Lifetime")
    add_output_point(shader_def, "Location")
    add_output_float(shader_def, "Size")
    add_output_vector(shader_def, "Velocity")
    add_output_vector(shader_def, "AngularVelocity")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ParticleInfo"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesHairInfo_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycHairInfo")
    return True


def CyclesShadersPlugin_CyclesHairInfo_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_float(shader_def, "IsStrand")
    add_output_float(shader_def, "Intercept")
    add_output_float(shader_def, "Length")
    add_output_float(shader_def, "Thickness")
    add_output_normal(shader_def, "TangentNormal")
    add_output_float(shader_def, "Random")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "HairInfo"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesValue_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycValue")
    return True


def CyclesShadersPlugin_CyclesValue_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(no_port_pram_options(), params, 0.0, "ValueIn", 0.0, 5.0)

    # Output Parameter: out
    add_output_float(shader_def, "Value")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("ValueIn", "Value")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Value"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesColor_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycColor")
    return True


def CyclesShadersPlugin_CyclesColor_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(no_port_pram_options(), params, 0.0, "ColorIn")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("ColorIn", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Color"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesAttribute_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycAttribute")
    return True


def CyclesShadersPlugin_CyclesAttribute_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "", "Attribute")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_vector(shader_def, "Vector")
    add_output_float(shader_def, "Fac")
    add_output_float(shader_def, "Alpha")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Attribute", "Attribute")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Attribute"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesOutputColorAOV_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Output")
    in_ctxt.SetAttribute("DisplayName", "cycOutputColorAOV")
    return True


def CyclesShadersPlugin_CyclesOutputColorAOV_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "", "aov_name")
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("aov_name", "AOV Name")
    ppgLayout.AddColor("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "OutputColorAOV"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesOutputValueAOV_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Output")
    in_ctxt.SetAttribute("DisplayName", "cycOutputValueAOV")
    return True


def CyclesShadersPlugin_CyclesOutputValueAOV_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "", "aov_name")
    add_input_float(standard_pram_options(), params, 0.0, "Value", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Value")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("aov_name", "AOV Name")
    ppgLayout.AddItem("Value", "Value")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "OutputValueAOV"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVertexColor_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycVertexColor")
    return True


def CyclesShadersPlugin_CyclesVertexColor_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "", "LayerName")

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Alpha")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("LayerName", "Layer Name")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VertexColor"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesBevel_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycBevel")
    return True


def CyclesShadersPlugin_CyclesBevel_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_integer(no_port_pram_options(), params, 4, "Samples", 0, 16)
    add_input_float(standard_pram_options(), params, 0.05, "Radius", 0, 0.1)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_normal(shader_def, "Normal")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Samples", "Samples")
    ppgLayout.AddItem("Radius", "Radius")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Bevel"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesUVMap_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycUVMap")
    return True


def CyclesShadersPlugin_CyclesUVMap_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "", "Attribute")

    # Output Parameter: out
    add_output_point(shader_def, "UV")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Attribute", "Attribute")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "UVMap"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesCamera_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycCamera")
    return True


def CyclesShadersPlugin_CyclesCamera_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs

    # Output Parameter: out
    add_output_vector(shader_def, "ViewVector")
    add_output_float(shader_def, "ViewZDepth")
    add_output_float(shader_def, "ViewDistance")

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Camera"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesFresnel_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycFresnel")
    return True


def CyclesShadersPlugin_CyclesFresnel_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 1.45, "IOR", 0.0, 5.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("IOR", "IOR")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Fresnel"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesLayerWeight_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycLayerWeight")
    return True


def CyclesShadersPlugin_CyclesLayerWeight_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 0.5, "Blend", 0.0, 1.0)
    add_input_normal(standard_pram_options(), params, 0.0, "Normal")

    # Output Parameter: out
    add_output_float(shader_def, "Fresnel")
    add_output_float(shader_def, "Facing")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Blend", "Blend")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "LayerWeight"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesWireframe_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycWireframe")
    return True


def CyclesShadersPlugin_CyclesWireframe_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, False, "UsePixelSize")
    add_input_float(standard_pram_options(), params, 0.01, "Size", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Fac")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("UsePixelSize", "Use Pixel Size")
    ppgLayout.AddItem("Size", "Size")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Wireframe"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesTangent_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Input")
    in_ctxt.SetAttribute("DisplayName", "cycTangent")
    return True


def CyclesShadersPlugin_CyclesTangent_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Radial", "DirectionType")
    add_input_string(no_port_pram_options(), params, "X", "Axis")
    add_input_string(no_port_pram_options(), params, "", "Attribute")

    # Output Parameter: out
    add_output_normal(shader_def, "Tangent")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("DirectionType", tangent_direction_enum, "Direction Type")
    ppgLayout.AddEnumControl("Axis", tangent_axis_enum, "Axis")
    ppgLayout.AddItem("Attribute", "Attribute")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    dir_value = prop.Parameters("DirectionType").Value
    if dir_value == "Radial":
        prop.Parameters("Axis").ReadOnly = False
        prop.Parameters("Attribute").ReadOnly = True
    else:
        prop.Parameters("Axis").ReadOnly = True
        prop.Parameters("Attribute").ReadOnly = False

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def DirectionType_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Tangent"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesLightFalloff_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycLightFalloff")
    return True


def CyclesShadersPlugin_CyclesLightFalloff_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 100.0, "Strength", 0.0, 256.0)
    add_input_float(standard_pram_options(), params, 0.0, "Smooth", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Quadratic")
    add_output_float(shader_def, "Linear")
    add_output_float(shader_def, "Constant")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Strength", "Strength")
    ppgLayout.AddItem("Smooth", "Smooth")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "LightFalloff"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesInvert_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycInvert")
    return True


def CyclesShadersPlugin_CyclesInvert_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 1.0, "Fac", 0.0, 10.0)
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Invert"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMixRGB_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycMixRGB")
    return True


def CyclesShadersPlugin_CyclesMixRGB_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Mix", "Type")
    add_input_boolean(no_port_pram_options(), params, False, "UseClamp")
    add_input_float(standard_pram_options(), params, 0.5, "Fac", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.2, "Color1")
    add_input_color(standard_pram_options(), params, 0.8, "Color2")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", mix_type_enum, "Type")
    ppgLayout.AddItem("UseClamp", "Use Clamp")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("Color1", "Color 1")
    ppgLayout.AddItem("Color2", "Color 2")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MixRGB"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMixColor_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycMixColor")
    return True


def CyclesShadersPlugin_CyclesMixColor_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "Mix", "Type")
    add_input_boolean(no_port_pram_options(), params, True, "UseClamp")
    add_input_boolean(no_port_pram_options(), params, False, "UseClampResult")
    add_input_float(standard_pram_options(), params, 0.5, "Factor", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.0, "A")
    add_input_color(standard_pram_options(), params, 0.0, "B")

    # Output Parameter: out
    add_output_color(shader_def, "Result")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", mix_type_enum, "Type")
    ppgLayout.AddItem("UseClampResult", "Clamp Result")
    ppgLayout.AddItem("UseClamp", "Clamp Factor")
    ppgLayout.AddItem("Factor", "Factor")
    ppgLayout.AddItem("A", "A")
    ppgLayout.AddItem("B", "B")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MixColor"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMixFloat_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycMixFloat")
    return True


def CyclesShadersPlugin_CyclesMixFloat_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, False, "UseClamp")
    add_input_float(standard_pram_options(), params, 0.5, "Factor", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "A", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "B", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Result")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("UseClamp", "Clamp Factor")
    ppgLayout.AddItem("Factor", "Factor")
    ppgLayout.AddItem("A", "A")
    ppgLayout.AddItem("B", "B")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MixFloat"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMixVector_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycMixVector")
    return True


def CyclesShadersPlugin_CyclesMixVector_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, False, "UseClamp")
    add_input_float(standard_pram_options(), params, 0.5, "Factor", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "A")
    add_input_vector(standard_pram_options(), params, 0.0, "B")

    # Output Parameter: out
    add_output_vector(shader_def, "Result")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("UseClamp", "Use Clamp")
    ppgLayout.AddItem("Factor", "Factor")
    ppgLayout.AddItem("A", "A")
    ppgLayout.AddItem("B", "B")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MixVector"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMixVectorNonUniform_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycMixVectorNonUniform")
    return True


def CyclesShadersPlugin_CyclesMixVectorNonUniform_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, False, "UseClamp")
    add_input_vector(standard_pram_options(), params, 0.5, "Factor")
    add_input_vector(standard_pram_options(), params, 0.0, "A")
    add_input_vector(standard_pram_options(), params, 0.0, "B")

    # Output Parameter: out
    add_output_vector(shader_def, "Result")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("UseClamp", "Use Clamp")
    ppgLayout.AddItem("Factor", "Factor")
    ppgLayout.AddItem("A", "A")
    ppgLayout.AddItem("B", "B")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MixVectorNonUniform"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesGamma_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycGamma")
    return True


def CyclesShadersPlugin_CyclesGamma_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.0, "Color")
    add_input_float(standard_pram_options(), params, 1.0, "Gamma", 0.0, 5.0)

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Gamma", "Gamma")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Gamma"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesBrightContrast_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycBrightContrast")
    return True


def CyclesShadersPlugin_CyclesBrightContrast_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.0, "Color")
    add_input_float(standard_pram_options(), params, 0.0, "Bright", 0.0, 5.0)
    add_input_float(standard_pram_options(), params, 0.0, "Contrast", 0.0, 5.0)

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.AddItem("Bright", "Bright")
    ppgLayout.AddItem("Contrast", "Contrast")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "BrightContrast"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesHSV_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycHSV")
    return True


def CyclesShadersPlugin_CyclesHSV_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 0.5, "Hue", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Saturation", 0.0, 2.0)
    add_input_float(standard_pram_options(), params, 1.0, "Value", 0.0, 2.0)
    add_input_float(standard_pram_options(), params, 1.0, "Fac", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Hue", "Hue")
    ppgLayout.AddItem("Saturation", "Saturation")
    ppgLayout.AddItem("Value", "Value")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "HSV"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesRGBCurves_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycRGBCurves")
    return True


def CyclesShadersPlugin_CyclesRGBCurves_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_fcurve(no_port_pram_options(), params, "rCurve")
    add_input_fcurve(no_port_pram_options(), params, "gCurve")
    add_input_fcurve(no_port_pram_options(), params, "bCurve")
    add_input_float(standard_pram_options(), params, 1.0, "Fac", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("rCurve", "R Curve")
    ppgLayout.AddItem("gCurve", "G Curve")
    ppgLayout.AddItem("bCurve", "B Curve")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "RGBCurves"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesColorCurves_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Color")
    in_ctxt.SetAttribute("DisplayName", "cycColorCurves")
    return True


def CyclesShadersPlugin_CyclesColorCurves_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_fcurve(no_port_pram_options(), params, "Curve")
    add_input_float(standard_pram_options(), params, 1.0, "Fac", 0.0, 1.0)
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Curve", "Curve")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ColorCurves"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesWavelength_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycWavelength")
    return True


def CyclesShadersPlugin_CyclesWavelength_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 500.0, "Wavelength", 0.0, 1000.0)

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Wavelength", "Wavelength")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Wavelength"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesBlackbody_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycBlackbody")
    return True


def CyclesShadersPlugin_CyclesBlackbody_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 1500.0, "Temperature", 0.0, 2400.0)

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Temperature", "Temperature")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Blackbody"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMixClosure_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Processing")
    in_ctxt.SetAttribute("DisplayName", "cycMixClosure")
    return True


def CyclesShadersPlugin_CyclesMixClosure_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    # shader_def.AddShaderFamily(c.siShaderFamilyTexture)
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_closure(standard_pram_options(), params, 0.0, "Closure1")
    add_input_closure(standard_pram_options(), params, 0.0, "Closure2")
    add_input_float(standard_pram_options(), params, 0.5, "Fac", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shader_def, "Closure")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MixClosure"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesAddClosure_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Processing")
    in_ctxt.SetAttribute("DisplayName", "cycAddClosure")
    return True


def CyclesShadersPlugin_CyclesAddClosure_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    # shader_def.AddShaderFamily(c.siShaderFamilyTexture)
    shader_def.AddShaderFamily(c.siShaderFamilyVolume)
    shader_def.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_closure(standard_pram_options(), params, 0.0, "Closure1")
    add_input_closure(standard_pram_options(), params, 0.0, "Closure2")

    # Output Parameter: out
    add_output_closure(shader_def, "Closure")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "AddClosure"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesCombineColor_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycCombineColor")
    return True


def CyclesShadersPlugin_CyclesCombineColor_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "rgb", "mode")
    add_input_float(standard_pram_options(), params, 0.0, "A", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "B", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "C", 0.0, 1.0)

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("mode", combine_color_mode_enum, "Mode")
    ppgLayout.AddItem("A", "A")
    ppgLayout.AddItem("B", "B")
    ppgLayout.AddItem("C", "C")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "CombineColor"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesCombineRGB_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycCombineRGB")
    return True


def CyclesShadersPlugin_CyclesCombineRGB_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 0.0, "R", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "G", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "B", 0.0, 1.0)

    # Output Parameter: out
    add_output_color(shader_def, "Image")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("R", "R")
    ppgLayout.AddItem("G", "G")
    ppgLayout.AddItem("B", "B")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "CombineRGB"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesCombineHSV_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycCombineHSV")
    return True


def CyclesShadersPlugin_CyclesCombineHSV_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 0.0, "H", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "S", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "V", 0.0, 1.0)

    # Output Parameter: out
    add_output_color(shader_def, "Color")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("H", "H")
    ppgLayout.AddItem("S", "S")
    ppgLayout.AddItem("V", "V")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "CombineHSV"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesCombineXYZ_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycCombineXYZ")
    return True


def CyclesShadersPlugin_CyclesCombineXYZ_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_float(standard_pram_options(), params, 0.0, "X", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Y", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Z", 0.0, 1.0)

    # Output Parameter: out
    add_output_vector(shader_def, "Vector")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("X", "X")
    ppgLayout.AddItem("Y", "Y")
    ppgLayout.AddItem("Z", "Z")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "CombineXYZ"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSeparateColor_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycSeparateColor")
    return True


def CyclesShadersPlugin_CyclesSeparateColor_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "rgb", "mode")
    add_input_color(standard_pram_options(), params, [0.8, 0.8, 0.8], "Color")

    # Output Parameter: out
    add_output_float(shader_def, "A")
    add_output_float(shader_def, "B")
    add_output_float(shader_def, "C")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("mode", combine_color_mode_enum, "Mode")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SeparateColor"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSeparateRGB_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycSeparateRGB")
    return True


def CyclesShadersPlugin_CyclesSeparateRGB_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.0, "Image")

    # Output Parameter: out
    add_output_float(shader_def, "R")
    add_output_float(shader_def, "G")
    add_output_float(shader_def, "B")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Image", "Image")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SeparateRGB"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSeparateHSV_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycSeparateHSV")
    return True


def CyclesShadersPlugin_CyclesSeparateHSV_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_float(shader_def, "H")
    add_output_float(shader_def, "S")
    add_output_float(shader_def, "V")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SeparateHSV"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesSeparateXYZ_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycSeparateXYZ")
    return True


def CyclesShadersPlugin_CyclesSeparateXYZ_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")
    add_input_float(no_port_pram_options(), params, 0, "VectorX")
    add_input_float(no_port_pram_options(), params, 0, "VectorY")
    add_input_float(no_port_pram_options(), params, 0, "VectorZ")

    # Output Parameter: out
    add_output_float(shader_def, "X")
    add_output_float(shader_def, "Y")
    add_output_float(shader_def, "Z")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Vector")
    ppgLayout.AddRow()
    ppgLayout.AddItem("VectorX", "X")
    ppgLayout.AddItem("VectorY", "Y")
    ppgLayout.AddItem("VectorZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "SeparateXYZ"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMath_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycMath")
    return True


def CyclesShadersPlugin_CyclesMath_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "add", "Type")
    add_input_boolean(no_port_pram_options(), params, False, "UseClamp")
    add_input_float(standard_pram_options(), params, 0.0, "Value1", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Value2", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Value3", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Value")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", math_type_enum, "Type")
    ppgLayout.AddItem("UseClamp", "Use Clamp")
    ppgLayout.AddItem("Value1", "Value 1")
    ppgLayout.AddItem("Value2", "Value 2")
    ppgLayout.AddItem("Value3", "Value 3")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value in ["round", "floor", "ceil", "absolute", "sqrt", "arctangent", "sine", "cosine", "tangent", "arcsine", "arccosine", "fract", "inv_sqrt", "sign", "exponent", "radians", "degrees", "sinh", "cosh", "tanh", "trunc"]:
        prop.Parameters("Value2").ReadOnly = True
        prop.Parameters("Value3").ReadOnly = True
    else:
        prop.Parameters("Value2").ReadOnly = False
        if type_value in ["wrap", "compare", "multiply_add", "smooth_min", "smooth_max"]:
            prop.Parameters("Value3").ReadOnly = False
        else:
            prop.Parameters("Value3").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Math"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVectorMath_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycVectorMath")
    return True


def CyclesShadersPlugin_CyclesVectorMath_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "add", "Type")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector1")
    add_input_float(no_port_pram_options(), params, 0, "Vector1X", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0, "Vector1Y", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0, "Vector1Z", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector2")
    add_input_float(no_port_pram_options(), params, 0, "Vector2X", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0, "Vector2Y", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0, "Vector2Z", 0.0, 1.0)
    add_input_vector(standard_pram_options(), params, 0.0, "Vector3")
    add_input_float(no_port_pram_options(), params, 0, "Vector3X", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0, "Vector3Y", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0, "Vector3Z", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Scale", 0.0, 4.0)

    # Output Parameter: out
    add_output_vector(shader_def, "Vector")
    add_output_float(shader_def, "Value")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", vector_math_type_enum, "Type")
    ppgLayout.AddGroup("Vector 1")
    ppgLayout.AddRow()
    ppgLayout.AddItem("Vector1X", "X")
    ppgLayout.AddItem("Vector1Y", "Y")
    ppgLayout.AddItem("Vector1Z", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
        
    ppgLayout.AddGroup("Vector 2")
    ppgLayout.AddRow()
    ppgLayout.AddItem("Vector2X", "X")
    ppgLayout.AddItem("Vector2Y", "Y")
    ppgLayout.AddItem("Vector2Z", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Vector 3")
    ppgLayout.AddRow()
    ppgLayout.AddItem("Vector3X", "X")
    ppgLayout.AddItem("Vector3Y", "Y")
    ppgLayout.AddItem("Vector3Z", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()

    ppgLayout.AddItem("Scale", "Scale")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value not in ["length", "absolute", "fraction", "ceil", "floor", "normalize", "scale", "sine", "cosine", "tangent"]:
        prop.Parameters("Vector2X").ReadOnly = False
        prop.Parameters("Vector2Y").ReadOnly = False
        prop.Parameters("Vector2Z").ReadOnly = False
        if type_value in ["wrap", "faceforward", "multiply_add"]:
            prop.Parameters("Vector3X").ReadOnly = False
            prop.Parameters("Vector3Y").ReadOnly = False
            prop.Parameters("Vector3Z").ReadOnly = False
        else:
            prop.Parameters("Vector3X").ReadOnly = True
            prop.Parameters("Vector3Y").ReadOnly = True
            prop.Parameters("Vector3Z").ReadOnly = True
    else:
        prop.Parameters("Vector2X").ReadOnly = True
        prop.Parameters("Vector2Y").ReadOnly = True
        prop.Parameters("Vector2Z").ReadOnly = True
        prop.Parameters("Vector3X").ReadOnly = True
        prop.Parameters("Vector3Y").ReadOnly = True
        prop.Parameters("Vector3Z").ReadOnly = True
    if type_value in ["scale", "refract"]:
        prop.Parameters("Scale").ReadOnly = False
    else:
        prop.Parameters("Scale").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VectorMath"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesColorRamp_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycColorRamp")
    return True


def CyclesShadersPlugin_CyclesColorRamp_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_gradient(no_port_pram_options(), params, "Gradient")
    add_input_float(standard_pram_options(), params, 0.5, "Fac", 0, 1)

    # Output Parameter: out
    add_output_color(shader_def, "Color")
    add_output_float(shader_def, "Alpha")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Gradient", "Gradient")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "ColorRamp"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesMapRange_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycMapRange")
    return True


def CyclesShadersPlugin_CyclesMapRange_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, True, "Clamp")
    add_input_string(no_port_pram_options(), params, "linear", "Type")
    add_input_float(standard_pram_options(), params, 1.0, "Value", 0.0, 2.0)
    add_input_float(standard_pram_options(), params, 0.0, "FromMin", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "FromMax", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "ToMin", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "ToMax", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 4.0, "Steps", 0.0, 12.0)

    # Output Parameter: out
    add_output_float(shader_def, "Result")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", maprange_interpolation_type, "Type")
    ppgLayout.AddItem("Clamp", "Clamp")
    ppgLayout.AddItem("Value", "Value")
    ppgLayout.AddItem("FromMin", "From Min")
    ppgLayout.AddItem("FromMax", "From Max")
    ppgLayout.AddItem("ToMin", "To Min")
    ppgLayout.AddItem("ToMax", "To Max")
    ppgLayout.AddItem("Steps", "Steps")
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value in ["linear", "stepped"]:
        prop.Parameters("Clamp").ReadOnly = False
    else:
        prop.Parameters("Clamp").ReadOnly = True

    if type_value in ["stepped"]:
        prop.Parameters("Steps").ReadOnly = False
    else:
        prop.Parameters("Steps").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "MapRange"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesVectorMapRange_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycVectorMapRange")
    return True


def CyclesShadersPlugin_CyclesVectorMapRange_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_boolean(no_port_pram_options(), params, True, "Clamp")
    add_input_string(no_port_pram_options(), params, "linear", "Type")
    add_input_vector(standard_pram_options(), params, 0.0, "Vector")  # these parameters invisible in UI
    add_input_vector(standard_pram_options(), params, 0.0, "FromMinVector")
    add_input_vector(standard_pram_options(), params, 0.0, "FromMaxVector")
    add_input_vector(standard_pram_options(), params, 0.0, "ToMinVector")
    add_input_vector(standard_pram_options(), params, 0.0, "ToMaxVector")
    add_input_vector(standard_pram_options(), params, 0.0, "StepsVector")
    add_input_float(no_port_pram_options(), params, 0.0, "FromMinX", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "FromMinY", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "FromMinZ", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.0, "FromMaxX", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.0, "FromMaxY", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.0, "FromMaxZ", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "ToMinX", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "ToMinY", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 0.0, "ToMinZ", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.0, "ToMaxX", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.0, "ToMaxY", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 1.0, "ToMaxZ", 0.0, 1.0)
    add_input_float(no_port_pram_options(), params, 4.0, "StepsX", 0.0, 12.0)
    add_input_float(no_port_pram_options(), params, 4.0, "StepsY", 0.0, 12.0)
    add_input_float(no_port_pram_options(), params, 4.0, "StepsZ", 0.0, 12.0)

    # Output Parameter: out
    add_output_vector(shader_def, "Vector")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", maprange_interpolation_type, "Type")
    ppgLayout.AddItem("Clamp", "Clamp")
    ppgLayout.AddGroup("From Min")
    ppgLayout.AddRow()
    ppgLayout.AddItem("FromMinX", "X")
    ppgLayout.AddItem("FromMinY", "Y")
    ppgLayout.AddItem("FromMinZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("From Max")
    ppgLayout.AddRow()
    ppgLayout.AddItem("FromMaxX", "X")
    ppgLayout.AddItem("FromMaxY", "Y")
    ppgLayout.AddItem("FromMaxZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("To Min")
    ppgLayout.AddRow()
    ppgLayout.AddItem("ToMinX", "X")
    ppgLayout.AddItem("ToMinY", "Y")
    ppgLayout.AddItem("ToMinZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("To Max")
    ppgLayout.AddRow()
    ppgLayout.AddItem("ToMaxX", "X")
    ppgLayout.AddItem("ToMaxY", "Y")
    ppgLayout.AddItem("ToMaxZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.AddGroup("Steps")
    ppgLayout.AddRow()
    ppgLayout.AddItem("StepsX", "X")
    ppgLayout.AddItem("StepsY", "Y")
    ppgLayout.AddItem("StepsZ", "Z")
    ppgLayout.EndRow()
    ppgLayout.EndGroup()
    ppgLayout.EndGroup()

    ppgLayout.Language = "Python"
    ppgLayout.Logic = '''
def build_ui(prop):
    type_value = prop.Parameters("Type").Value
    if type_value in ["linear", "stepped"]:
        prop.Parameters("Clamp").ReadOnly = False
    else:
        prop.Parameters("Clamp").ReadOnly = True

    if type_value in ["stepped"]:
        prop.Parameters("StepsX").ReadOnly = False
        prop.Parameters("StepsY").ReadOnly = False
        prop.Parameters("StepsZ").ReadOnly = False
    else:
        prop.Parameters("StepsX").ReadOnly = True
        prop.Parameters("StepsY").ReadOnly = True
        prop.Parameters("StepsZ").ReadOnly = True

def OnInit():
    prop = PPG.Inspected(0)
    build_ui(prop)

def Type_OnChanged():
    prop = PPG.Inspected(0)
    build_ui(prop)'''

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "VectorMapRange"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesFloatCurve_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycFloatCurve")
    return True


def CyclesShadersPlugin_CyclesFloatCurve_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_fcurve(no_port_pram_options(), params, "Curve")
    add_input_float(standard_pram_options(), params, 1.0, "Fac", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 0.0, "Value")

    # Output Parameter: out
    add_output_float(shader_def, "Value")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Curve", "Curve")
    ppgLayout.AddItem("Fac", "Fac")
    ppgLayout.AddItem("Value", "Value")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "FloatCurve"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesClamp_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycClamp")
    return True


def CyclesShadersPlugin_CyclesClamp_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_string(no_port_pram_options(), params, "min_max", "Type")
    add_input_float(standard_pram_options(), params, 1.0, "Value", 0.0, 2.0)
    add_input_float(standard_pram_options(), params, 0.0, "Min", 0.0, 1.0)
    add_input_float(standard_pram_options(), params, 1.0, "Max", 0.0, 1.0)

    # Output Parameter: out
    add_output_float(shader_def, "Result")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddEnumControl("Type", clamp_type, "Type")
    ppgLayout.AddItem("Value", "Value")
    ppgLayout.AddItem("Min", "Min")
    ppgLayout.AddItem("Max", "Max")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "Clamp"

    return True


# --------------------------------------------------------------------
# --------------------------------------------------------------------
def CyclesShadersPlugin_CyclesRGBToBW_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "Cycles/Converter")
    in_ctxt.SetAttribute("DisplayName", "cycRGBtoBW")
    return True


def CyclesShadersPlugin_CyclesRGBToBW_1_0_Define(in_ctxt):
    shader_def = in_ctxt.GetAttribute("Definition")
    shader_def.AddShaderFamily(c.siShaderFamilyTexture)

    # Input Parameters
    params = shader_def.InputParamDefs
    add_input_color(standard_pram_options(), params, 0.0, "Color")

    # Output Parameter: out
    add_output_float(shader_def, "Val")

    # next init ppg
    ppgLayout = shader_def.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("Color", "Color")
    ppgLayout.EndGroup()

    # Renderer definition
    renderer_def = shader_def.AddRendererDef("Cycles")
    renderer_def.SymbolName = "RGBToBW"

    return True
