# CyclesLightsPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Sun May 1 22:10:01 UTC+0500 2016 by Shekn Itrch
#
# Tip: To add a command to this plug-in, right-click in the
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c

null = None
false = 0
true = 1


def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn Itrch"
    in_reg.Name = "CyclesLightsPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterCommand("CreatePointLight", "CreatePointLight")
    in_reg.RegisterCommand("CreateSunLight", "CreateSunLight")
    in_reg.RegisterCommand("CreateAreaLight", "CreateAreaLight")
    in_reg.RegisterCommand("CreateSpotLight", "CreateSpotLight")
    in_reg.RegisterCommand("CreateBackground", "CreateBackground")
    in_reg.RegisterCommand("PrintLightDirection", "PrintLightDirection")
    # RegistrationInsertionPoint - do not remove this line

    return true


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str("has been unloaded."), c.siVerbose)
    return true


def CreatePointLight_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def SetWireColor(obj):
    display = obj.Properties("Display")
    if (display.isa(c.siSharedPSet)):
        display = Application.MakeLocal(display, c.siNodePropagation)(0)
    name = obj.FullName
    Application.SetValue(name + ".display.wirecolorr", 0.878, "")
    Application.SetValue(name + ".display.wirecolorg", 0.251, "")
    Application.SetValue(name + ".display.wirecolorb", 0, "")


def CreatePointLight_Execute():
    Application.LogMessage("CreatePointLight_Execute called", c.siVerbose)
    root = Application.ActiveProject.ActiveScene.Root
    pLight = Application.GetPrim("cyclesPoint", "cyclesPointLight", root)
    SetWireColor(pLight)
    Application.ApplyEmission()
    return True


def CreateSunLight_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def CreateSunLight_Execute():
    Application.LogMessage("CreateSunLight_Execute called", c.siVerbose)
    root = Application.ActiveProject.ActiveScene.Root
    pLight = Application.GetPrim("cyclesSun", "cyclesSunLight", root)
    SetWireColor(pLight)
    Application.ApplyEmission()
    return True


def CreateAreaLight_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def CreateAreaLight_Execute():
    Application.LogMessage("CreateAreaLight_Execute called", c.siVerbose)
    root = Application.ActiveProject.ActiveScene.Root
    pLight = Application.GetPrim("cyclesArea", "cyclesAreaLight", root)
    SetWireColor(pLight)
    Application.ApplyEmission()
    # Application.MakeLocal(pLight.Material.FullName, "siDefaultPropagation")
    return True


def CreateSpotLight_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def CreateSpotLight_Execute():
    Application.LogMessage("CreateSpotLight_Execute called", c.siVerbose)
    root = Application.ActiveProject.ActiveScene.Root
    pLight = Application.GetPrim("cyclesSpot", "cyclesSpotLight", root)
    SetWireColor(pLight)
    Application.ApplyEmission()
    return True


def CreateBackground_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def CreateBackground_Execute():
    Application.LogMessage("CreateBackground_Execute called", c.siVerbose)
    root = Application.ActiveProject.ActiveScene.Root
    pLight = Application.GetPrim("cyclesBackground", "cyclesBackground", root)
    SetWireColor(pLight)
    Application.ApplyBackground()
    return True


def PrintLightDirection_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.Tooltip = ""
    oCmd.SetFlag(c.siSupportsKeyAssignment, False)
    oCmd.SetFlag(c.siCannotBeUsedInBatch, True)

    return true


def PrintLightDirection_Execute():
    Application.LogMessage("PrintLightDirection_Execute called", c.siVerbose)
    root = Application.ActiveProject.ActiveScene.Root
    sel = Application.Selection(0)
    if sel != None:
        oTrans = sel.Kinematics.Global.Transform.Matrix4
        vx = oTrans.Value(2, 0)
        vy = oTrans.Value(2, 1)
        vz = oTrans.Value(2, 2)

        Application.LogMessage("Coordinates for sun direction: " + str(vx) + " " + str(vy) + " " + str(vz))
    else:
        Application.LogMessage("Select the object")
    return True
